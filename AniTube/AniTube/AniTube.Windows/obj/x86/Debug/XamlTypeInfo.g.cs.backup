//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------



namespace AniTube
{
    public partial class App : global::Windows.UI.Xaml.Markup.IXamlMetadataProvider
    {
        private global::AniTube.AniTube_Windows_XamlTypeInfo.XamlTypeInfoProvider _provider;

        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlType(global::System.Type type)
        {
            if(_provider == null)
            {
                _provider = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlTypeInfoProvider();
            }
            return _provider.GetXamlTypeByType(type);
        }

        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlType(string fullName)
        {
            if(_provider == null)
            {
                _provider = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlTypeInfoProvider();
            }
            return _provider.GetXamlTypeByName(fullName);
        }

        public global::Windows.UI.Xaml.Markup.XmlnsDefinition[] GetXmlnsDefinitions()
        {
            return new global::Windows.UI.Xaml.Markup.XmlnsDefinition[0];
        }
    }
}

namespace AniTube.AniTube_Windows_XamlTypeInfo
{
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", "4.0.0.0")]    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal partial class XamlTypeInfoProvider
    {
        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlTypeByType(global::System.Type type)
        {
            global::Windows.UI.Xaml.Markup.IXamlType xamlType;
            if (_xamlTypeCacheByType.TryGetValue(type, out xamlType))
            {
                return xamlType;
            }
            int typeIndex = LookupTypeIndexByType(type);
            if(typeIndex != -1)
            {
                xamlType = CreateXamlType(typeIndex);
            }
            var userXamlType = xamlType as global::AniTube.AniTube_Windows_XamlTypeInfo.XamlUserType;
            if(xamlType == null || (userXamlType != null && userXamlType.IsReturnTypeStub && !userXamlType.IsLocalType))
            {
                global::Windows.UI.Xaml.Markup.IXamlType libXamlType = CheckOtherMetadataProvidersForType(type);
                if (libXamlType != null)
                {
                    if(libXamlType.IsConstructible || xamlType == null)
                    {
                        xamlType = libXamlType;
                    }
                }
            }
            if (xamlType != null)
            {
                _xamlTypeCacheByName.Add(xamlType.FullName, xamlType);
                _xamlTypeCacheByType.Add(xamlType.UnderlyingType, xamlType);
            }
            return xamlType;
        }

        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlTypeByName(string typeName)
        {
            if (string.IsNullOrEmpty(typeName))
            {
                return null;
            }
            global::Windows.UI.Xaml.Markup.IXamlType xamlType;
            if (_xamlTypeCacheByName.TryGetValue(typeName, out xamlType))
            {
                return xamlType;
            }
            int typeIndex = LookupTypeIndexByName(typeName);
            if(typeIndex != -1)
            {
                xamlType = CreateXamlType(typeIndex);
            }
            var userXamlType = xamlType as global::AniTube.AniTube_Windows_XamlTypeInfo.XamlUserType;
            if(xamlType == null || (userXamlType != null && userXamlType.IsReturnTypeStub && !userXamlType.IsLocalType))
            {
                global::Windows.UI.Xaml.Markup.IXamlType libXamlType = CheckOtherMetadataProvidersForName(typeName);
                if (libXamlType != null)
                {
                    if(libXamlType.IsConstructible || xamlType == null)
                    {
                        xamlType = libXamlType;
                    }
                }
            }
            if (xamlType != null)
            {
                _xamlTypeCacheByName.Add(xamlType.FullName, xamlType);
                _xamlTypeCacheByType.Add(xamlType.UnderlyingType, xamlType);
            }
            return xamlType;
        }

        public global::Windows.UI.Xaml.Markup.IXamlMember GetMemberByLongName(string longMemberName)
        {
            if (string.IsNullOrEmpty(longMemberName))
            {
                return null;
            }
            global::Windows.UI.Xaml.Markup.IXamlMember xamlMember;
            if (_xamlMembers.TryGetValue(longMemberName, out xamlMember))
            {
                return xamlMember;
            }
            xamlMember = CreateXamlMember(longMemberName);
            if (xamlMember != null)
            {
                _xamlMembers.Add(longMemberName, xamlMember);
            }
            return xamlMember;
        }

        global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlType>
                _xamlTypeCacheByName = new global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlType>();

        global::System.Collections.Generic.Dictionary<global::System.Type, global::Windows.UI.Xaml.Markup.IXamlType>
                _xamlTypeCacheByType = new global::System.Collections.Generic.Dictionary<global::System.Type, global::Windows.UI.Xaml.Markup.IXamlType>();

        global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlMember>
                _xamlMembers = new global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlMember>();

        string[] _typeNameTable = null;
        global::System.Type[] _typeTable = null;

        private void InitTypeTables()
        {
            _typeNameTable = new string[111];
            _typeNameTable[0] = "AniTube.ViewModels.ViewModelLocator";
            _typeNameTable[1] = "Object";
            _typeNameTable[2] = "AniTube.ViewModels.MainViewModel";
            _typeNameTable[3] = "GalaSoft.MvvmLight.ViewModelBase";
            _typeNameTable[4] = "GalaSoft.MvvmLight.ObservableObject";
            _typeNameTable[5] = "AniTube.ViewModels.PlaylistViewModel";
            _typeNameTable[6] = "AniTube.ViewModels.ItemClickedConverter";
            _typeNameTable[7] = "Microsoft.Xaml.Interactivity.Interaction";
            _typeNameTable[8] = "Microsoft.Xaml.Interactivity.BehaviorCollection";
            _typeNameTable[9] = "Windows.UI.Xaml.DependencyObjectCollection";
            _typeNameTable[10] = "Windows.UI.Xaml.DependencyObject";
            _typeNameTable[11] = "Microsoft.Xaml.Interactions.Core.EventTriggerBehavior";
            _typeNameTable[12] = "Microsoft.Xaml.Interactivity.ActionCollection";
            _typeNameTable[13] = "String";
            _typeNameTable[14] = "Microsoft.Xaml.Interactions.Core.InvokeCommandAction";
            _typeNameTable[15] = "System.Windows.Input.ICommand";
            _typeNameTable[16] = "Windows.UI.Xaml.Data.IValueConverter";
            _typeNameTable[17] = "AniTube.MainView";
            _typeNameTable[18] = "Windows.UI.Xaml.Controls.Page";
            _typeNameTable[19] = "Windows.UI.Xaml.Controls.UserControl";
            _typeNameTable[20] = "Microsoft.PlayerFramework.MediaPlayer";
            _typeNameTable[21] = "Windows.UI.Xaml.Controls.Control";
            _typeNameTable[22] = "System.Uri";
            _typeNameTable[23] = "Boolean";
            _typeNameTable[24] = "System.Nullable`1<TimeSpan>";
            _typeNameTable[25] = "System.ValueType";
            _typeNameTable[26] = "TimeSpan";
            _typeNameTable[27] = "Microsoft.PlayerFramework.MediaQuality";
            _typeNameTable[28] = "System.Enum";
            _typeNameTable[29] = "System.Collections.Generic.IList`1<System.Type>";
            _typeNameTable[30] = "System.Type";
            _typeNameTable[31] = "Int32";
            _typeNameTable[32] = "System.Type[]";
            _typeNameTable[33] = "System.Array";
            _typeNameTable[34] = "System.RuntimeTypeHandle";
            _typeNameTable[35] = "System.Collections.ObjectModel.ObservableCollection`1<Microsoft.PlayerFramework.IPlugin>";
            _typeNameTable[36] = "System.Collections.ObjectModel.Collection`1<Microsoft.PlayerFramework.IPlugin>";
            _typeNameTable[37] = "Microsoft.PlayerFramework.IPlugin";
            _typeNameTable[38] = "System.Collections.ObjectModel.ObservableCollection`1<Microsoft.PlayerFramework.VisualMarker>";
            _typeNameTable[39] = "System.Collections.ObjectModel.Collection`1<Microsoft.PlayerFramework.VisualMarker>";
            _typeNameTable[40] = "Microsoft.PlayerFramework.VisualMarker";
            _typeNameTable[41] = "Windows.UI.Xaml.Style";
            _typeNameTable[42] = "Windows.UI.Xaml.Media.TimelineMarkerCollection";
            _typeNameTable[43] = "Double";
            _typeNameTable[44] = "Microsoft.PlayerFramework.AdvertisingState";
            _typeNameTable[45] = "Microsoft.PlayerFramework.MediaEndedBehavior";
            _typeNameTable[46] = "System.Collections.Generic.List`1<Microsoft.PlayerFramework.Caption>";
            _typeNameTable[47] = "Microsoft.PlayerFramework.Caption";
            _typeNameTable[48] = "Windows.UI.Xaml.FrameworkElement";
            _typeNameTable[49] = "System.Collections.Generic.List`1<Microsoft.PlayerFramework.AudioStream>";
            _typeNameTable[50] = "Microsoft.PlayerFramework.AudioStream";
            _typeNameTable[51] = "Windows.UI.Xaml.Media.ImageSource";
            _typeNameTable[52] = "Windows.Media.MediaExtensionManager";
            _typeNameTable[53] = "Windows.UI.Xaml.Media.AudioCategory";
            _typeNameTable[54] = "Windows.UI.Xaml.Media.AudioDeviceType";
            _typeNameTable[55] = "Windows.Media.PlayTo.PlayToSource";
            _typeNameTable[56] = "Windows.UI.Xaml.Media.Stereo3DVideoPackingMode";
            _typeNameTable[57] = "Windows.UI.Xaml.Media.Stereo3DVideoRenderMode";
            _typeNameTable[58] = "Windows.Media.Protection.MediaProtectionManager";
            _typeNameTable[59] = "Windows.UI.Xaml.Media.Stretch";
            _typeNameTable[60] = "System.Nullable`1<Int32>";
            _typeNameTable[61] = "Windows.UI.Xaml.Duration";
            _typeNameTable[62] = "Windows.UI.Xaml.Media.MediaElementState";
            _typeNameTable[63] = "System.Collections.Generic.IList`1<Double>";
            _typeNameTable[64] = "Windows.UI.Xaml.Controls.ControlTemplate";
            _typeNameTable[65] = "System.Collections.Generic.IList`1<Windows.UI.Xaml.UIElement>";
            _typeNameTable[66] = "Windows.UI.Xaml.UIElement";
            _typeNameTable[67] = "Microsoft.PlayerFramework.IInteractiveViewModel";
            _typeNameTable[68] = "Microsoft.PlayerFramework.InteractionType";
            _typeNameTable[69] = "Microsoft.PlayerFramework.AutoHideBehavior";
            _typeNameTable[70] = "Microsoft.PlayerFramework.PlayerState";
            _typeNameTable[71] = "AniTube.PlaylistView";
            _typeNameTable[72] = "Telerik.UI.Xaml.Controls.Chart.ChartAnnotationLabelDefinition";
            _typeNameTable[73] = "Windows.UI.Xaml.DataTemplate";
            _typeNameTable[74] = "Telerik.UI.Xaml.Controls.Chart.ChartAnnotationLabelLocation";
            _typeNameTable[75] = "Windows.UI.Xaml.HorizontalAlignment";
            _typeNameTable[76] = "Windows.UI.Xaml.VerticalAlignment";
            _typeNameTable[77] = "Telerik.UI.Xaml.Controls.Chart.ChartPalette";
            _typeNameTable[78] = "Telerik.UI.Xaml.Controls.Chart.PaletteEntryCollection";
            _typeNameTable[79] = "System.Collections.Generic.List`1<Windows.UI.Xaml.Media.Brush>";
            _typeNameTable[80] = "Windows.UI.Xaml.Media.Brush";
            _typeNameTable[81] = "Telerik.UI.Xaml.Controls.Data.HexView.AngledHexLayoutDefinition";
            _typeNameTable[82] = "Telerik.UI.Xaml.Controls.Data.HexView.HexLayoutDefinitionBase";
            _typeNameTable[83] = "Windows.UI.Xaml.Controls.Orientation";
            _typeNameTable[84] = "Telerik.UI.Xaml.Controls.Data.HexView.FlatLooseHexLayoutDefinition";
            _typeNameTable[85] = "Telerik.UI.Xaml.Controls.Data.HexView.FlatTightHexLayoutDefinition";
            _typeNameTable[86] = "Telerik.UI.Xaml.Controls.Input.HighlightStyle";
            _typeNameTable[87] = "Windows.UI.Xaml.Media.FontFamily";
            _typeNameTable[88] = "Telerik.UI.Xaml.Controls.Input.FontWeightName";
            _typeNameTable[89] = "Windows.UI.Text.FontStyle";
            _typeNameTable[90] = "Telerik.UI.Xaml.Controls.Input.CalendarCellStyle";
            _typeNameTable[91] = "Telerik.UI.Xaml.Controls.Primitives.RadRadialMenu";
            _typeNameTable[92] = "Telerik.UI.Xaml.Controls.RadControl";
            _typeNameTable[93] = "System.Collections.ObjectModel.ObservableCollection`1<Telerik.UI.Xaml.Controls.Primitives.RadialMenuItem>";
            _typeNameTable[94] = "System.Collections.ObjectModel.Collection`1<Telerik.UI.Xaml.Controls.Primitives.RadialMenuItem>";
            _typeNameTable[95] = "Telerik.UI.Xaml.Controls.Primitives.RadialMenuItem";
            _typeNameTable[96] = "Telerik.UI.Xaml.Controls.Primitives.RadDependencyObject";
            _typeNameTable[97] = "Telerik.UI.Xaml.Controls.Primitives.Menu.CommandService";
            _typeNameTable[98] = "Telerik.UI.Xaml.Controls.Primitives.CommandServiceBase`1<Telerik.UI.Xaml.Controls.Primitives.RadRadialMenu>";
            _typeNameTable[99] = "Telerik.UI.Xaml.Controls.Primitives.ServiceBase`1<Telerik.UI.Xaml.Controls.Primitives.RadRadialMenu>";
            _typeNameTable[100] = "Telerik.UI.Xaml.Controls.Primitives.AttachableObject`1<Telerik.UI.Xaml.Controls.Primitives.RadRadialMenu>";
            _typeNameTable[101] = "Telerik.UI.Xaml.Controls.Primitives.CommandCollection`1<Telerik.UI.Xaml.Controls.Primitives.RadRadialMenu>";
            _typeNameTable[102] = "Telerik.UI.Xaml.Controls.Primitives.AttachableObjectCollection`2<Telerik.UI.Xaml.Controls.Primitives.RadRadialMenu, Telerik.UI.Xaml.Controls.Primitives.ControlCommandBase`1<Telerik.UI.Xaml.Controls.Primitives.RadRadialMenu>>";
            _typeNameTable[103] = "System.Collections.ObjectModel.ObservableCollection`1<Telerik.UI.Xaml.Controls.Primitives.ControlCommandBase`1<Telerik.UI.Xaml.Controls.Primitives.RadRadialMenu>>";
            _typeNameTable[104] = "System.Collections.ObjectModel.Collection`1<Telerik.UI.Xaml.Controls.Primitives.ControlCommandBase`1<Telerik.UI.Xaml.Controls.Primitives.RadRadialMenu>>";
            _typeNameTable[105] = "Telerik.UI.Xaml.Controls.Primitives.ControlCommandBase`1<Telerik.UI.Xaml.Controls.Primitives.RadRadialMenu>";
            _typeNameTable[106] = "Telerik.UI.Xaml.Controls.Primitives.RadialMenuTriggerBehavior";
            _typeNameTable[107] = "Telerik.UI.Xaml.Controls.Primitives.AttachableObject`1<Windows.UI.Xaml.FrameworkElement>";
            _typeNameTable[108] = "Telerik.UI.Xaml.Controls.Primitives.RadialMenuAttachTriggers";
            _typeNameTable[109] = "Telerik.UI.Xaml.Controls.Primitives.BusyIndicator.BusyIndicatorAnimationAdapter";
            _typeNameTable[110] = "Windows.UI.Xaml.Media.Animation.Storyboard";

            _typeTable = new global::System.Type[111];
            _typeTable[0] = typeof(global::AniTube.ViewModels.ViewModelLocator);
            _typeTable[1] = typeof(global::System.Object);
            _typeTable[2] = typeof(global::AniTube.ViewModels.MainViewModel);
            _typeTable[3] = typeof(global::GalaSoft.MvvmLight.ViewModelBase);
            _typeTable[4] = typeof(global::GalaSoft.MvvmLight.ObservableObject);
            _typeTable[5] = typeof(global::AniTube.ViewModels.PlaylistViewModel);
            _typeTable[6] = typeof(global::AniTube.ViewModels.ItemClickedConverter);
            _typeTable[7] = typeof(global::Microsoft.Xaml.Interactivity.Interaction);
            _typeTable[8] = typeof(global::Microsoft.Xaml.Interactivity.BehaviorCollection);
            _typeTable[9] = typeof(global::Windows.UI.Xaml.DependencyObjectCollection);
            _typeTable[10] = typeof(global::Windows.UI.Xaml.DependencyObject);
            _typeTable[11] = typeof(global::Microsoft.Xaml.Interactions.Core.EventTriggerBehavior);
            _typeTable[12] = typeof(global::Microsoft.Xaml.Interactivity.ActionCollection);
            _typeTable[13] = typeof(global::System.String);
            _typeTable[14] = typeof(global::Microsoft.Xaml.Interactions.Core.InvokeCommandAction);
            _typeTable[15] = typeof(global::System.Windows.Input.ICommand);
            _typeTable[16] = typeof(global::Windows.UI.Xaml.Data.IValueConverter);
            _typeTable[17] = typeof(global::AniTube.MainView);
            _typeTable[18] = typeof(global::Windows.UI.Xaml.Controls.Page);
            _typeTable[19] = typeof(global::Windows.UI.Xaml.Controls.UserControl);
            _typeTable[20] = typeof(global::Microsoft.PlayerFramework.MediaPlayer);
            _typeTable[21] = typeof(global::Windows.UI.Xaml.Controls.Control);
            _typeTable[22] = typeof(global::System.Uri);
            _typeTable[23] = typeof(global::System.Boolean);
            _typeTable[24] = typeof(global::System.Nullable<global::System.TimeSpan>);
            _typeTable[25] = typeof(global::System.ValueType);
            _typeTable[26] = typeof(global::System.TimeSpan);
            _typeTable[27] = typeof(global::Microsoft.PlayerFramework.MediaQuality);
            _typeTable[28] = typeof(global::System.Enum);
            _typeTable[29] = typeof(global::System.Collections.Generic.IList<global::System.Type>);
            _typeTable[30] = typeof(global::System.Type);
            _typeTable[31] = typeof(global::System.Int32);
            _typeTable[32] = typeof(global::System.Type[]);
            _typeTable[33] = typeof(global::System.Array);
            _typeTable[34] = typeof(global::System.RuntimeTypeHandle);
            _typeTable[35] = typeof(global::System.Collections.ObjectModel.ObservableCollection<global::Microsoft.PlayerFramework.IPlugin>);
            _typeTable[36] = typeof(global::System.Collections.ObjectModel.Collection<global::Microsoft.PlayerFramework.IPlugin>);
            _typeTable[37] = typeof(global::Microsoft.PlayerFramework.IPlugin);
            _typeTable[38] = typeof(global::System.Collections.ObjectModel.ObservableCollection<global::Microsoft.PlayerFramework.VisualMarker>);
            _typeTable[39] = typeof(global::System.Collections.ObjectModel.Collection<global::Microsoft.PlayerFramework.VisualMarker>);
            _typeTable[40] = typeof(global::Microsoft.PlayerFramework.VisualMarker);
            _typeTable[41] = typeof(global::Windows.UI.Xaml.Style);
            _typeTable[42] = typeof(global::Windows.UI.Xaml.Media.TimelineMarkerCollection);
            _typeTable[43] = typeof(global::System.Double);
            _typeTable[44] = typeof(global::Microsoft.PlayerFramework.AdvertisingState);
            _typeTable[45] = typeof(global::Microsoft.PlayerFramework.MediaEndedBehavior);
            _typeTable[46] = typeof(global::System.Collections.Generic.List<global::Microsoft.PlayerFramework.Caption>);
            _typeTable[47] = typeof(global::Microsoft.PlayerFramework.Caption);
            _typeTable[48] = typeof(global::Windows.UI.Xaml.FrameworkElement);
            _typeTable[49] = typeof(global::System.Collections.Generic.List<global::Microsoft.PlayerFramework.AudioStream>);
            _typeTable[50] = typeof(global::Microsoft.PlayerFramework.AudioStream);
            _typeTable[51] = typeof(global::Windows.UI.Xaml.Media.ImageSource);
            _typeTable[52] = typeof(global::Windows.Media.MediaExtensionManager);
            _typeTable[53] = typeof(global::Windows.UI.Xaml.Media.AudioCategory);
            _typeTable[54] = typeof(global::Windows.UI.Xaml.Media.AudioDeviceType);
            _typeTable[55] = typeof(global::Windows.Media.PlayTo.PlayToSource);
            _typeTable[56] = typeof(global::Windows.UI.Xaml.Media.Stereo3DVideoPackingMode);
            _typeTable[57] = typeof(global::Windows.UI.Xaml.Media.Stereo3DVideoRenderMode);
            _typeTable[58] = typeof(global::Windows.Media.Protection.MediaProtectionManager);
            _typeTable[59] = typeof(global::Windows.UI.Xaml.Media.Stretch);
            _typeTable[60] = typeof(global::System.Nullable<global::System.Int32>);
            _typeTable[61] = typeof(global::Windows.UI.Xaml.Duration);
            _typeTable[62] = typeof(global::Windows.UI.Xaml.Media.MediaElementState);
            _typeTable[63] = typeof(global::System.Collections.Generic.IList<global::System.Double>);
            _typeTable[64] = typeof(global::Windows.UI.Xaml.Controls.ControlTemplate);
            _typeTable[65] = typeof(global::System.Collections.Generic.IList<global::Windows.UI.Xaml.UIElement>);
            _typeTable[66] = typeof(global::Windows.UI.Xaml.UIElement);
            _typeTable[67] = typeof(global::Microsoft.PlayerFramework.IInteractiveViewModel);
            _typeTable[68] = typeof(global::Microsoft.PlayerFramework.InteractionType);
            _typeTable[69] = typeof(global::Microsoft.PlayerFramework.AutoHideBehavior);
            _typeTable[70] = typeof(global::Microsoft.PlayerFramework.PlayerState);
            _typeTable[71] = typeof(global::AniTube.PlaylistView);
            _typeTable[72] = typeof(global::Telerik.UI.Xaml.Controls.Chart.ChartAnnotationLabelDefinition);
            _typeTable[73] = typeof(global::Windows.UI.Xaml.DataTemplate);
            _typeTable[74] = typeof(global::Telerik.UI.Xaml.Controls.Chart.ChartAnnotationLabelLocation);
            _typeTable[75] = typeof(global::Windows.UI.Xaml.HorizontalAlignment);
            _typeTable[76] = typeof(global::Windows.UI.Xaml.VerticalAlignment);
            _typeTable[77] = typeof(global::Telerik.UI.Xaml.Controls.Chart.ChartPalette);
            _typeTable[78] = typeof(global::Telerik.UI.Xaml.Controls.Chart.PaletteEntryCollection);
            _typeTable[79] = typeof(global::System.Collections.Generic.List<global::Windows.UI.Xaml.Media.Brush>);
            _typeTable[80] = typeof(global::Windows.UI.Xaml.Media.Brush);
            _typeTable[81] = typeof(global::Telerik.UI.Xaml.Controls.Data.HexView.AngledHexLayoutDefinition);
            _typeTable[82] = typeof(global::Telerik.UI.Xaml.Controls.Data.HexView.HexLayoutDefinitionBase);
            _typeTable[83] = typeof(global::Windows.UI.Xaml.Controls.Orientation);
            _typeTable[84] = typeof(global::Telerik.UI.Xaml.Controls.Data.HexView.FlatLooseHexLayoutDefinition);
            _typeTable[85] = typeof(global::Telerik.UI.Xaml.Controls.Data.HexView.FlatTightHexLayoutDefinition);
            _typeTable[86] = typeof(global::Telerik.UI.Xaml.Controls.Input.HighlightStyle);
            _typeTable[87] = typeof(global::Windows.UI.Xaml.Media.FontFamily);
            _typeTable[88] = typeof(global::Telerik.UI.Xaml.Controls.Input.FontWeightName);
            _typeTable[89] = typeof(global::Windows.UI.Text.FontStyle);
            _typeTable[90] = typeof(global::Telerik.UI.Xaml.Controls.Input.CalendarCellStyle);
            _typeTable[91] = typeof(global::Telerik.UI.Xaml.Controls.Primitives.RadRadialMenu);
            _typeTable[92] = typeof(global::Telerik.UI.Xaml.Controls.RadControl);
            _typeTable[93] = typeof(global::System.Collections.ObjectModel.ObservableCollection<global::Telerik.UI.Xaml.Controls.Primitives.RadialMenuItem>);
            _typeTable[94] = typeof(global::System.Collections.ObjectModel.Collection<global::Telerik.UI.Xaml.Controls.Primitives.RadialMenuItem>);
            _typeTable[95] = typeof(global::Telerik.UI.Xaml.Controls.Primitives.RadialMenuItem);
            _typeTable[96] = typeof(global::Telerik.UI.Xaml.Controls.Primitives.RadDependencyObject);
            _typeTable[97] = typeof(global::Telerik.UI.Xaml.Controls.Primitives.Menu.CommandService);
            _typeTable[98] = typeof(global::Telerik.UI.Xaml.Controls.Primitives.CommandServiceBase<global::Telerik.UI.Xaml.Controls.Primitives.RadRadialMenu>);
            _typeTable[99] = typeof(global::Telerik.UI.Xaml.Controls.Primitives.ServiceBase<global::Telerik.UI.Xaml.Controls.Primitives.RadRadialMenu>);
            _typeTable[100] = typeof(global::Telerik.UI.Xaml.Controls.Primitives.AttachableObject<global::Telerik.UI.Xaml.Controls.Primitives.RadRadialMenu>);
            _typeTable[101] = typeof(global::Telerik.UI.Xaml.Controls.Primitives.CommandCollection<global::Telerik.UI.Xaml.Controls.Primitives.RadRadialMenu>);
            _typeTable[102] = typeof(global::Telerik.UI.Xaml.Controls.Primitives.AttachableObjectCollection<global::Telerik.UI.Xaml.Controls.Primitives.RadRadialMenu, Telerik.UI.Xaml.Controls.Primitives.ControlCommandBase<global::Telerik.UI.Xaml.Controls.Primitives.RadRadialMenu>>);
            _typeTable[103] = typeof(global::System.Collections.ObjectModel.ObservableCollection<Telerik.UI.Xaml.Controls.Primitives.ControlCommandBase<global::Telerik.UI.Xaml.Controls.Primitives.RadRadialMenu>>);
            _typeTable[104] = typeof(global::System.Collections.ObjectModel.Collection<Telerik.UI.Xaml.Controls.Primitives.ControlCommandBase<global::Telerik.UI.Xaml.Controls.Primitives.RadRadialMenu>>);
            _typeTable[105] = typeof(global::Telerik.UI.Xaml.Controls.Primitives.ControlCommandBase<global::Telerik.UI.Xaml.Controls.Primitives.RadRadialMenu>);
            _typeTable[106] = typeof(global::Telerik.UI.Xaml.Controls.Primitives.RadialMenuTriggerBehavior);
            _typeTable[107] = typeof(global::Telerik.UI.Xaml.Controls.Primitives.AttachableObject<global::Windows.UI.Xaml.FrameworkElement>);
            _typeTable[108] = typeof(global::Telerik.UI.Xaml.Controls.Primitives.RadialMenuAttachTriggers);
            _typeTable[109] = typeof(global::Telerik.UI.Xaml.Controls.Primitives.BusyIndicator.BusyIndicatorAnimationAdapter);
            _typeTable[110] = typeof(global::Windows.UI.Xaml.Media.Animation.Storyboard);
        }

        private int LookupTypeIndexByName(string typeName)
        {
            if (_typeNameTable == null)
            {
                InitTypeTables();
            }
            for (int i=0; i<_typeNameTable.Length; i++)
            {
                if(0 == string.CompareOrdinal(_typeNameTable[i], typeName))
                {
                    return i;
                }
            }
            return -1;
        }

        private int LookupTypeIndexByType(global::System.Type type)
        {
            if (_typeTable == null)
            {
                InitTypeTables();
            }
            for(int i=0; i<_typeTable.Length; i++)
            {
                if(type == _typeTable[i])
                {
                    return i;
                }
            }
            return -1;
        }

        private object Activate_0_ViewModelLocator() { return new global::AniTube.ViewModels.ViewModelLocator(); }
        private object Activate_2_MainViewModel() { return new global::AniTube.ViewModels.MainViewModel(); }
        private object Activate_4_ObservableObject() { return new global::GalaSoft.MvvmLight.ObservableObject(); }
        private object Activate_5_PlaylistViewModel() { return new global::AniTube.ViewModels.PlaylistViewModel(); }
        private object Activate_6_ItemClickedConverter() { return new global::AniTube.ViewModels.ItemClickedConverter(); }
        private object Activate_8_BehaviorCollection() { return new global::Microsoft.Xaml.Interactivity.BehaviorCollection(); }
        private object Activate_11_EventTriggerBehavior() { return new global::Microsoft.Xaml.Interactions.Core.EventTriggerBehavior(); }
        private object Activate_12_ActionCollection() { return new global::Microsoft.Xaml.Interactivity.ActionCollection(); }
        private object Activate_14_InvokeCommandAction() { return new global::Microsoft.Xaml.Interactions.Core.InvokeCommandAction(); }
        private object Activate_17_MainView() { return new global::AniTube.MainView(); }
        private object Activate_20_MediaPlayer() { return new global::Microsoft.PlayerFramework.MediaPlayer(); }
        private object Activate_35_ObservableCollection() { return new global::System.Collections.ObjectModel.ObservableCollection<global::Microsoft.PlayerFramework.IPlugin>(); }
        private object Activate_36_Collection() { return new global::System.Collections.ObjectModel.Collection<global::Microsoft.PlayerFramework.IPlugin>(); }
        private object Activate_38_ObservableCollection() { return new global::System.Collections.ObjectModel.ObservableCollection<global::Microsoft.PlayerFramework.VisualMarker>(); }
        private object Activate_39_Collection() { return new global::System.Collections.ObjectModel.Collection<global::Microsoft.PlayerFramework.VisualMarker>(); }
        private object Activate_40_VisualMarker() { return new global::Microsoft.PlayerFramework.VisualMarker(); }
        private object Activate_46_List() { return new global::System.Collections.Generic.List<global::Microsoft.PlayerFramework.Caption>(); }
        private object Activate_47_Caption() { return new global::Microsoft.PlayerFramework.Caption(); }
        private object Activate_49_List() { return new global::System.Collections.Generic.List<global::Microsoft.PlayerFramework.AudioStream>(); }
        private object Activate_50_AudioStream() { return new global::Microsoft.PlayerFramework.AudioStream(); }
        private object Activate_52_MediaExtensionManager() { return new global::Windows.Media.MediaExtensionManager(); }
        private object Activate_58_MediaProtectionManager() { return new global::Windows.Media.Protection.MediaProtectionManager(); }
        private object Activate_71_PlaylistView() { return new global::AniTube.PlaylistView(); }
        private object Activate_72_ChartAnnotationLabelDefinition() { return new global::Telerik.UI.Xaml.Controls.Chart.ChartAnnotationLabelDefinition(); }
        private object Activate_77_ChartPalette() { return new global::Telerik.UI.Xaml.Controls.Chart.ChartPalette(); }
        private object Activate_78_PaletteEntryCollection() { return new global::Telerik.UI.Xaml.Controls.Chart.PaletteEntryCollection(); }
        private object Activate_79_List() { return new global::System.Collections.Generic.List<global::Windows.UI.Xaml.Media.Brush>(); }
        private object Activate_81_AngledHexLayoutDefinition() { return new global::Telerik.UI.Xaml.Controls.Data.HexView.AngledHexLayoutDefinition(); }
        private object Activate_84_FlatLooseHexLayoutDefinition() { return new global::Telerik.UI.Xaml.Controls.Data.HexView.FlatLooseHexLayoutDefinition(); }
        private object Activate_85_FlatTightHexLayoutDefinition() { return new global::Telerik.UI.Xaml.Controls.Data.HexView.FlatTightHexLayoutDefinition(); }
        private object Activate_86_HighlightStyle() { return new global::Telerik.UI.Xaml.Controls.Input.HighlightStyle(); }
        private object Activate_90_CalendarCellStyle() { return new global::Telerik.UI.Xaml.Controls.Input.CalendarCellStyle(); }
        private object Activate_91_RadRadialMenu() { return new global::Telerik.UI.Xaml.Controls.Primitives.RadRadialMenu(); }
        private object Activate_93_ObservableCollection() { return new global::System.Collections.ObjectModel.ObservableCollection<global::Telerik.UI.Xaml.Controls.Primitives.RadialMenuItem>(); }
        private object Activate_94_Collection() { return new global::System.Collections.ObjectModel.Collection<global::Telerik.UI.Xaml.Controls.Primitives.RadialMenuItem>(); }
        private object Activate_95_RadialMenuItem() { return new global::Telerik.UI.Xaml.Controls.Primitives.RadialMenuItem(); }
        private object Activate_103_ObservableCollection() { return new global::System.Collections.ObjectModel.ObservableCollection<Telerik.UI.Xaml.Controls.Primitives.ControlCommandBase<global::Telerik.UI.Xaml.Controls.Primitives.RadRadialMenu>>(); }
        private object Activate_104_Collection() { return new global::System.Collections.ObjectModel.Collection<Telerik.UI.Xaml.Controls.Primitives.ControlCommandBase<global::Telerik.UI.Xaml.Controls.Primitives.RadRadialMenu>>(); }
        private object Activate_106_RadialMenuTriggerBehavior() { return new global::Telerik.UI.Xaml.Controls.Primitives.RadialMenuTriggerBehavior(); }
        private object Activate_109_BusyIndicatorAnimationAdapter() { return new global::Telerik.UI.Xaml.Controls.Primitives.BusyIndicator.BusyIndicatorAnimationAdapter(); }
        private void VectorAdd_8_BehaviorCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Windows.UI.Xaml.DependencyObject>)instance;
            var newItem = (global::Windows.UI.Xaml.DependencyObject)item;
            collection.Add(newItem);
        }
        private void VectorAdd_12_ActionCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Windows.UI.Xaml.DependencyObject>)instance;
            var newItem = (global::Windows.UI.Xaml.DependencyObject)item;
            collection.Add(newItem);
        }
        private void VectorAdd_29_IList(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::System.Type>)instance;
            var newItem = (global::System.Type)item;
            collection.Add(newItem);
        }
        private void VectorAdd_35_ObservableCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Microsoft.PlayerFramework.IPlugin>)instance;
            var newItem = (global::Microsoft.PlayerFramework.IPlugin)item;
            collection.Add(newItem);
        }
        private void VectorAdd_36_Collection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Microsoft.PlayerFramework.IPlugin>)instance;
            var newItem = (global::Microsoft.PlayerFramework.IPlugin)item;
            collection.Add(newItem);
        }
        private void VectorAdd_38_ObservableCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Microsoft.PlayerFramework.VisualMarker>)instance;
            var newItem = (global::Microsoft.PlayerFramework.VisualMarker)item;
            collection.Add(newItem);
        }
        private void VectorAdd_39_Collection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Microsoft.PlayerFramework.VisualMarker>)instance;
            var newItem = (global::Microsoft.PlayerFramework.VisualMarker)item;
            collection.Add(newItem);
        }
        private void VectorAdd_46_List(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Microsoft.PlayerFramework.Caption>)instance;
            var newItem = (global::Microsoft.PlayerFramework.Caption)item;
            collection.Add(newItem);
        }
        private void VectorAdd_49_List(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Microsoft.PlayerFramework.AudioStream>)instance;
            var newItem = (global::Microsoft.PlayerFramework.AudioStream)item;
            collection.Add(newItem);
        }
        private void VectorAdd_63_IList(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::System.Double>)instance;
            var newItem = (global::System.Double)item;
            collection.Add(newItem);
        }
        private void VectorAdd_65_IList(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Windows.UI.Xaml.UIElement>)instance;
            var newItem = (global::Windows.UI.Xaml.UIElement)item;
            collection.Add(newItem);
        }
        private void VectorAdd_79_List(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Windows.UI.Xaml.Media.Brush>)instance;
            var newItem = (global::Windows.UI.Xaml.Media.Brush)item;
            collection.Add(newItem);
        }
        private void VectorAdd_93_ObservableCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Telerik.UI.Xaml.Controls.Primitives.RadialMenuItem>)instance;
            var newItem = (global::Telerik.UI.Xaml.Controls.Primitives.RadialMenuItem)item;
            collection.Add(newItem);
        }
        private void VectorAdd_94_Collection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Telerik.UI.Xaml.Controls.Primitives.RadialMenuItem>)instance;
            var newItem = (global::Telerik.UI.Xaml.Controls.Primitives.RadialMenuItem)item;
            collection.Add(newItem);
        }
        private void VectorAdd_101_CommandCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Telerik.UI.Xaml.Controls.Primitives.ControlCommandBase<global::Telerik.UI.Xaml.Controls.Primitives.RadRadialMenu>>)instance;
            var newItem = (global::Telerik.UI.Xaml.Controls.Primitives.ControlCommandBase<global::Telerik.UI.Xaml.Controls.Primitives.RadRadialMenu>)item;
            collection.Add(newItem);
        }
        private void VectorAdd_102_AttachableObjectCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Telerik.UI.Xaml.Controls.Primitives.ControlCommandBase<global::Telerik.UI.Xaml.Controls.Primitives.RadRadialMenu>>)instance;
            var newItem = (global::Telerik.UI.Xaml.Controls.Primitives.ControlCommandBase<global::Telerik.UI.Xaml.Controls.Primitives.RadRadialMenu>)item;
            collection.Add(newItem);
        }
        private void VectorAdd_103_ObservableCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Telerik.UI.Xaml.Controls.Primitives.ControlCommandBase<global::Telerik.UI.Xaml.Controls.Primitives.RadRadialMenu>>)instance;
            var newItem = (global::Telerik.UI.Xaml.Controls.Primitives.ControlCommandBase<global::Telerik.UI.Xaml.Controls.Primitives.RadRadialMenu>)item;
            collection.Add(newItem);
        }
        private void VectorAdd_104_Collection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Telerik.UI.Xaml.Controls.Primitives.ControlCommandBase<global::Telerik.UI.Xaml.Controls.Primitives.RadRadialMenu>>)instance;
            var newItem = (global::Telerik.UI.Xaml.Controls.Primitives.ControlCommandBase<global::Telerik.UI.Xaml.Controls.Primitives.RadRadialMenu>)item;
            collection.Add(newItem);
        }

        private global::Windows.UI.Xaml.Markup.IXamlType CreateXamlType(int typeIndex)
        {
            global::AniTube.AniTube_Windows_XamlTypeInfo.XamlSystemBaseType xamlType = null;
            global::AniTube.AniTube_Windows_XamlTypeInfo.XamlUserType userType;
            string typeName = _typeNameTable[typeIndex];
            global::System.Type type = _typeTable[typeIndex];

            switch (typeIndex)
            {

            case 0:   //  AniTube.ViewModels.ViewModelLocator
                userType = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_0_ViewModelLocator;
                userType.AddMemberName("MainViewModel");
                userType.AddMemberName("PlaylistViewModel");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 1:   //  Object
                xamlType = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 2:   //  AniTube.ViewModels.MainViewModel
                userType = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("GalaSoft.MvvmLight.ViewModelBase"));
                userType.SetIsReturnTypeStub();
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 3:   //  GalaSoft.MvvmLight.ViewModelBase
                userType = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("GalaSoft.MvvmLight.ObservableObject"));
                xamlType = userType;
                break;

            case 4:   //  GalaSoft.MvvmLight.ObservableObject
                userType = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_4_ObservableObject;
                xamlType = userType;
                break;

            case 5:   //  AniTube.ViewModels.PlaylistViewModel
                userType = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("GalaSoft.MvvmLight.ViewModelBase"));
                userType.SetIsReturnTypeStub();
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 6:   //  AniTube.ViewModels.ItemClickedConverter
                userType = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_6_ItemClickedConverter;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 7:   //  Microsoft.Xaml.Interactivity.Interaction
                userType = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.AddMemberName("Behaviors");
                xamlType = userType;
                break;

            case 8:   //  Microsoft.Xaml.Interactivity.BehaviorCollection
                userType = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.DependencyObjectCollection"));
                userType.CollectionAdd = VectorAdd_8_BehaviorCollection;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 9:   //  Windows.UI.Xaml.DependencyObjectCollection
                xamlType = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 10:   //  Windows.UI.Xaml.DependencyObject
                xamlType = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 11:   //  Microsoft.Xaml.Interactions.Core.EventTriggerBehavior
                userType = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.DependencyObject"));
                userType.Activator = Activate_11_EventTriggerBehavior;
                userType.SetContentPropertyName("Microsoft.Xaml.Interactions.Core.EventTriggerBehavior.Actions");
                userType.AddMemberName("Actions");
                userType.AddMemberName("EventName");
                userType.AddMemberName("SourceObject");
                userType.AddMemberName("AssociatedObject");
                xamlType = userType;
                break;

            case 12:   //  Microsoft.Xaml.Interactivity.ActionCollection
                userType = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.DependencyObjectCollection"));
                userType.CollectionAdd = VectorAdd_12_ActionCollection;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 13:   //  String
                xamlType = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 14:   //  Microsoft.Xaml.Interactions.Core.InvokeCommandAction
                userType = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.DependencyObject"));
                userType.Activator = Activate_14_InvokeCommandAction;
                userType.AddMemberName("Command");
                userType.AddMemberName("InputConverter");
                userType.AddMemberName("CommandParameter");
                userType.AddMemberName("InputConverterParameter");
                userType.AddMemberName("InputConverterLanguage");
                xamlType = userType;
                break;

            case 15:   //  System.Windows.Input.ICommand
                userType = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlUserType(this, typeName, type, null);
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 16:   //  Windows.UI.Xaml.Data.IValueConverter
                xamlType = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 17:   //  AniTube.MainView
                userType = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_17_MainView;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 18:   //  Windows.UI.Xaml.Controls.Page
                xamlType = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 19:   //  Windows.UI.Xaml.Controls.UserControl
                xamlType = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 20:   //  Microsoft.PlayerFramework.MediaPlayer
                userType = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Control"));
                userType.Activator = Activate_20_MediaPlayer;
                userType.AddMemberName("Source");
                userType.AddMemberName("IsFullScreenVisible");
                userType.AddMemberName("IsFullScreen");
                userType.AddMemberName("AutoPlay");
                userType.AddMemberName("AllowMediaStartingDeferrals");
                userType.AddMemberName("StartupPosition");
                userType.AddMemberName("EndTime");
                userType.AddMemberName("Position");
                userType.AddMemberName("MediaQuality");
                userType.AddMemberName("UpdateInterval");
                userType.AddMemberName("IsResolutionIndicatorVisible");
                userType.AddMemberName("IsSkipBackVisible");
                userType.AddMemberName("IsSkipAheadVisible");
                userType.AddMemberName("AutoLoadPluginTypes");
                userType.AddMemberName("AutoLoadPlugins");
                userType.AddMemberName("Plugins");
                userType.AddMemberName("IsCaptionSelectionEnabled");
                userType.AddMemberName("IsCaptionSelectionAllowed");
                userType.AddMemberName("IsFullScreenEnabled");
                userType.AddMemberName("IsZoomEnabled");
                userType.AddMemberName("IsGoLiveEnabled");
                userType.AddMemberName("IsGoLiveAllowed");
                userType.AddMemberName("IsInfoEnabled");
                userType.AddMemberName("IsInfoAllowed");
                userType.AddMemberName("IsMoreEnabled");
                userType.AddMemberName("IsPlayResumeEnabled");
                userType.AddMemberName("IsPlayResumeAllowed");
                userType.AddMemberName("IsPauseEnabled");
                userType.AddMemberName("IsPauseAllowed");
                userType.AddMemberName("IsStopEnabled");
                userType.AddMemberName("IsStopAllowed");
                userType.AddMemberName("IsReplayEnabled");
                userType.AddMemberName("IsReplayAllowed");
                userType.AddMemberName("IsAudioSelectionEnabled");
                userType.AddMemberName("IsAudioSelectionAllowed");
                userType.AddMemberName("IsRewindEnabled");
                userType.AddMemberName("IsRewindAllowed");
                userType.AddMemberName("IsFastForwardEnabled");
                userType.AddMemberName("IsFastForwardAllowed");
                userType.AddMemberName("IsSlowMotionEnabled");
                userType.AddMemberName("IsSlowMotionAllowed");
                userType.AddMemberName("IsSeekEnabled");
                userType.AddMemberName("IsSeekAllowed");
                userType.AddMemberName("IsSkipPreviousEnabled");
                userType.AddMemberName("IsSkipPreviousAllowed");
                userType.AddMemberName("IsSkipNextEnabled");
                userType.AddMemberName("IsSkipNextAllowed");
                userType.AddMemberName("IsSkipBackEnabled");
                userType.AddMemberName("IsSkipBackAllowed");
                userType.AddMemberName("IsSkipAheadEnabled");
                userType.AddMemberName("IsSkipAheadAllowed");
                userType.AddMemberName("IsScrubbingEnabled");
                userType.AddMemberName("IsScrubbingAllowed");
                userType.AddMemberName("IsAudioSelectionVisible");
                userType.AddMemberName("IsCaptionSelectionVisible");
                userType.AddMemberName("IsDurationVisible");
                userType.AddMemberName("IsTimeRemainingVisible");
                userType.AddMemberName("IsFastForwardVisible");
                userType.AddMemberName("IsZoomVisible");
                userType.AddMemberName("IsGoLiveVisible");
                userType.AddMemberName("IsInfoVisible");
                userType.AddMemberName("IsMoreVisible");
                userType.AddMemberName("IsPlayPauseVisible");
                userType.AddMemberName("IsTimeElapsedVisible");
                userType.AddMemberName("IsReplayVisible");
                userType.AddMemberName("IsRewindVisible");
                userType.AddMemberName("IsSkipPreviousVisible");
                userType.AddMemberName("IsSkipNextVisible");
                userType.AddMemberName("IsSlowMotionVisible");
                userType.AddMemberName("IsStopVisible");
                userType.AddMemberName("IsTimelineVisible");
                userType.AddMemberName("IsVolumeVisible");
                userType.AddMemberName("IsSignalStrengthVisible");
                userType.AddMemberName("TimeFormatConverter");
                userType.AddMemberName("SkipBackInterval");
                userType.AddMemberName("SkipAheadInterval");
                userType.AddMemberName("VisualMarkers");
                userType.AddMemberName("Markers");
                userType.AddMemberName("AutoLoad");
                userType.AddMemberName("SignalStrength");
                userType.AddMemberName("LivePositionBuffer");
                userType.AddMemberName("IsPositionLive");
                userType.AddMemberName("LivePosition");
                userType.AddMemberName("Duration");
                userType.AddMemberName("IsStartTimeOffset");
                userType.AddMemberName("StartTime");
                userType.AddMemberName("TimeRemaining");
                userType.AddMemberName("SeekWhileScrubbing");
                userType.AddMemberName("ReplayOffset");
                userType.AddMemberName("SlowMotionPlaybackRate");
                userType.AddMemberName("IsSlowMotion");
                userType.AddMemberName("IsCaptionsActive");
                userType.AddMemberName("AdvertisingState");
                userType.AddMemberName("IsScrubbing");
                userType.AddMemberName("MediaEndedBehavior");
                userType.AddMemberName("AvailableCaptions");
                userType.AddMemberName("SelectedCaption");
                userType.AddMemberName("AvailableAudioStreams");
                userType.AddMemberName("SelectedAudioStream");
                userType.AddMemberName("IsLive");
                userType.AddMemberName("IsThumbnailVisible");
                userType.AddMemberName("VirtualPosition");
                userType.AddMemberName("ThumbnailImageSource");
                userType.AddMemberName("TestForMediaPack");
                userType.AddMemberName("MediaExtensionManager");
                userType.AddMemberName("AspectRatioWidth");
                userType.AddMemberName("AspectRatioHeight");
                userType.AddMemberName("AudioCategory");
                userType.AddMemberName("AudioDeviceType");
                userType.AddMemberName("PlayToSource");
                userType.AddMemberName("DefaultPlaybackRate");
                userType.AddMemberName("IsAudioOnly");
                userType.AddMemberName("IsLooping");
                userType.AddMemberName("PosterSource");
                userType.AddMemberName("ActualStereo3DVideoPackingMode");
                userType.AddMemberName("Stereo3DVideoPackingMode");
                userType.AddMemberName("Stereo3DVideoRenderMode");
                userType.AddMemberName("IsStereo3DVideo");
                userType.AddMemberName("RealTimePlayback");
                userType.AddMemberName("ProtectionManager");
                userType.AddMemberName("AreTransportControlsEnabled");
                userType.AddMemberName("IsFullWindow");
                userType.AddMemberName("PlayToPreferredSourceUri");
                userType.AddMemberName("Stretch");
                userType.AddMemberName("AudioStreamCount");
                userType.AddMemberName("AudioStreamIndex");
                userType.AddMemberName("BufferingProgress");
                userType.AddMemberName("CanPause");
                userType.AddMemberName("CanSeek");
                userType.AddMemberName("Balance");
                userType.AddMemberName("DownloadProgress");
                userType.AddMemberName("DownloadProgressOffset");
                userType.AddMemberName("IsMuted");
                userType.AddMemberName("NaturalDuration");
                userType.AddMemberName("NaturalVideoHeight");
                userType.AddMemberName("NaturalVideoWidth");
                userType.AddMemberName("PlaybackRate");
                userType.AddMemberName("IsTrickPlayEnabled");
                userType.AddMemberName("CurrentState");
                userType.AddMemberName("Volume");
                userType.AddMemberName("SupportedPlaybackRates");
                userType.AddMemberName("ControlPanelTemplate");
                userType.AddMemberName("ControlPanel");
                userType.AddMemberName("AutoHideInterval");
                userType.AddMemberName("Containers");
                userType.AddMemberName("InteractiveViewModel");
                userType.AddMemberName("DefaultInteractiveViewModel");
                userType.AddMemberName("InteractiveActivationMode");
                userType.AddMemberName("InteractiveDeactivationMode");
                userType.AddMemberName("AutoHide");
                userType.AddMemberName("AutoHideBehavior");
                userType.AddMemberName("IsInteractive");
                userType.AddMemberName("PlayerState");
                xamlType = userType;
                break;

            case 21:   //  Windows.UI.Xaml.Controls.Control
                xamlType = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 22:   //  System.Uri
                userType = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 23:   //  Boolean
                xamlType = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 24:   //  System.Nullable`1<TimeSpan>
                userType = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.ValueType"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 25:   //  System.ValueType
                userType = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                xamlType = userType;
                break;

            case 26:   //  TimeSpan
                userType = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.ValueType"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 27:   //  Microsoft.PlayerFramework.MediaQuality
                userType = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("StandardDefinition", global::Microsoft.PlayerFramework.MediaQuality.StandardDefinition);
                userType.AddEnumValue("HighDefinition", global::Microsoft.PlayerFramework.MediaQuality.HighDefinition);
                xamlType = userType;
                break;

            case 28:   //  System.Enum
                userType = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.ValueType"));
                xamlType = userType;
                break;

            case 29:   //  System.Collections.Generic.IList`1<System.Type>
                userType = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlUserType(this, typeName, type, null);
                userType.CollectionAdd = VectorAdd_29_IList;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 30:   //  System.Type
                userType = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.AddMemberName("AssemblyQualifiedName");
                userType.AddMemberName("FullName");
                userType.AddMemberName("GenericParameterPosition");
                userType.AddMemberName("GenericTypeArguments");
                userType.AddMemberName("HasElementType");
                userType.AddMemberName("IsArray");
                userType.AddMemberName("IsByRef");
                userType.AddMemberName("IsConstructedGenericType");
                userType.AddMemberName("IsGenericParameter");
                userType.AddMemberName("IsNested");
                userType.AddMemberName("IsPointer");
                userType.AddMemberName("Namespace");
                userType.AddMemberName("TypeHandle");
                userType.AddMemberName("DeclaringType");
                userType.AddMemberName("Name");
                xamlType = userType;
                break;

            case 31:   //  Int32
                xamlType = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 32:   //  System.Type[]
                userType = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Array"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 33:   //  System.Array
                userType = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                xamlType = userType;
                break;

            case 34:   //  System.RuntimeTypeHandle
                userType = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.ValueType"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 35:   //  System.Collections.ObjectModel.ObservableCollection`1<Microsoft.PlayerFramework.IPlugin>
                userType = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Collections.ObjectModel.Collection`1<Microsoft.PlayerFramework.IPlugin>"));
                userType.CollectionAdd = VectorAdd_35_ObservableCollection;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 36:   //  System.Collections.ObjectModel.Collection`1<Microsoft.PlayerFramework.IPlugin>
                userType = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_36_Collection;
                userType.CollectionAdd = VectorAdd_36_Collection;
                xamlType = userType;
                break;

            case 37:   //  Microsoft.PlayerFramework.IPlugin
                userType = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlUserType(this, typeName, type, null);
                userType.AddMemberName("MediaPlayer");
                xamlType = userType;
                break;

            case 38:   //  System.Collections.ObjectModel.ObservableCollection`1<Microsoft.PlayerFramework.VisualMarker>
                userType = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Collections.ObjectModel.Collection`1<Microsoft.PlayerFramework.VisualMarker>"));
                userType.CollectionAdd = VectorAdd_38_ObservableCollection;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 39:   //  System.Collections.ObjectModel.Collection`1<Microsoft.PlayerFramework.VisualMarker>
                userType = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_39_Collection;
                userType.CollectionAdd = VectorAdd_39_Collection;
                xamlType = userType;
                break;

            case 40:   //  Microsoft.PlayerFramework.VisualMarker
                userType = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.DependencyObject"));
                userType.Activator = Activate_40_VisualMarker;
                userType.AddMemberName("Text");
                userType.AddMemberName("Time");
                userType.AddMemberName("IsSeekable");
                userType.AddMemberName("Style");
                xamlType = userType;
                break;

            case 41:   //  Windows.UI.Xaml.Style
                xamlType = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 42:   //  Windows.UI.Xaml.Media.TimelineMarkerCollection
                xamlType = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 43:   //  Double
                xamlType = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 44:   //  Microsoft.PlayerFramework.AdvertisingState
                userType = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("None", global::Microsoft.PlayerFramework.AdvertisingState.None);
                userType.AddEnumValue("Loading", global::Microsoft.PlayerFramework.AdvertisingState.Loading);
                userType.AddEnumValue("Linear", global::Microsoft.PlayerFramework.AdvertisingState.Linear);
                userType.AddEnumValue("NonLinear", global::Microsoft.PlayerFramework.AdvertisingState.NonLinear);
                xamlType = userType;
                break;

            case 45:   //  Microsoft.PlayerFramework.MediaEndedBehavior
                userType = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("Manual", global::Microsoft.PlayerFramework.MediaEndedBehavior.Manual);
                userType.AddEnumValue("Stop", global::Microsoft.PlayerFramework.MediaEndedBehavior.Stop);
                userType.AddEnumValue("Reset", global::Microsoft.PlayerFramework.MediaEndedBehavior.Reset);
                xamlType = userType;
                break;

            case 46:   //  System.Collections.Generic.List`1<Microsoft.PlayerFramework.Caption>
                userType = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.CollectionAdd = VectorAdd_46_List;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 47:   //  Microsoft.PlayerFramework.Caption
                userType = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.FrameworkElement"));
                userType.Activator = Activate_47_Caption;
                userType.AddMemberName("Id");
                userType.AddMemberName("Description");
                userType.AddMemberName("Payload");
                userType.AddMemberName("Source");
                xamlType = userType;
                break;

            case 48:   //  Windows.UI.Xaml.FrameworkElement
                xamlType = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 49:   //  System.Collections.Generic.List`1<Microsoft.PlayerFramework.AudioStream>
                userType = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.CollectionAdd = VectorAdd_49_List;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 50:   //  Microsoft.PlayerFramework.AudioStream
                userType = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_50_AudioStream;
                userType.AddMemberName("Name");
                userType.AddMemberName("Language");
                xamlType = userType;
                break;

            case 51:   //  Windows.UI.Xaml.Media.ImageSource
                xamlType = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 52:   //  Windows.Media.MediaExtensionManager
                userType = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 53:   //  Windows.UI.Xaml.Media.AudioCategory
                xamlType = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 54:   //  Windows.UI.Xaml.Media.AudioDeviceType
                xamlType = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 55:   //  Windows.Media.PlayTo.PlayToSource
                userType = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 56:   //  Windows.UI.Xaml.Media.Stereo3DVideoPackingMode
                xamlType = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 57:   //  Windows.UI.Xaml.Media.Stereo3DVideoRenderMode
                xamlType = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 58:   //  Windows.Media.Protection.MediaProtectionManager
                userType = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 59:   //  Windows.UI.Xaml.Media.Stretch
                xamlType = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 60:   //  System.Nullable`1<Int32>
                userType = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.ValueType"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 61:   //  Windows.UI.Xaml.Duration
                xamlType = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 62:   //  Windows.UI.Xaml.Media.MediaElementState
                xamlType = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 63:   //  System.Collections.Generic.IList`1<Double>
                userType = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlUserType(this, typeName, type, null);
                userType.CollectionAdd = VectorAdd_63_IList;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 64:   //  Windows.UI.Xaml.Controls.ControlTemplate
                xamlType = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 65:   //  System.Collections.Generic.IList`1<Windows.UI.Xaml.UIElement>
                userType = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlUserType(this, typeName, type, null);
                userType.CollectionAdd = VectorAdd_65_IList;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 66:   //  Windows.UI.Xaml.UIElement
                xamlType = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 67:   //  Microsoft.PlayerFramework.IInteractiveViewModel
                userType = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlUserType(this, typeName, type, null);
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 68:   //  Microsoft.PlayerFramework.InteractionType
                userType = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("None", global::Microsoft.PlayerFramework.InteractionType.None);
                userType.AddEnumValue("Soft", global::Microsoft.PlayerFramework.InteractionType.Soft);
                userType.AddEnumValue("Hard", global::Microsoft.PlayerFramework.InteractionType.Hard);
                userType.AddEnumValue("All", global::Microsoft.PlayerFramework.InteractionType.All);
                xamlType = userType;
                break;

            case 69:   //  Microsoft.PlayerFramework.AutoHideBehavior
                userType = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("None", global::Microsoft.PlayerFramework.AutoHideBehavior.None);
                userType.AddEnumValue("AllowDuringPlaybackOnly", global::Microsoft.PlayerFramework.AutoHideBehavior.AllowDuringPlaybackOnly);
                userType.AddEnumValue("PreventDuringInteractiveHover", global::Microsoft.PlayerFramework.AutoHideBehavior.PreventDuringInteractiveHover);
                userType.AddEnumValue("All", global::Microsoft.PlayerFramework.AutoHideBehavior.All);
                xamlType = userType;
                break;

            case 70:   //  Microsoft.PlayerFramework.PlayerState
                userType = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("Unloaded", global::Microsoft.PlayerFramework.PlayerState.Unloaded);
                userType.AddEnumValue("Pending", global::Microsoft.PlayerFramework.PlayerState.Pending);
                userType.AddEnumValue("Loading", global::Microsoft.PlayerFramework.PlayerState.Loading);
                userType.AddEnumValue("Loaded", global::Microsoft.PlayerFramework.PlayerState.Loaded);
                userType.AddEnumValue("Opened", global::Microsoft.PlayerFramework.PlayerState.Opened);
                userType.AddEnumValue("Starting", global::Microsoft.PlayerFramework.PlayerState.Starting);
                userType.AddEnumValue("Started", global::Microsoft.PlayerFramework.PlayerState.Started);
                userType.AddEnumValue("Ending", global::Microsoft.PlayerFramework.PlayerState.Ending);
                userType.AddEnumValue("Failed", global::Microsoft.PlayerFramework.PlayerState.Failed);
                xamlType = userType;
                break;

            case 71:   //  AniTube.PlaylistView
                userType = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_71_PlaylistView;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 72:   //  Telerik.UI.Xaml.Controls.Chart.ChartAnnotationLabelDefinition
                userType = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.DependencyObject"));
                userType.Activator = Activate_72_ChartAnnotationLabelDefinition;
                userType.AddMemberName("Format");
                userType.AddMemberName("Template");
                userType.AddMemberName("DefaultVisualStyle");
                userType.AddMemberName("Location");
                userType.AddMemberName("HorizontalAlignment");
                userType.AddMemberName("VerticalAlignment");
                userType.AddMemberName("HorizontalOffset");
                userType.AddMemberName("VerticalOffset");
                userType.SetIsBindable();
                xamlType = userType;
                break;

            case 73:   //  Windows.UI.Xaml.DataTemplate
                xamlType = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 74:   //  Telerik.UI.Xaml.Controls.Chart.ChartAnnotationLabelLocation
                userType = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("Left", global::Telerik.UI.Xaml.Controls.Chart.ChartAnnotationLabelLocation.Left);
                userType.AddEnumValue("Top", global::Telerik.UI.Xaml.Controls.Chart.ChartAnnotationLabelLocation.Top);
                userType.AddEnumValue("Right", global::Telerik.UI.Xaml.Controls.Chart.ChartAnnotationLabelLocation.Right);
                userType.AddEnumValue("Bottom", global::Telerik.UI.Xaml.Controls.Chart.ChartAnnotationLabelLocation.Bottom);
                userType.AddEnumValue("Inside", global::Telerik.UI.Xaml.Controls.Chart.ChartAnnotationLabelLocation.Inside);
                xamlType = userType;
                break;

            case 75:   //  Windows.UI.Xaml.HorizontalAlignment
                xamlType = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 76:   //  Windows.UI.Xaml.VerticalAlignment
                xamlType = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 77:   //  Telerik.UI.Xaml.Controls.Chart.ChartPalette
                userType = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.DependencyObject"));
                userType.Activator = Activate_77_ChartPalette;
                userType.AddMemberName("Name");
                userType.AddMemberName("FillEntries");
                userType.AddMemberName("SpecialFillEntries");
                userType.AddMemberName("StrokeEntries");
                userType.AddMemberName("SpecialStrokeEntries");
                userType.SetIsBindable();
                xamlType = userType;
                break;

            case 78:   //  Telerik.UI.Xaml.Controls.Chart.PaletteEntryCollection
                userType = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_78_PaletteEntryCollection;
                userType.SetContentPropertyName("Telerik.UI.Xaml.Controls.Chart.PaletteEntryCollection.Brushes");
                userType.AddMemberName("Brushes");
                xamlType = userType;
                break;

            case 79:   //  System.Collections.Generic.List`1<Windows.UI.Xaml.Media.Brush>
                userType = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.CollectionAdd = VectorAdd_79_List;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 80:   //  Windows.UI.Xaml.Media.Brush
                xamlType = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 81:   //  Telerik.UI.Xaml.Controls.Data.HexView.AngledHexLayoutDefinition
                userType = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Telerik.UI.Xaml.Controls.Data.HexView.HexLayoutDefinitionBase"));
                userType.Activator = Activate_81_AngledHexLayoutDefinition;
                userType.SetIsBindable();
                xamlType = userType;
                break;

            case 82:   //  Telerik.UI.Xaml.Controls.Data.HexView.HexLayoutDefinitionBase
                userType = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.DependencyObject"));
                userType.AddMemberName("Orientation");
                userType.AddMemberName("ItemLength");
                userType.AddMemberName("ItemsSpacing");
                userType.AddMemberName("ViewPortExtension");
                xamlType = userType;
                break;

            case 83:   //  Windows.UI.Xaml.Controls.Orientation
                xamlType = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 84:   //  Telerik.UI.Xaml.Controls.Data.HexView.FlatLooseHexLayoutDefinition
                userType = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Telerik.UI.Xaml.Controls.Data.HexView.HexLayoutDefinitionBase"));
                userType.Activator = Activate_84_FlatLooseHexLayoutDefinition;
                userType.SetIsBindable();
                xamlType = userType;
                break;

            case 85:   //  Telerik.UI.Xaml.Controls.Data.HexView.FlatTightHexLayoutDefinition
                userType = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Telerik.UI.Xaml.Controls.Data.HexView.HexLayoutDefinitionBase"));
                userType.Activator = Activate_85_FlatTightHexLayoutDefinition;
                userType.SetIsBindable();
                xamlType = userType;
                break;

            case 86:   //  Telerik.UI.Xaml.Controls.Input.HighlightStyle
                userType = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.DependencyObject"));
                userType.Activator = Activate_86_HighlightStyle;
                userType.AddMemberName("FontFamily");
                userType.AddMemberName("FontWeight");
                userType.AddMemberName("FontStyle");
                userType.AddMemberName("Foreground");
                userType.AddMemberName("FontSize");
                userType.SetIsBindable();
                xamlType = userType;
                break;

            case 87:   //  Windows.UI.Xaml.Media.FontFamily
                xamlType = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 88:   //  Telerik.UI.Xaml.Controls.Input.FontWeightName
                userType = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("Black", global::Telerik.UI.Xaml.Controls.Input.FontWeightName.Black);
                userType.AddEnumValue("Bold", global::Telerik.UI.Xaml.Controls.Input.FontWeightName.Bold);
                userType.AddEnumValue("ExtraBlack", global::Telerik.UI.Xaml.Controls.Input.FontWeightName.ExtraBlack);
                userType.AddEnumValue("ExtraBold", global::Telerik.UI.Xaml.Controls.Input.FontWeightName.ExtraBold);
                userType.AddEnumValue("ExtraLight", global::Telerik.UI.Xaml.Controls.Input.FontWeightName.ExtraLight);
                userType.AddEnumValue("Light", global::Telerik.UI.Xaml.Controls.Input.FontWeightName.Light);
                userType.AddEnumValue("Medium", global::Telerik.UI.Xaml.Controls.Input.FontWeightName.Medium);
                userType.AddEnumValue("Normal", global::Telerik.UI.Xaml.Controls.Input.FontWeightName.Normal);
                userType.AddEnumValue("SemiBold", global::Telerik.UI.Xaml.Controls.Input.FontWeightName.SemiBold);
                userType.AddEnumValue("SemiLight", global::Telerik.UI.Xaml.Controls.Input.FontWeightName.SemiLight);
                userType.AddEnumValue("Thin", global::Telerik.UI.Xaml.Controls.Input.FontWeightName.Thin);
                xamlType = userType;
                break;

            case 89:   //  Windows.UI.Text.FontStyle
                userType = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("Normal", global::Windows.UI.Text.FontStyle.Normal);
                userType.AddEnumValue("Oblique", global::Windows.UI.Text.FontStyle.Oblique);
                userType.AddEnumValue("Italic", global::Windows.UI.Text.FontStyle.Italic);
                xamlType = userType;
                break;

            case 90:   //  Telerik.UI.Xaml.Controls.Input.CalendarCellStyle
                userType = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.DependencyObject"));
                userType.Activator = Activate_90_CalendarCellStyle;
                userType.AddMemberName("ContentStyle");
                userType.AddMemberName("DecorationStyle");
                userType.SetIsBindable();
                xamlType = userType;
                break;

            case 91:   //  Telerik.UI.Xaml.Controls.Primitives.RadRadialMenu
                userType = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Telerik.UI.Xaml.Controls.RadControl"));
                userType.Activator = Activate_91_RadRadialMenu;
                userType.SetContentPropertyName("Telerik.UI.Xaml.Controls.Primitives.RadRadialMenu.Items");
                userType.AddMemberName("Items");
                userType.AddMemberName("ShowToolTip");
                userType.AddMemberName("IsOpen");
                userType.AddMemberName("StartAngle");
                userType.AddMemberName("InnerNavigationRadiusFactor");
                userType.AddMemberName("InnerRadiusFactor");
                userType.AddMemberName("OuterRadiusFactor");
                userType.AddMemberName("ContentMenuBackgroundStyle");
                userType.AddMemberName("NavigationMenuBackgroundStyle");
                userType.AddMemberName("CommandService");
                userType.AddMemberName("Commands");
                userType.AddMemberName("TargetElement");
                userType.SetIsBindable();
                xamlType = userType;
                break;

            case 92:   //  Telerik.UI.Xaml.Controls.RadControl
                userType = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Control"));
                userType.AddMemberName("CurrentVisualState");
                xamlType = userType;
                break;

            case 93:   //  System.Collections.ObjectModel.ObservableCollection`1<Telerik.UI.Xaml.Controls.Primitives.RadialMenuItem>
                userType = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Collections.ObjectModel.Collection`1<Telerik.UI.Xaml.Controls.Primitives.RadialMenuItem>"));
                userType.CollectionAdd = VectorAdd_93_ObservableCollection;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 94:   //  System.Collections.ObjectModel.Collection`1<Telerik.UI.Xaml.Controls.Primitives.RadialMenuItem>
                userType = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_94_Collection;
                userType.CollectionAdd = VectorAdd_94_Collection;
                xamlType = userType;
                break;

            case 95:   //  Telerik.UI.Xaml.Controls.Primitives.RadialMenuItem
                userType = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Telerik.UI.Xaml.Controls.Primitives.RadDependencyObject"));
                userType.Activator = Activate_95_RadialMenuItem;
                userType.SetContentPropertyName("Telerik.UI.Xaml.Controls.Primitives.RadialMenuItem.ChildItems");
                userType.AddMemberName("ChildItems");
                userType.AddMemberName("ToolTipContent");
                userType.AddMemberName("CommandParameter");
                userType.AddMemberName("IsEnabled");
                userType.AddMemberName("Command");
                userType.AddMemberName("ParentItem");
                userType.AddMemberName("IsSelected");
                userType.AddMemberName("GroupName");
                userType.AddMemberName("Selectable");
                userType.AddMemberName("Deselectable");
                userType.AddMemberName("Header");
                userType.AddMemberName("IconContent");
                userType.AddMemberName("ContentSectorBackground");
                xamlType = userType;
                break;

            case 96:   //  Telerik.UI.Xaml.Controls.Primitives.RadDependencyObject
                userType = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.DependencyObject"));
                xamlType = userType;
                break;

            case 97:   //  Telerik.UI.Xaml.Controls.Primitives.Menu.CommandService
                userType = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Telerik.UI.Xaml.Controls.Primitives.CommandServiceBase`1<Telerik.UI.Xaml.Controls.Primitives.RadRadialMenu>"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 98:   //  Telerik.UI.Xaml.Controls.Primitives.CommandServiceBase`1<Telerik.UI.Xaml.Controls.Primitives.RadRadialMenu>
                userType = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Telerik.UI.Xaml.Controls.Primitives.ServiceBase`1<Telerik.UI.Xaml.Controls.Primitives.RadRadialMenu>"));
                xamlType = userType;
                break;

            case 99:   //  Telerik.UI.Xaml.Controls.Primitives.ServiceBase`1<Telerik.UI.Xaml.Controls.Primitives.RadRadialMenu>
                userType = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Telerik.UI.Xaml.Controls.Primitives.AttachableObject`1<Telerik.UI.Xaml.Controls.Primitives.RadRadialMenu>"));
                xamlType = userType;
                break;

            case 100:   //  Telerik.UI.Xaml.Controls.Primitives.AttachableObject`1<Telerik.UI.Xaml.Controls.Primitives.RadRadialMenu>
                userType = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Telerik.UI.Xaml.Controls.Primitives.RadDependencyObject"));
                userType.AddMemberName("Owner");
                xamlType = userType;
                break;

            case 101:   //  Telerik.UI.Xaml.Controls.Primitives.CommandCollection`1<Telerik.UI.Xaml.Controls.Primitives.RadRadialMenu>
                userType = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Telerik.UI.Xaml.Controls.Primitives.AttachableObjectCollection`2<Telerik.UI.Xaml.Controls.Primitives.RadRadialMenu, Telerik.UI.Xaml.Controls.Primitives.ControlCommandBase`1<Telerik.UI.Xaml.Controls.Primitives.RadRadialMenu>>"));
                userType.CollectionAdd = VectorAdd_101_CommandCollection;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 102:   //  Telerik.UI.Xaml.Controls.Primitives.AttachableObjectCollection`2<Telerik.UI.Xaml.Controls.Primitives.RadRadialMenu, Telerik.UI.Xaml.Controls.Primitives.ControlCommandBase`1<Telerik.UI.Xaml.Controls.Primitives.RadRadialMenu>>
                userType = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Collections.ObjectModel.ObservableCollection`1<Telerik.UI.Xaml.Controls.Primitives.ControlCommandBase`1<Telerik.UI.Xaml.Controls.Primitives.RadRadialMenu>>"));
                userType.CollectionAdd = VectorAdd_102_AttachableObjectCollection;
                xamlType = userType;
                break;

            case 103:   //  System.Collections.ObjectModel.ObservableCollection`1<Telerik.UI.Xaml.Controls.Primitives.ControlCommandBase`1<Telerik.UI.Xaml.Controls.Primitives.RadRadialMenu>>
                userType = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Collections.ObjectModel.Collection`1<Telerik.UI.Xaml.Controls.Primitives.ControlCommandBase`1<Telerik.UI.Xaml.Controls.Primitives.RadRadialMenu>>"));
                userType.Activator = Activate_103_ObservableCollection;
                userType.CollectionAdd = VectorAdd_103_ObservableCollection;
                xamlType = userType;
                break;

            case 104:   //  System.Collections.ObjectModel.Collection`1<Telerik.UI.Xaml.Controls.Primitives.ControlCommandBase`1<Telerik.UI.Xaml.Controls.Primitives.RadRadialMenu>>
                userType = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_104_Collection;
                userType.CollectionAdd = VectorAdd_104_Collection;
                xamlType = userType;
                break;

            case 105:   //  Telerik.UI.Xaml.Controls.Primitives.ControlCommandBase`1<Telerik.UI.Xaml.Controls.Primitives.RadRadialMenu>
                userType = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Telerik.UI.Xaml.Controls.Primitives.AttachableObject`1<Telerik.UI.Xaml.Controls.Primitives.RadRadialMenu>"));
                xamlType = userType;
                break;

            case 106:   //  Telerik.UI.Xaml.Controls.Primitives.RadialMenuTriggerBehavior
                userType = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Telerik.UI.Xaml.Controls.Primitives.AttachableObject`1<Windows.UI.Xaml.FrameworkElement>"));
                userType.Activator = Activate_106_RadialMenuTriggerBehavior;
                userType.AddMemberName("AttachTriggers");
                userType.SetIsBindable();
                xamlType = userType;
                break;

            case 107:   //  Telerik.UI.Xaml.Controls.Primitives.AttachableObject`1<Windows.UI.Xaml.FrameworkElement>
                userType = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Telerik.UI.Xaml.Controls.Primitives.RadDependencyObject"));
                userType.AddMemberName("Owner");
                xamlType = userType;
                break;

            case 108:   //  Telerik.UI.Xaml.Controls.Primitives.RadialMenuAttachTriggers
                userType = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("None", global::Telerik.UI.Xaml.Controls.Primitives.RadialMenuAttachTriggers.None);
                userType.AddEnumValue("PointerPressed", global::Telerik.UI.Xaml.Controls.Primitives.RadialMenuAttachTriggers.PointerPressed);
                userType.AddEnumValue("PointerOver", global::Telerik.UI.Xaml.Controls.Primitives.RadialMenuAttachTriggers.PointerOver);
                userType.AddEnumValue("Focused", global::Telerik.UI.Xaml.Controls.Primitives.RadialMenuAttachTriggers.Focused);
                userType.AddEnumValue("PressedOrFocused", global::Telerik.UI.Xaml.Controls.Primitives.RadialMenuAttachTriggers.PressedOrFocused);
                xamlType = userType;
                break;

            case 109:   //  Telerik.UI.Xaml.Controls.Primitives.BusyIndicator.BusyIndicatorAnimationAdapter
                userType = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.FrameworkElement"));
                userType.Activator = Activate_109_BusyIndicatorAnimationAdapter;
                userType.AddMemberName("Animation");
                userType.SetIsBindable();
                xamlType = userType;
                break;

            case 110:   //  Windows.UI.Xaml.Media.Animation.Storyboard
                xamlType = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;
            }
            return xamlType;
        }

        private global::System.Collections.Generic.List<global::Windows.UI.Xaml.Markup.IXamlMetadataProvider> _otherProviders;
        private global::System.Collections.Generic.List<global::Windows.UI.Xaml.Markup.IXamlMetadataProvider> OtherProviders
        {
            get
            {
                if(_otherProviders == null)
                {
                    _otherProviders = new global::System.Collections.Generic.List<global::Windows.UI.Xaml.Markup.IXamlMetadataProvider>();
                    global::Windows.UI.Xaml.Markup.IXamlMetadataProvider provider;
                    provider = new global::Microsoft.PlayerFramework.Microsoft_PlayerFramework_Universal_Core_XamlTypeInfo.XamlMetaDataProvider() as global::Windows.UI.Xaml.Markup.IXamlMetadataProvider;
                    _otherProviders.Add(provider); 
                    provider = new global::Telerik.UI.Xaml.Controls.Chart.Chart_Windows_XamlTypeInfo.XamlMetaDataProvider() as global::Windows.UI.Xaml.Markup.IXamlMetadataProvider;
                    _otherProviders.Add(provider); 
                    provider = new global::Telerik.UI.Xaml.Controls.Data.DataControls_Windows_XamlTypeInfo.XamlMetaDataProvider() as global::Windows.UI.Xaml.Markup.IXamlMetadataProvider;
                    _otherProviders.Add(provider); 
                    provider = new global::Telerik.UI.Xaml.Controls.DataVisualization.DataVisualization_Windows_XamlTypeInfo.XamlMetaDataProvider() as global::Windows.UI.Xaml.Markup.IXamlMetadataProvider;
                    _otherProviders.Add(provider); 
                    provider = new global::Telerik.UI.Xaml.Controls.Grid.Grid_Windows_XamlTypeInfo.XamlMetaDataProvider() as global::Windows.UI.Xaml.Markup.IXamlMetadataProvider;
                    _otherProviders.Add(provider); 
                    provider = new global::Telerik.UI.Xaml.Controls.Input.Input_Windows_XamlTypeInfo.XamlMetaDataProvider() as global::Windows.UI.Xaml.Markup.IXamlMetadataProvider;
                    _otherProviders.Add(provider); 
                    provider = new global::Telerik.UI.Xaml.Controls.Primitives.Primitives_Windows_XamlTypeInfo.XamlMetaDataProvider() as global::Windows.UI.Xaml.Markup.IXamlMetadataProvider;
                    _otherProviders.Add(provider); 
                }
                return _otherProviders;
            }
        }

        private global::Windows.UI.Xaml.Markup.IXamlType CheckOtherMetadataProvidersForName(string typeName)
        {
            global::Windows.UI.Xaml.Markup.IXamlType xamlType = null;
            global::Windows.UI.Xaml.Markup.IXamlType foundXamlType = null;
            foreach(global::Windows.UI.Xaml.Markup.IXamlMetadataProvider xmp in OtherProviders)
            {
                xamlType = xmp.GetXamlType(typeName);
                if(xamlType != null)
                {
                    if(xamlType.IsConstructible)    // not Constructible means it might be a Return Type Stub
                    {
                        return xamlType;
                    }
                    foundXamlType = xamlType;
                }
            }
            return foundXamlType;
        }

        private global::Windows.UI.Xaml.Markup.IXamlType CheckOtherMetadataProvidersForType(global::System.Type type)
        {
            global::Windows.UI.Xaml.Markup.IXamlType xamlType = null;
            global::Windows.UI.Xaml.Markup.IXamlType foundXamlType = null;
            foreach(global::Windows.UI.Xaml.Markup.IXamlMetadataProvider xmp in OtherProviders)
            {
                xamlType = xmp.GetXamlType(type);
                if(xamlType != null)
                {
                    if(xamlType.IsConstructible)    // not Constructible means it might be a Return Type Stub
                    {
                        return xamlType;
                    }
                    foundXamlType = xamlType;
                }
            }
            return foundXamlType;
        }

        private object get_0_ViewModelLocator_MainViewModel(object instance)
        {
            var that = (global::AniTube.ViewModels.ViewModelLocator)instance;
            return that.MainViewModel;
        }
        private object get_1_ViewModelLocator_PlaylistViewModel(object instance)
        {
            var that = (global::AniTube.ViewModels.ViewModelLocator)instance;
            return that.PlaylistViewModel;
        }
        private object get_2_Interaction_Behaviors(object instance)
        {
            return global::Microsoft.Xaml.Interactivity.Interaction.GetBehaviors((global::Windows.UI.Xaml.DependencyObject)instance);
        }
        private void set_2_Interaction_Behaviors(object instance, object Value)
        {
            global::Microsoft.Xaml.Interactivity.Interaction.SetBehaviors((global::Windows.UI.Xaml.DependencyObject)instance, (global::Microsoft.Xaml.Interactivity.BehaviorCollection)Value);
        }
        private object get_3_EventTriggerBehavior_Actions(object instance)
        {
            var that = (global::Microsoft.Xaml.Interactions.Core.EventTriggerBehavior)instance;
            return that.Actions;
        }
        private object get_4_EventTriggerBehavior_EventName(object instance)
        {
            var that = (global::Microsoft.Xaml.Interactions.Core.EventTriggerBehavior)instance;
            return that.EventName;
        }
        private void set_4_EventTriggerBehavior_EventName(object instance, object Value)
        {
            var that = (global::Microsoft.Xaml.Interactions.Core.EventTriggerBehavior)instance;
            that.EventName = (global::System.String)Value;
        }
        private object get_5_EventTriggerBehavior_SourceObject(object instance)
        {
            var that = (global::Microsoft.Xaml.Interactions.Core.EventTriggerBehavior)instance;
            return that.SourceObject;
        }
        private void set_5_EventTriggerBehavior_SourceObject(object instance, object Value)
        {
            var that = (global::Microsoft.Xaml.Interactions.Core.EventTriggerBehavior)instance;
            that.SourceObject = (global::System.Object)Value;
        }
        private object get_6_EventTriggerBehavior_AssociatedObject(object instance)
        {
            var that = (global::Microsoft.Xaml.Interactions.Core.EventTriggerBehavior)instance;
            return that.AssociatedObject;
        }
        private object get_7_InvokeCommandAction_Command(object instance)
        {
            var that = (global::Microsoft.Xaml.Interactions.Core.InvokeCommandAction)instance;
            return that.Command;
        }
        private void set_7_InvokeCommandAction_Command(object instance, object Value)
        {
            var that = (global::Microsoft.Xaml.Interactions.Core.InvokeCommandAction)instance;
            that.Command = (global::System.Windows.Input.ICommand)Value;
        }
        private object get_8_InvokeCommandAction_InputConverter(object instance)
        {
            var that = (global::Microsoft.Xaml.Interactions.Core.InvokeCommandAction)instance;
            return that.InputConverter;
        }
        private void set_8_InvokeCommandAction_InputConverter(object instance, object Value)
        {
            var that = (global::Microsoft.Xaml.Interactions.Core.InvokeCommandAction)instance;
            that.InputConverter = (global::Windows.UI.Xaml.Data.IValueConverter)Value;
        }
        private object get_9_InvokeCommandAction_CommandParameter(object instance)
        {
            var that = (global::Microsoft.Xaml.Interactions.Core.InvokeCommandAction)instance;
            return that.CommandParameter;
        }
        private void set_9_InvokeCommandAction_CommandParameter(object instance, object Value)
        {
            var that = (global::Microsoft.Xaml.Interactions.Core.InvokeCommandAction)instance;
            that.CommandParameter = (global::System.Object)Value;
        }
        private object get_10_InvokeCommandAction_InputConverterParameter(object instance)
        {
            var that = (global::Microsoft.Xaml.Interactions.Core.InvokeCommandAction)instance;
            return that.InputConverterParameter;
        }
        private void set_10_InvokeCommandAction_InputConverterParameter(object instance, object Value)
        {
            var that = (global::Microsoft.Xaml.Interactions.Core.InvokeCommandAction)instance;
            that.InputConverterParameter = (global::System.Object)Value;
        }
        private object get_11_InvokeCommandAction_InputConverterLanguage(object instance)
        {
            var that = (global::Microsoft.Xaml.Interactions.Core.InvokeCommandAction)instance;
            return that.InputConverterLanguage;
        }
        private void set_11_InvokeCommandAction_InputConverterLanguage(object instance, object Value)
        {
            var that = (global::Microsoft.Xaml.Interactions.Core.InvokeCommandAction)instance;
            that.InputConverterLanguage = (global::System.String)Value;
        }
        private object get_12_MediaPlayer_Source(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            return that.Source;
        }
        private void set_12_MediaPlayer_Source(object instance, object Value)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            that.Source = (global::System.Uri)Value;
        }
        private object get_13_MediaPlayer_IsFullScreenVisible(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            return that.IsFullScreenVisible;
        }
        private void set_13_MediaPlayer_IsFullScreenVisible(object instance, object Value)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            that.IsFullScreenVisible = (global::System.Boolean)Value;
        }
        private object get_14_MediaPlayer_IsFullScreen(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            return that.IsFullScreen;
        }
        private void set_14_MediaPlayer_IsFullScreen(object instance, object Value)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            that.IsFullScreen = (global::System.Boolean)Value;
        }
        private object get_15_MediaPlayer_AutoPlay(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            return that.AutoPlay;
        }
        private void set_15_MediaPlayer_AutoPlay(object instance, object Value)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            that.AutoPlay = (global::System.Boolean)Value;
        }
        private object get_16_MediaPlayer_AllowMediaStartingDeferrals(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            return that.AllowMediaStartingDeferrals;
        }
        private void set_16_MediaPlayer_AllowMediaStartingDeferrals(object instance, object Value)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            that.AllowMediaStartingDeferrals = (global::System.Boolean)Value;
        }
        private object get_17_MediaPlayer_StartupPosition(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            return that.StartupPosition;
        }
        private void set_17_MediaPlayer_StartupPosition(object instance, object Value)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            that.StartupPosition = (global::System.Nullable<global::System.TimeSpan>)Value;
        }
        private object get_18_MediaPlayer_EndTime(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            return that.EndTime;
        }
        private void set_18_MediaPlayer_EndTime(object instance, object Value)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            that.EndTime = (global::System.TimeSpan)Value;
        }
        private object get_19_MediaPlayer_Position(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            return that.Position;
        }
        private void set_19_MediaPlayer_Position(object instance, object Value)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            that.Position = (global::System.TimeSpan)Value;
        }
        private object get_20_MediaPlayer_MediaQuality(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            return that.MediaQuality;
        }
        private void set_20_MediaPlayer_MediaQuality(object instance, object Value)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            that.MediaQuality = (global::Microsoft.PlayerFramework.MediaQuality)Value;
        }
        private object get_21_MediaPlayer_UpdateInterval(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            return that.UpdateInterval;
        }
        private void set_21_MediaPlayer_UpdateInterval(object instance, object Value)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            that.UpdateInterval = (global::System.TimeSpan)Value;
        }
        private object get_22_MediaPlayer_IsResolutionIndicatorVisible(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            return that.IsResolutionIndicatorVisible;
        }
        private void set_22_MediaPlayer_IsResolutionIndicatorVisible(object instance, object Value)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            that.IsResolutionIndicatorVisible = (global::System.Boolean)Value;
        }
        private object get_23_MediaPlayer_IsSkipBackVisible(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            return that.IsSkipBackVisible;
        }
        private void set_23_MediaPlayer_IsSkipBackVisible(object instance, object Value)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            that.IsSkipBackVisible = (global::System.Boolean)Value;
        }
        private object get_24_MediaPlayer_IsSkipAheadVisible(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            return that.IsSkipAheadVisible;
        }
        private void set_24_MediaPlayer_IsSkipAheadVisible(object instance, object Value)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            that.IsSkipAheadVisible = (global::System.Boolean)Value;
        }
        private object get_25_MediaPlayer_AutoLoadPluginTypes(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            return that.AutoLoadPluginTypes;
        }
        private object get_26_Type_AssemblyQualifiedName(object instance)
        {
            var that = (global::System.Type)instance;
            return that.AssemblyQualifiedName;
        }
        private object get_27_Type_FullName(object instance)
        {
            var that = (global::System.Type)instance;
            return that.FullName;
        }
        private object get_28_Type_GenericParameterPosition(object instance)
        {
            var that = (global::System.Type)instance;
            return that.GenericParameterPosition;
        }
        private object get_29_Type_GenericTypeArguments(object instance)
        {
            var that = (global::System.Type)instance;
            return that.GenericTypeArguments;
        }
        private object get_30_Type_HasElementType(object instance)
        {
            var that = (global::System.Type)instance;
            return that.HasElementType;
        }
        private object get_31_Type_IsArray(object instance)
        {
            var that = (global::System.Type)instance;
            return that.IsArray;
        }
        private object get_32_Type_IsByRef(object instance)
        {
            var that = (global::System.Type)instance;
            return that.IsByRef;
        }
        private object get_33_Type_IsConstructedGenericType(object instance)
        {
            var that = (global::System.Type)instance;
            return that.IsConstructedGenericType;
        }
        private object get_34_Type_IsGenericParameter(object instance)
        {
            var that = (global::System.Type)instance;
            return that.IsGenericParameter;
        }
        private object get_35_Type_IsNested(object instance)
        {
            var that = (global::System.Type)instance;
            return that.IsNested;
        }
        private object get_36_Type_IsPointer(object instance)
        {
            var that = (global::System.Type)instance;
            return that.IsPointer;
        }
        private object get_37_Type_Namespace(object instance)
        {
            var that = (global::System.Type)instance;
            return that.Namespace;
        }
        private object get_38_Type_TypeHandle(object instance)
        {
            var that = (global::System.Type)instance;
            return that.TypeHandle;
        }
        private object get_39_Type_DeclaringType(object instance)
        {
            var that = (global::System.Type)instance;
            return that.DeclaringType;
        }
        private object get_40_Type_Name(object instance)
        {
            var that = (global::System.Type)instance;
            return that.Name;
        }
        private object get_41_MediaPlayer_AutoLoadPlugins(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            return that.AutoLoadPlugins;
        }
        private void set_41_MediaPlayer_AutoLoadPlugins(object instance, object Value)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            that.AutoLoadPlugins = (global::System.Boolean)Value;
        }
        private object get_42_MediaPlayer_Plugins(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            return that.Plugins;
        }
        private object get_43_IPlugin_MediaPlayer(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.IPlugin)instance;
            return that.MediaPlayer;
        }
        private void set_43_IPlugin_MediaPlayer(object instance, object Value)
        {
            var that = (global::Microsoft.PlayerFramework.IPlugin)instance;
            that.MediaPlayer = (global::Microsoft.PlayerFramework.MediaPlayer)Value;
        }
        private object get_44_MediaPlayer_IsCaptionSelectionEnabled(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            return that.IsCaptionSelectionEnabled;
        }
        private void set_44_MediaPlayer_IsCaptionSelectionEnabled(object instance, object Value)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            that.IsCaptionSelectionEnabled = (global::System.Boolean)Value;
        }
        private object get_45_MediaPlayer_IsCaptionSelectionAllowed(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            return that.IsCaptionSelectionAllowed;
        }
        private object get_46_MediaPlayer_IsFullScreenEnabled(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            return that.IsFullScreenEnabled;
        }
        private void set_46_MediaPlayer_IsFullScreenEnabled(object instance, object Value)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            that.IsFullScreenEnabled = (global::System.Boolean)Value;
        }
        private object get_47_MediaPlayer_IsZoomEnabled(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            return that.IsZoomEnabled;
        }
        private void set_47_MediaPlayer_IsZoomEnabled(object instance, object Value)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            that.IsZoomEnabled = (global::System.Boolean)Value;
        }
        private object get_48_MediaPlayer_IsGoLiveEnabled(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            return that.IsGoLiveEnabled;
        }
        private void set_48_MediaPlayer_IsGoLiveEnabled(object instance, object Value)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            that.IsGoLiveEnabled = (global::System.Boolean)Value;
        }
        private object get_49_MediaPlayer_IsGoLiveAllowed(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            return that.IsGoLiveAllowed;
        }
        private object get_50_MediaPlayer_IsInfoEnabled(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            return that.IsInfoEnabled;
        }
        private void set_50_MediaPlayer_IsInfoEnabled(object instance, object Value)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            that.IsInfoEnabled = (global::System.Boolean)Value;
        }
        private object get_51_MediaPlayer_IsInfoAllowed(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            return that.IsInfoAllowed;
        }
        private object get_52_MediaPlayer_IsMoreEnabled(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            return that.IsMoreEnabled;
        }
        private void set_52_MediaPlayer_IsMoreEnabled(object instance, object Value)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            that.IsMoreEnabled = (global::System.Boolean)Value;
        }
        private object get_53_MediaPlayer_IsPlayResumeEnabled(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            return that.IsPlayResumeEnabled;
        }
        private void set_53_MediaPlayer_IsPlayResumeEnabled(object instance, object Value)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            that.IsPlayResumeEnabled = (global::System.Boolean)Value;
        }
        private object get_54_MediaPlayer_IsPlayResumeAllowed(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            return that.IsPlayResumeAllowed;
        }
        private object get_55_MediaPlayer_IsPauseEnabled(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            return that.IsPauseEnabled;
        }
        private void set_55_MediaPlayer_IsPauseEnabled(object instance, object Value)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            that.IsPauseEnabled = (global::System.Boolean)Value;
        }
        private object get_56_MediaPlayer_IsPauseAllowed(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            return that.IsPauseAllowed;
        }
        private object get_57_MediaPlayer_IsStopEnabled(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            return that.IsStopEnabled;
        }
        private void set_57_MediaPlayer_IsStopEnabled(object instance, object Value)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            that.IsStopEnabled = (global::System.Boolean)Value;
        }
        private object get_58_MediaPlayer_IsStopAllowed(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            return that.IsStopAllowed;
        }
        private object get_59_MediaPlayer_IsReplayEnabled(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            return that.IsReplayEnabled;
        }
        private void set_59_MediaPlayer_IsReplayEnabled(object instance, object Value)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            that.IsReplayEnabled = (global::System.Boolean)Value;
        }
        private object get_60_MediaPlayer_IsReplayAllowed(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            return that.IsReplayAllowed;
        }
        private object get_61_MediaPlayer_IsAudioSelectionEnabled(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            return that.IsAudioSelectionEnabled;
        }
        private void set_61_MediaPlayer_IsAudioSelectionEnabled(object instance, object Value)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            that.IsAudioSelectionEnabled = (global::System.Boolean)Value;
        }
        private object get_62_MediaPlayer_IsAudioSelectionAllowed(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            return that.IsAudioSelectionAllowed;
        }
        private object get_63_MediaPlayer_IsRewindEnabled(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            return that.IsRewindEnabled;
        }
        private void set_63_MediaPlayer_IsRewindEnabled(object instance, object Value)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            that.IsRewindEnabled = (global::System.Boolean)Value;
        }
        private object get_64_MediaPlayer_IsRewindAllowed(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            return that.IsRewindAllowed;
        }
        private object get_65_MediaPlayer_IsFastForwardEnabled(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            return that.IsFastForwardEnabled;
        }
        private void set_65_MediaPlayer_IsFastForwardEnabled(object instance, object Value)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            that.IsFastForwardEnabled = (global::System.Boolean)Value;
        }
        private object get_66_MediaPlayer_IsFastForwardAllowed(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            return that.IsFastForwardAllowed;
        }
        private object get_67_MediaPlayer_IsSlowMotionEnabled(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            return that.IsSlowMotionEnabled;
        }
        private void set_67_MediaPlayer_IsSlowMotionEnabled(object instance, object Value)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            that.IsSlowMotionEnabled = (global::System.Boolean)Value;
        }
        private object get_68_MediaPlayer_IsSlowMotionAllowed(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            return that.IsSlowMotionAllowed;
        }
        private object get_69_MediaPlayer_IsSeekEnabled(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            return that.IsSeekEnabled;
        }
        private void set_69_MediaPlayer_IsSeekEnabled(object instance, object Value)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            that.IsSeekEnabled = (global::System.Boolean)Value;
        }
        private object get_70_MediaPlayer_IsSeekAllowed(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            return that.IsSeekAllowed;
        }
        private object get_71_MediaPlayer_IsSkipPreviousEnabled(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            return that.IsSkipPreviousEnabled;
        }
        private void set_71_MediaPlayer_IsSkipPreviousEnabled(object instance, object Value)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            that.IsSkipPreviousEnabled = (global::System.Boolean)Value;
        }
        private object get_72_MediaPlayer_IsSkipPreviousAllowed(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            return that.IsSkipPreviousAllowed;
        }
        private object get_73_MediaPlayer_IsSkipNextEnabled(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            return that.IsSkipNextEnabled;
        }
        private void set_73_MediaPlayer_IsSkipNextEnabled(object instance, object Value)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            that.IsSkipNextEnabled = (global::System.Boolean)Value;
        }
        private object get_74_MediaPlayer_IsSkipNextAllowed(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            return that.IsSkipNextAllowed;
        }
        private object get_75_MediaPlayer_IsSkipBackEnabled(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            return that.IsSkipBackEnabled;
        }
        private void set_75_MediaPlayer_IsSkipBackEnabled(object instance, object Value)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            that.IsSkipBackEnabled = (global::System.Boolean)Value;
        }
        private object get_76_MediaPlayer_IsSkipBackAllowed(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            return that.IsSkipBackAllowed;
        }
        private object get_77_MediaPlayer_IsSkipAheadEnabled(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            return that.IsSkipAheadEnabled;
        }
        private void set_77_MediaPlayer_IsSkipAheadEnabled(object instance, object Value)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            that.IsSkipAheadEnabled = (global::System.Boolean)Value;
        }
        private object get_78_MediaPlayer_IsSkipAheadAllowed(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            return that.IsSkipAheadAllowed;
        }
        private object get_79_MediaPlayer_IsScrubbingEnabled(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            return that.IsScrubbingEnabled;
        }
        private void set_79_MediaPlayer_IsScrubbingEnabled(object instance, object Value)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            that.IsScrubbingEnabled = (global::System.Boolean)Value;
        }
        private object get_80_MediaPlayer_IsScrubbingAllowed(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            return that.IsScrubbingAllowed;
        }
        private object get_81_MediaPlayer_IsAudioSelectionVisible(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            return that.IsAudioSelectionVisible;
        }
        private void set_81_MediaPlayer_IsAudioSelectionVisible(object instance, object Value)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            that.IsAudioSelectionVisible = (global::System.Boolean)Value;
        }
        private object get_82_MediaPlayer_IsCaptionSelectionVisible(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            return that.IsCaptionSelectionVisible;
        }
        private void set_82_MediaPlayer_IsCaptionSelectionVisible(object instance, object Value)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            that.IsCaptionSelectionVisible = (global::System.Boolean)Value;
        }
        private object get_83_MediaPlayer_IsDurationVisible(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            return that.IsDurationVisible;
        }
        private void set_83_MediaPlayer_IsDurationVisible(object instance, object Value)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            that.IsDurationVisible = (global::System.Boolean)Value;
        }
        private object get_84_MediaPlayer_IsTimeRemainingVisible(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            return that.IsTimeRemainingVisible;
        }
        private void set_84_MediaPlayer_IsTimeRemainingVisible(object instance, object Value)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            that.IsTimeRemainingVisible = (global::System.Boolean)Value;
        }
        private object get_85_MediaPlayer_IsFastForwardVisible(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            return that.IsFastForwardVisible;
        }
        private void set_85_MediaPlayer_IsFastForwardVisible(object instance, object Value)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            that.IsFastForwardVisible = (global::System.Boolean)Value;
        }
        private object get_86_MediaPlayer_IsZoomVisible(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            return that.IsZoomVisible;
        }
        private void set_86_MediaPlayer_IsZoomVisible(object instance, object Value)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            that.IsZoomVisible = (global::System.Boolean)Value;
        }
        private object get_87_MediaPlayer_IsGoLiveVisible(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            return that.IsGoLiveVisible;
        }
        private void set_87_MediaPlayer_IsGoLiveVisible(object instance, object Value)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            that.IsGoLiveVisible = (global::System.Boolean)Value;
        }
        private object get_88_MediaPlayer_IsInfoVisible(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            return that.IsInfoVisible;
        }
        private void set_88_MediaPlayer_IsInfoVisible(object instance, object Value)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            that.IsInfoVisible = (global::System.Boolean)Value;
        }
        private object get_89_MediaPlayer_IsMoreVisible(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            return that.IsMoreVisible;
        }
        private void set_89_MediaPlayer_IsMoreVisible(object instance, object Value)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            that.IsMoreVisible = (global::System.Boolean)Value;
        }
        private object get_90_MediaPlayer_IsPlayPauseVisible(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            return that.IsPlayPauseVisible;
        }
        private void set_90_MediaPlayer_IsPlayPauseVisible(object instance, object Value)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            that.IsPlayPauseVisible = (global::System.Boolean)Value;
        }
        private object get_91_MediaPlayer_IsTimeElapsedVisible(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            return that.IsTimeElapsedVisible;
        }
        private void set_91_MediaPlayer_IsTimeElapsedVisible(object instance, object Value)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            that.IsTimeElapsedVisible = (global::System.Boolean)Value;
        }
        private object get_92_MediaPlayer_IsReplayVisible(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            return that.IsReplayVisible;
        }
        private void set_92_MediaPlayer_IsReplayVisible(object instance, object Value)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            that.IsReplayVisible = (global::System.Boolean)Value;
        }
        private object get_93_MediaPlayer_IsRewindVisible(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            return that.IsRewindVisible;
        }
        private void set_93_MediaPlayer_IsRewindVisible(object instance, object Value)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            that.IsRewindVisible = (global::System.Boolean)Value;
        }
        private object get_94_MediaPlayer_IsSkipPreviousVisible(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            return that.IsSkipPreviousVisible;
        }
        private void set_94_MediaPlayer_IsSkipPreviousVisible(object instance, object Value)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            that.IsSkipPreviousVisible = (global::System.Boolean)Value;
        }
        private object get_95_MediaPlayer_IsSkipNextVisible(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            return that.IsSkipNextVisible;
        }
        private void set_95_MediaPlayer_IsSkipNextVisible(object instance, object Value)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            that.IsSkipNextVisible = (global::System.Boolean)Value;
        }
        private object get_96_MediaPlayer_IsSlowMotionVisible(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            return that.IsSlowMotionVisible;
        }
        private void set_96_MediaPlayer_IsSlowMotionVisible(object instance, object Value)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            that.IsSlowMotionVisible = (global::System.Boolean)Value;
        }
        private object get_97_MediaPlayer_IsStopVisible(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            return that.IsStopVisible;
        }
        private void set_97_MediaPlayer_IsStopVisible(object instance, object Value)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            that.IsStopVisible = (global::System.Boolean)Value;
        }
        private object get_98_MediaPlayer_IsTimelineVisible(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            return that.IsTimelineVisible;
        }
        private void set_98_MediaPlayer_IsTimelineVisible(object instance, object Value)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            that.IsTimelineVisible = (global::System.Boolean)Value;
        }
        private object get_99_MediaPlayer_IsVolumeVisible(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            return that.IsVolumeVisible;
        }
        private void set_99_MediaPlayer_IsVolumeVisible(object instance, object Value)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            that.IsVolumeVisible = (global::System.Boolean)Value;
        }
        private object get_100_MediaPlayer_IsSignalStrengthVisible(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            return that.IsSignalStrengthVisible;
        }
        private void set_100_MediaPlayer_IsSignalStrengthVisible(object instance, object Value)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            that.IsSignalStrengthVisible = (global::System.Boolean)Value;
        }
        private object get_101_MediaPlayer_TimeFormatConverter(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            return that.TimeFormatConverter;
        }
        private void set_101_MediaPlayer_TimeFormatConverter(object instance, object Value)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            that.TimeFormatConverter = (global::Windows.UI.Xaml.Data.IValueConverter)Value;
        }
        private object get_102_MediaPlayer_SkipBackInterval(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            return that.SkipBackInterval;
        }
        private void set_102_MediaPlayer_SkipBackInterval(object instance, object Value)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            that.SkipBackInterval = (global::System.Nullable<global::System.TimeSpan>)Value;
        }
        private object get_103_MediaPlayer_SkipAheadInterval(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            return that.SkipAheadInterval;
        }
        private void set_103_MediaPlayer_SkipAheadInterval(object instance, object Value)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            that.SkipAheadInterval = (global::System.Nullable<global::System.TimeSpan>)Value;
        }
        private object get_104_MediaPlayer_VisualMarkers(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            return that.VisualMarkers;
        }
        private object get_105_VisualMarker_Text(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.VisualMarker)instance;
            return that.Text;
        }
        private void set_105_VisualMarker_Text(object instance, object Value)
        {
            var that = (global::Microsoft.PlayerFramework.VisualMarker)instance;
            that.Text = (global::System.String)Value;
        }
        private object get_106_VisualMarker_Time(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.VisualMarker)instance;
            return that.Time;
        }
        private void set_106_VisualMarker_Time(object instance, object Value)
        {
            var that = (global::Microsoft.PlayerFramework.VisualMarker)instance;
            that.Time = (global::System.TimeSpan)Value;
        }
        private object get_107_VisualMarker_IsSeekable(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.VisualMarker)instance;
            return that.IsSeekable;
        }
        private void set_107_VisualMarker_IsSeekable(object instance, object Value)
        {
            var that = (global::Microsoft.PlayerFramework.VisualMarker)instance;
            that.IsSeekable = (global::System.Boolean)Value;
        }
        private object get_108_VisualMarker_Style(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.VisualMarker)instance;
            return that.Style;
        }
        private void set_108_VisualMarker_Style(object instance, object Value)
        {
            var that = (global::Microsoft.PlayerFramework.VisualMarker)instance;
            that.Style = (global::Windows.UI.Xaml.Style)Value;
        }
        private object get_109_MediaPlayer_Markers(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            return that.Markers;
        }
        private object get_110_MediaPlayer_AutoLoad(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            return that.AutoLoad;
        }
        private void set_110_MediaPlayer_AutoLoad(object instance, object Value)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            that.AutoLoad = (global::System.Boolean)Value;
        }
        private object get_111_MediaPlayer_SignalStrength(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            return that.SignalStrength;
        }
        private void set_111_MediaPlayer_SignalStrength(object instance, object Value)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            that.SignalStrength = (global::System.Double)Value;
        }
        private object get_112_MediaPlayer_LivePositionBuffer(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            return that.LivePositionBuffer;
        }
        private void set_112_MediaPlayer_LivePositionBuffer(object instance, object Value)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            that.LivePositionBuffer = (global::System.TimeSpan)Value;
        }
        private object get_113_MediaPlayer_IsPositionLive(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            return that.IsPositionLive;
        }
        private object get_114_MediaPlayer_LivePosition(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            return that.LivePosition;
        }
        private void set_114_MediaPlayer_LivePosition(object instance, object Value)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            that.LivePosition = (global::System.Nullable<global::System.TimeSpan>)Value;
        }
        private object get_115_MediaPlayer_Duration(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            return that.Duration;
        }
        private object get_116_MediaPlayer_IsStartTimeOffset(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            return that.IsStartTimeOffset;
        }
        private void set_116_MediaPlayer_IsStartTimeOffset(object instance, object Value)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            that.IsStartTimeOffset = (global::System.Boolean)Value;
        }
        private object get_117_MediaPlayer_StartTime(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            return that.StartTime;
        }
        private void set_117_MediaPlayer_StartTime(object instance, object Value)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            that.StartTime = (global::System.TimeSpan)Value;
        }
        private object get_118_MediaPlayer_TimeRemaining(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            return that.TimeRemaining;
        }
        private object get_119_MediaPlayer_SeekWhileScrubbing(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            return that.SeekWhileScrubbing;
        }
        private void set_119_MediaPlayer_SeekWhileScrubbing(object instance, object Value)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            that.SeekWhileScrubbing = (global::System.Boolean)Value;
        }
        private object get_120_MediaPlayer_ReplayOffset(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            return that.ReplayOffset;
        }
        private void set_120_MediaPlayer_ReplayOffset(object instance, object Value)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            that.ReplayOffset = (global::System.Nullable<global::System.TimeSpan>)Value;
        }
        private object get_121_MediaPlayer_SlowMotionPlaybackRate(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            return that.SlowMotionPlaybackRate;
        }
        private void set_121_MediaPlayer_SlowMotionPlaybackRate(object instance, object Value)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            that.SlowMotionPlaybackRate = (global::System.Double)Value;
        }
        private object get_122_MediaPlayer_IsSlowMotion(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            return that.IsSlowMotion;
        }
        private void set_122_MediaPlayer_IsSlowMotion(object instance, object Value)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            that.IsSlowMotion = (global::System.Boolean)Value;
        }
        private object get_123_MediaPlayer_IsCaptionsActive(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            return that.IsCaptionsActive;
        }
        private void set_123_MediaPlayer_IsCaptionsActive(object instance, object Value)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            that.IsCaptionsActive = (global::System.Boolean)Value;
        }
        private object get_124_MediaPlayer_AdvertisingState(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            return that.AdvertisingState;
        }
        private void set_124_MediaPlayer_AdvertisingState(object instance, object Value)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            that.AdvertisingState = (global::Microsoft.PlayerFramework.AdvertisingState)Value;
        }
        private object get_125_MediaPlayer_IsScrubbing(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            return that.IsScrubbing;
        }
        private object get_126_MediaPlayer_MediaEndedBehavior(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            return that.MediaEndedBehavior;
        }
        private void set_126_MediaPlayer_MediaEndedBehavior(object instance, object Value)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            that.MediaEndedBehavior = (global::Microsoft.PlayerFramework.MediaEndedBehavior)Value;
        }
        private object get_127_MediaPlayer_AvailableCaptions(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            return that.AvailableCaptions;
        }
        private object get_128_Caption_Id(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.Caption)instance;
            return that.Id;
        }
        private void set_128_Caption_Id(object instance, object Value)
        {
            var that = (global::Microsoft.PlayerFramework.Caption)instance;
            that.Id = (global::System.String)Value;
        }
        private object get_129_Caption_Description(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.Caption)instance;
            return that.Description;
        }
        private void set_129_Caption_Description(object instance, object Value)
        {
            var that = (global::Microsoft.PlayerFramework.Caption)instance;
            that.Description = (global::System.String)Value;
        }
        private object get_130_Caption_Payload(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.Caption)instance;
            return that.Payload;
        }
        private void set_130_Caption_Payload(object instance, object Value)
        {
            var that = (global::Microsoft.PlayerFramework.Caption)instance;
            that.Payload = (global::System.Object)Value;
        }
        private object get_131_Caption_Source(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.Caption)instance;
            return that.Source;
        }
        private void set_131_Caption_Source(object instance, object Value)
        {
            var that = (global::Microsoft.PlayerFramework.Caption)instance;
            that.Source = (global::System.Uri)Value;
        }
        private object get_132_MediaPlayer_SelectedCaption(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            return that.SelectedCaption;
        }
        private void set_132_MediaPlayer_SelectedCaption(object instance, object Value)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            that.SelectedCaption = (global::Microsoft.PlayerFramework.Caption)Value;
        }
        private object get_133_MediaPlayer_AvailableAudioStreams(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            return that.AvailableAudioStreams;
        }
        private object get_134_AudioStream_Name(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.AudioStream)instance;
            return that.Name;
        }
        private void set_134_AudioStream_Name(object instance, object Value)
        {
            var that = (global::Microsoft.PlayerFramework.AudioStream)instance;
            that.Name = (global::System.String)Value;
        }
        private object get_135_AudioStream_Language(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.AudioStream)instance;
            return that.Language;
        }
        private void set_135_AudioStream_Language(object instance, object Value)
        {
            var that = (global::Microsoft.PlayerFramework.AudioStream)instance;
            that.Language = (global::System.String)Value;
        }
        private object get_136_MediaPlayer_SelectedAudioStream(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            return that.SelectedAudioStream;
        }
        private void set_136_MediaPlayer_SelectedAudioStream(object instance, object Value)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            that.SelectedAudioStream = (global::Microsoft.PlayerFramework.AudioStream)Value;
        }
        private object get_137_MediaPlayer_IsLive(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            return that.IsLive;
        }
        private void set_137_MediaPlayer_IsLive(object instance, object Value)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            that.IsLive = (global::System.Boolean)Value;
        }
        private object get_138_MediaPlayer_IsThumbnailVisible(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            return that.IsThumbnailVisible;
        }
        private void set_138_MediaPlayer_IsThumbnailVisible(object instance, object Value)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            that.IsThumbnailVisible = (global::System.Boolean)Value;
        }
        private object get_139_MediaPlayer_VirtualPosition(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            return that.VirtualPosition;
        }
        private object get_140_MediaPlayer_ThumbnailImageSource(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            return that.ThumbnailImageSource;
        }
        private void set_140_MediaPlayer_ThumbnailImageSource(object instance, object Value)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            that.ThumbnailImageSource = (global::Windows.UI.Xaml.Media.ImageSource)Value;
        }
        private object get_141_MediaPlayer_TestForMediaPack(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            return that.TestForMediaPack;
        }
        private void set_141_MediaPlayer_TestForMediaPack(object instance, object Value)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            that.TestForMediaPack = (global::System.Boolean)Value;
        }
        private object get_142_MediaPlayer_MediaExtensionManager(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            return that.MediaExtensionManager;
        }
        private void set_142_MediaPlayer_MediaExtensionManager(object instance, object Value)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            that.MediaExtensionManager = (global::Windows.Media.MediaExtensionManager)Value;
        }
        private object get_143_MediaPlayer_AspectRatioWidth(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            return that.AspectRatioWidth;
        }
        private object get_144_MediaPlayer_AspectRatioHeight(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            return that.AspectRatioHeight;
        }
        private object get_145_MediaPlayer_AudioCategory(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            return that.AudioCategory;
        }
        private void set_145_MediaPlayer_AudioCategory(object instance, object Value)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            that.AudioCategory = (global::Windows.UI.Xaml.Media.AudioCategory)Value;
        }
        private object get_146_MediaPlayer_AudioDeviceType(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            return that.AudioDeviceType;
        }
        private void set_146_MediaPlayer_AudioDeviceType(object instance, object Value)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            that.AudioDeviceType = (global::Windows.UI.Xaml.Media.AudioDeviceType)Value;
        }
        private object get_147_MediaPlayer_PlayToSource(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            return that.PlayToSource;
        }
        private object get_148_MediaPlayer_DefaultPlaybackRate(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            return that.DefaultPlaybackRate;
        }
        private void set_148_MediaPlayer_DefaultPlaybackRate(object instance, object Value)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            that.DefaultPlaybackRate = (global::System.Double)Value;
        }
        private object get_149_MediaPlayer_IsAudioOnly(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            return that.IsAudioOnly;
        }
        private object get_150_MediaPlayer_IsLooping(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            return that.IsLooping;
        }
        private void set_150_MediaPlayer_IsLooping(object instance, object Value)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            that.IsLooping = (global::System.Boolean)Value;
        }
        private object get_151_MediaPlayer_PosterSource(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            return that.PosterSource;
        }
        private void set_151_MediaPlayer_PosterSource(object instance, object Value)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            that.PosterSource = (global::Windows.UI.Xaml.Media.ImageSource)Value;
        }
        private object get_152_MediaPlayer_ActualStereo3DVideoPackingMode(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            return that.ActualStereo3DVideoPackingMode;
        }
        private object get_153_MediaPlayer_Stereo3DVideoPackingMode(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            return that.Stereo3DVideoPackingMode;
        }
        private void set_153_MediaPlayer_Stereo3DVideoPackingMode(object instance, object Value)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            that.Stereo3DVideoPackingMode = (global::Windows.UI.Xaml.Media.Stereo3DVideoPackingMode)Value;
        }
        private object get_154_MediaPlayer_Stereo3DVideoRenderMode(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            return that.Stereo3DVideoRenderMode;
        }
        private void set_154_MediaPlayer_Stereo3DVideoRenderMode(object instance, object Value)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            that.Stereo3DVideoRenderMode = (global::Windows.UI.Xaml.Media.Stereo3DVideoRenderMode)Value;
        }
        private object get_155_MediaPlayer_IsStereo3DVideo(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            return that.IsStereo3DVideo;
        }
        private object get_156_MediaPlayer_RealTimePlayback(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            return that.RealTimePlayback;
        }
        private void set_156_MediaPlayer_RealTimePlayback(object instance, object Value)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            that.RealTimePlayback = (global::System.Boolean)Value;
        }
        private object get_157_MediaPlayer_ProtectionManager(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            return that.ProtectionManager;
        }
        private void set_157_MediaPlayer_ProtectionManager(object instance, object Value)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            that.ProtectionManager = (global::Windows.Media.Protection.MediaProtectionManager)Value;
        }
        private object get_158_MediaPlayer_AreTransportControlsEnabled(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            return that.AreTransportControlsEnabled;
        }
        private void set_158_MediaPlayer_AreTransportControlsEnabled(object instance, object Value)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            that.AreTransportControlsEnabled = (global::System.Boolean)Value;
        }
        private object get_159_MediaPlayer_IsFullWindow(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            return that.IsFullWindow;
        }
        private void set_159_MediaPlayer_IsFullWindow(object instance, object Value)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            that.IsFullWindow = (global::System.Boolean)Value;
        }
        private object get_160_MediaPlayer_PlayToPreferredSourceUri(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            return that.PlayToPreferredSourceUri;
        }
        private void set_160_MediaPlayer_PlayToPreferredSourceUri(object instance, object Value)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            that.PlayToPreferredSourceUri = (global::System.Uri)Value;
        }
        private object get_161_MediaPlayer_Stretch(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            return that.Stretch;
        }
        private void set_161_MediaPlayer_Stretch(object instance, object Value)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            that.Stretch = (global::Windows.UI.Xaml.Media.Stretch)Value;
        }
        private object get_162_MediaPlayer_AudioStreamCount(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            return that.AudioStreamCount;
        }
        private object get_163_MediaPlayer_AudioStreamIndex(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            return that.AudioStreamIndex;
        }
        private void set_163_MediaPlayer_AudioStreamIndex(object instance, object Value)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            that.AudioStreamIndex = (global::System.Nullable<global::System.Int32>)Value;
        }
        private object get_164_MediaPlayer_BufferingProgress(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            return that.BufferingProgress;
        }
        private object get_165_MediaPlayer_CanPause(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            return that.CanPause;
        }
        private object get_166_MediaPlayer_CanSeek(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            return that.CanSeek;
        }
        private object get_167_MediaPlayer_Balance(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            return that.Balance;
        }
        private void set_167_MediaPlayer_Balance(object instance, object Value)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            that.Balance = (global::System.Double)Value;
        }
        private object get_168_MediaPlayer_DownloadProgress(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            return that.DownloadProgress;
        }
        private object get_169_MediaPlayer_DownloadProgressOffset(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            return that.DownloadProgressOffset;
        }
        private object get_170_MediaPlayer_IsMuted(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            return that.IsMuted;
        }
        private void set_170_MediaPlayer_IsMuted(object instance, object Value)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            that.IsMuted = (global::System.Boolean)Value;
        }
        private object get_171_MediaPlayer_NaturalDuration(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            return that.NaturalDuration;
        }
        private object get_172_MediaPlayer_NaturalVideoHeight(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            return that.NaturalVideoHeight;
        }
        private object get_173_MediaPlayer_NaturalVideoWidth(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            return that.NaturalVideoWidth;
        }
        private object get_174_MediaPlayer_PlaybackRate(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            return that.PlaybackRate;
        }
        private void set_174_MediaPlayer_PlaybackRate(object instance, object Value)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            that.PlaybackRate = (global::System.Double)Value;
        }
        private object get_175_MediaPlayer_IsTrickPlayEnabled(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            return that.IsTrickPlayEnabled;
        }
        private void set_175_MediaPlayer_IsTrickPlayEnabled(object instance, object Value)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            that.IsTrickPlayEnabled = (global::System.Boolean)Value;
        }
        private object get_176_MediaPlayer_CurrentState(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            return that.CurrentState;
        }
        private object get_177_MediaPlayer_Volume(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            return that.Volume;
        }
        private void set_177_MediaPlayer_Volume(object instance, object Value)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            that.Volume = (global::System.Double)Value;
        }
        private object get_178_MediaPlayer_SupportedPlaybackRates(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            return that.SupportedPlaybackRates;
        }
        private void set_178_MediaPlayer_SupportedPlaybackRates(object instance, object Value)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            that.SupportedPlaybackRates = (global::System.Collections.Generic.IList<global::System.Double>)Value;
        }
        private object get_179_MediaPlayer_ControlPanelTemplate(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            return that.ControlPanelTemplate;
        }
        private void set_179_MediaPlayer_ControlPanelTemplate(object instance, object Value)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            that.ControlPanelTemplate = (global::Windows.UI.Xaml.Controls.ControlTemplate)Value;
        }
        private object get_180_MediaPlayer_ControlPanel(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            return that.ControlPanel;
        }
        private object get_181_MediaPlayer_AutoHideInterval(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            return that.AutoHideInterval;
        }
        private void set_181_MediaPlayer_AutoHideInterval(object instance, object Value)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            that.AutoHideInterval = (global::System.TimeSpan)Value;
        }
        private object get_182_MediaPlayer_Containers(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            return that.Containers;
        }
        private void set_182_MediaPlayer_Containers(object instance, object Value)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            that.Containers = (global::System.Collections.Generic.IList<global::Windows.UI.Xaml.UIElement>)Value;
        }
        private object get_183_MediaPlayer_InteractiveViewModel(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            return that.InteractiveViewModel;
        }
        private void set_183_MediaPlayer_InteractiveViewModel(object instance, object Value)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            that.InteractiveViewModel = (global::Microsoft.PlayerFramework.IInteractiveViewModel)Value;
        }
        private object get_184_MediaPlayer_DefaultInteractiveViewModel(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            return that.DefaultInteractiveViewModel;
        }
        private void set_184_MediaPlayer_DefaultInteractiveViewModel(object instance, object Value)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            that.DefaultInteractiveViewModel = (global::Microsoft.PlayerFramework.IInteractiveViewModel)Value;
        }
        private object get_185_MediaPlayer_InteractiveActivationMode(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            return that.InteractiveActivationMode;
        }
        private void set_185_MediaPlayer_InteractiveActivationMode(object instance, object Value)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            that.InteractiveActivationMode = (global::Microsoft.PlayerFramework.InteractionType)Value;
        }
        private object get_186_MediaPlayer_InteractiveDeactivationMode(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            return that.InteractiveDeactivationMode;
        }
        private void set_186_MediaPlayer_InteractiveDeactivationMode(object instance, object Value)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            that.InteractiveDeactivationMode = (global::Microsoft.PlayerFramework.InteractionType)Value;
        }
        private object get_187_MediaPlayer_AutoHide(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            return that.AutoHide;
        }
        private void set_187_MediaPlayer_AutoHide(object instance, object Value)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            that.AutoHide = (global::System.Boolean)Value;
        }
        private object get_188_MediaPlayer_AutoHideBehavior(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            return that.AutoHideBehavior;
        }
        private void set_188_MediaPlayer_AutoHideBehavior(object instance, object Value)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            that.AutoHideBehavior = (global::Microsoft.PlayerFramework.AutoHideBehavior)Value;
        }
        private object get_189_MediaPlayer_IsInteractive(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            return that.IsInteractive;
        }
        private void set_189_MediaPlayer_IsInteractive(object instance, object Value)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            that.IsInteractive = (global::System.Boolean)Value;
        }
        private object get_190_MediaPlayer_PlayerState(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            return that.PlayerState;
        }
        private object get_191_ChartAnnotationLabelDefinition_Format(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.ChartAnnotationLabelDefinition)instance;
            return that.Format;
        }
        private void set_191_ChartAnnotationLabelDefinition_Format(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.ChartAnnotationLabelDefinition)instance;
            that.Format = (global::System.String)Value;
        }
        private object get_192_ChartAnnotationLabelDefinition_Template(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.ChartAnnotationLabelDefinition)instance;
            return that.Template;
        }
        private void set_192_ChartAnnotationLabelDefinition_Template(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.ChartAnnotationLabelDefinition)instance;
            that.Template = (global::Windows.UI.Xaml.DataTemplate)Value;
        }
        private object get_193_ChartAnnotationLabelDefinition_DefaultVisualStyle(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.ChartAnnotationLabelDefinition)instance;
            return that.DefaultVisualStyle;
        }
        private void set_193_ChartAnnotationLabelDefinition_DefaultVisualStyle(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.ChartAnnotationLabelDefinition)instance;
            that.DefaultVisualStyle = (global::Windows.UI.Xaml.Style)Value;
        }
        private object get_194_ChartAnnotationLabelDefinition_Location(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.ChartAnnotationLabelDefinition)instance;
            return that.Location;
        }
        private void set_194_ChartAnnotationLabelDefinition_Location(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.ChartAnnotationLabelDefinition)instance;
            that.Location = (global::Telerik.UI.Xaml.Controls.Chart.ChartAnnotationLabelLocation)Value;
        }
        private object get_195_ChartAnnotationLabelDefinition_HorizontalAlignment(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.ChartAnnotationLabelDefinition)instance;
            return that.HorizontalAlignment;
        }
        private void set_195_ChartAnnotationLabelDefinition_HorizontalAlignment(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.ChartAnnotationLabelDefinition)instance;
            that.HorizontalAlignment = (global::Windows.UI.Xaml.HorizontalAlignment)Value;
        }
        private object get_196_ChartAnnotationLabelDefinition_VerticalAlignment(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.ChartAnnotationLabelDefinition)instance;
            return that.VerticalAlignment;
        }
        private void set_196_ChartAnnotationLabelDefinition_VerticalAlignment(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.ChartAnnotationLabelDefinition)instance;
            that.VerticalAlignment = (global::Windows.UI.Xaml.VerticalAlignment)Value;
        }
        private object get_197_ChartAnnotationLabelDefinition_HorizontalOffset(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.ChartAnnotationLabelDefinition)instance;
            return that.HorizontalOffset;
        }
        private void set_197_ChartAnnotationLabelDefinition_HorizontalOffset(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.ChartAnnotationLabelDefinition)instance;
            that.HorizontalOffset = (global::System.Double)Value;
        }
        private object get_198_ChartAnnotationLabelDefinition_VerticalOffset(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.ChartAnnotationLabelDefinition)instance;
            return that.VerticalOffset;
        }
        private void set_198_ChartAnnotationLabelDefinition_VerticalOffset(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.ChartAnnotationLabelDefinition)instance;
            that.VerticalOffset = (global::System.Double)Value;
        }
        private object get_199_ChartPalette_Name(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.ChartPalette)instance;
            return that.Name;
        }
        private void set_199_ChartPalette_Name(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.ChartPalette)instance;
            that.Name = (global::System.String)Value;
        }
        private object get_200_ChartPalette_FillEntries(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.ChartPalette)instance;
            return that.FillEntries;
        }
        private void set_200_ChartPalette_FillEntries(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.ChartPalette)instance;
            that.FillEntries = (global::Telerik.UI.Xaml.Controls.Chart.PaletteEntryCollection)Value;
        }
        private object get_201_PaletteEntryCollection_Brushes(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.PaletteEntryCollection)instance;
            return that.Brushes;
        }
        private object get_202_ChartPalette_SpecialFillEntries(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.ChartPalette)instance;
            return that.SpecialFillEntries;
        }
        private void set_202_ChartPalette_SpecialFillEntries(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.ChartPalette)instance;
            that.SpecialFillEntries = (global::Telerik.UI.Xaml.Controls.Chart.PaletteEntryCollection)Value;
        }
        private object get_203_ChartPalette_StrokeEntries(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.ChartPalette)instance;
            return that.StrokeEntries;
        }
        private void set_203_ChartPalette_StrokeEntries(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.ChartPalette)instance;
            that.StrokeEntries = (global::Telerik.UI.Xaml.Controls.Chart.PaletteEntryCollection)Value;
        }
        private object get_204_ChartPalette_SpecialStrokeEntries(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.ChartPalette)instance;
            return that.SpecialStrokeEntries;
        }
        private void set_204_ChartPalette_SpecialStrokeEntries(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.ChartPalette)instance;
            that.SpecialStrokeEntries = (global::Telerik.UI.Xaml.Controls.Chart.PaletteEntryCollection)Value;
        }
        private object get_205_HexLayoutDefinitionBase_Orientation(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Data.HexView.HexLayoutDefinitionBase)instance;
            return that.Orientation;
        }
        private void set_205_HexLayoutDefinitionBase_Orientation(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Data.HexView.HexLayoutDefinitionBase)instance;
            that.Orientation = (global::Windows.UI.Xaml.Controls.Orientation)Value;
        }
        private object get_206_HexLayoutDefinitionBase_ItemLength(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Data.HexView.HexLayoutDefinitionBase)instance;
            return that.ItemLength;
        }
        private void set_206_HexLayoutDefinitionBase_ItemLength(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Data.HexView.HexLayoutDefinitionBase)instance;
            that.ItemLength = (global::System.Double)Value;
        }
        private object get_207_HexLayoutDefinitionBase_ItemsSpacing(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Data.HexView.HexLayoutDefinitionBase)instance;
            return that.ItemsSpacing;
        }
        private void set_207_HexLayoutDefinitionBase_ItemsSpacing(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Data.HexView.HexLayoutDefinitionBase)instance;
            that.ItemsSpacing = (global::System.Double)Value;
        }
        private object get_208_HexLayoutDefinitionBase_ViewPortExtension(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Data.HexView.HexLayoutDefinitionBase)instance;
            return that.ViewPortExtension;
        }
        private void set_208_HexLayoutDefinitionBase_ViewPortExtension(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Data.HexView.HexLayoutDefinitionBase)instance;
            that.ViewPortExtension = (global::System.Double)Value;
        }
        private object get_209_HighlightStyle_FontFamily(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Input.HighlightStyle)instance;
            return that.FontFamily;
        }
        private void set_209_HighlightStyle_FontFamily(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Input.HighlightStyle)instance;
            that.FontFamily = (global::Windows.UI.Xaml.Media.FontFamily)Value;
        }
        private object get_210_HighlightStyle_FontWeight(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Input.HighlightStyle)instance;
            return that.FontWeight;
        }
        private void set_210_HighlightStyle_FontWeight(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Input.HighlightStyle)instance;
            that.FontWeight = (global::Telerik.UI.Xaml.Controls.Input.FontWeightName)Value;
        }
        private object get_211_HighlightStyle_FontStyle(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Input.HighlightStyle)instance;
            return that.FontStyle;
        }
        private void set_211_HighlightStyle_FontStyle(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Input.HighlightStyle)instance;
            that.FontStyle = (global::Windows.UI.Text.FontStyle)Value;
        }
        private object get_212_HighlightStyle_Foreground(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Input.HighlightStyle)instance;
            return that.Foreground;
        }
        private void set_212_HighlightStyle_Foreground(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Input.HighlightStyle)instance;
            that.Foreground = (global::Windows.UI.Xaml.Media.Brush)Value;
        }
        private object get_213_HighlightStyle_FontSize(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Input.HighlightStyle)instance;
            return that.FontSize;
        }
        private void set_213_HighlightStyle_FontSize(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Input.HighlightStyle)instance;
            that.FontSize = (global::System.Double)Value;
        }
        private object get_214_CalendarCellStyle_ContentStyle(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Input.CalendarCellStyle)instance;
            return that.ContentStyle;
        }
        private void set_214_CalendarCellStyle_ContentStyle(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Input.CalendarCellStyle)instance;
            that.ContentStyle = (global::Windows.UI.Xaml.Style)Value;
        }
        private object get_215_CalendarCellStyle_DecorationStyle(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Input.CalendarCellStyle)instance;
            return that.DecorationStyle;
        }
        private void set_215_CalendarCellStyle_DecorationStyle(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Input.CalendarCellStyle)instance;
            that.DecorationStyle = (global::Windows.UI.Xaml.Style)Value;
        }
        private object get_216_RadRadialMenu_Items(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Primitives.RadRadialMenu)instance;
            return that.Items;
        }
        private object get_217_RadialMenuItem_ChildItems(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Primitives.RadialMenuItem)instance;
            return that.ChildItems;
        }
        private object get_218_RadialMenuItem_ToolTipContent(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Primitives.RadialMenuItem)instance;
            return that.ToolTipContent;
        }
        private void set_218_RadialMenuItem_ToolTipContent(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Primitives.RadialMenuItem)instance;
            that.ToolTipContent = (global::System.Object)Value;
        }
        private object get_219_RadialMenuItem_CommandParameter(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Primitives.RadialMenuItem)instance;
            return that.CommandParameter;
        }
        private void set_219_RadialMenuItem_CommandParameter(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Primitives.RadialMenuItem)instance;
            that.CommandParameter = (global::System.Object)Value;
        }
        private object get_220_RadialMenuItem_IsEnabled(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Primitives.RadialMenuItem)instance;
            return that.IsEnabled;
        }
        private void set_220_RadialMenuItem_IsEnabled(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Primitives.RadialMenuItem)instance;
            that.IsEnabled = (global::System.Boolean)Value;
        }
        private object get_221_RadialMenuItem_Command(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Primitives.RadialMenuItem)instance;
            return that.Command;
        }
        private void set_221_RadialMenuItem_Command(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Primitives.RadialMenuItem)instance;
            that.Command = (global::System.Windows.Input.ICommand)Value;
        }
        private object get_222_RadialMenuItem_ParentItem(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Primitives.RadialMenuItem)instance;
            return that.ParentItem;
        }
        private object get_223_RadialMenuItem_IsSelected(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Primitives.RadialMenuItem)instance;
            return that.IsSelected;
        }
        private void set_223_RadialMenuItem_IsSelected(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Primitives.RadialMenuItem)instance;
            that.IsSelected = (global::System.Boolean)Value;
        }
        private object get_224_RadialMenuItem_GroupName(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Primitives.RadialMenuItem)instance;
            return that.GroupName;
        }
        private void set_224_RadialMenuItem_GroupName(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Primitives.RadialMenuItem)instance;
            that.GroupName = (global::System.String)Value;
        }
        private object get_225_RadialMenuItem_Selectable(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Primitives.RadialMenuItem)instance;
            return that.Selectable;
        }
        private void set_225_RadialMenuItem_Selectable(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Primitives.RadialMenuItem)instance;
            that.Selectable = (global::System.Boolean)Value;
        }
        private object get_226_RadialMenuItem_Deselectable(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Primitives.RadialMenuItem)instance;
            return that.Deselectable;
        }
        private void set_226_RadialMenuItem_Deselectable(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Primitives.RadialMenuItem)instance;
            that.Deselectable = (global::System.Boolean)Value;
        }
        private object get_227_RadialMenuItem_Header(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Primitives.RadialMenuItem)instance;
            return that.Header;
        }
        private void set_227_RadialMenuItem_Header(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Primitives.RadialMenuItem)instance;
            that.Header = (global::System.Object)Value;
        }
        private object get_228_RadialMenuItem_IconContent(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Primitives.RadialMenuItem)instance;
            return that.IconContent;
        }
        private void set_228_RadialMenuItem_IconContent(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Primitives.RadialMenuItem)instance;
            that.IconContent = (global::System.Object)Value;
        }
        private object get_229_RadialMenuItem_ContentSectorBackground(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Primitives.RadialMenuItem)instance;
            return that.ContentSectorBackground;
        }
        private void set_229_RadialMenuItem_ContentSectorBackground(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Primitives.RadialMenuItem)instance;
            that.ContentSectorBackground = (global::Windows.UI.Xaml.Media.Brush)Value;
        }
        private object get_230_RadRadialMenu_ShowToolTip(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Primitives.RadRadialMenu)instance;
            return that.ShowToolTip;
        }
        private void set_230_RadRadialMenu_ShowToolTip(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Primitives.RadRadialMenu)instance;
            that.ShowToolTip = (global::System.Boolean)Value;
        }
        private object get_231_RadRadialMenu_IsOpen(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Primitives.RadRadialMenu)instance;
            return that.IsOpen;
        }
        private void set_231_RadRadialMenu_IsOpen(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Primitives.RadRadialMenu)instance;
            that.IsOpen = (global::System.Boolean)Value;
        }
        private object get_232_RadRadialMenu_StartAngle(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Primitives.RadRadialMenu)instance;
            return that.StartAngle;
        }
        private void set_232_RadRadialMenu_StartAngle(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Primitives.RadRadialMenu)instance;
            that.StartAngle = (global::System.Double)Value;
        }
        private object get_233_RadRadialMenu_InnerNavigationRadiusFactor(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Primitives.RadRadialMenu)instance;
            return that.InnerNavigationRadiusFactor;
        }
        private void set_233_RadRadialMenu_InnerNavigationRadiusFactor(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Primitives.RadRadialMenu)instance;
            that.InnerNavigationRadiusFactor = (global::System.Double)Value;
        }
        private object get_234_RadRadialMenu_InnerRadiusFactor(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Primitives.RadRadialMenu)instance;
            return that.InnerRadiusFactor;
        }
        private void set_234_RadRadialMenu_InnerRadiusFactor(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Primitives.RadRadialMenu)instance;
            that.InnerRadiusFactor = (global::System.Double)Value;
        }
        private object get_235_RadRadialMenu_OuterRadiusFactor(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Primitives.RadRadialMenu)instance;
            return that.OuterRadiusFactor;
        }
        private void set_235_RadRadialMenu_OuterRadiusFactor(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Primitives.RadRadialMenu)instance;
            that.OuterRadiusFactor = (global::System.Double)Value;
        }
        private object get_236_RadRadialMenu_ContentMenuBackgroundStyle(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Primitives.RadRadialMenu)instance;
            return that.ContentMenuBackgroundStyle;
        }
        private void set_236_RadRadialMenu_ContentMenuBackgroundStyle(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Primitives.RadRadialMenu)instance;
            that.ContentMenuBackgroundStyle = (global::Windows.UI.Xaml.Style)Value;
        }
        private object get_237_RadRadialMenu_NavigationMenuBackgroundStyle(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Primitives.RadRadialMenu)instance;
            return that.NavigationMenuBackgroundStyle;
        }
        private void set_237_RadRadialMenu_NavigationMenuBackgroundStyle(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Primitives.RadRadialMenu)instance;
            that.NavigationMenuBackgroundStyle = (global::Windows.UI.Xaml.Style)Value;
        }
        private object get_238_RadRadialMenu_CommandService(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Primitives.RadRadialMenu)instance;
            return that.CommandService;
        }
        private object get_239_RadRadialMenu_Commands(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Primitives.RadRadialMenu)instance;
            return that.Commands;
        }
        private object get_240_AttachableObject_Owner(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Primitives.AttachableObject<global::Telerik.UI.Xaml.Controls.Primitives.RadRadialMenu>)instance;
            return that.Owner;
        }
        private object get_241_RadRadialMenu_TargetElement(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Primitives.RadRadialMenu)instance;
            return that.TargetElement;
        }
        private object get_242_RadControl_CurrentVisualState(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.RadControl)instance;
            return that.CurrentVisualState;
        }
        private object get_243_RadialMenuTriggerBehavior_AttachTriggers(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Primitives.RadialMenuTriggerBehavior)instance;
            return that.AttachTriggers;
        }
        private void set_243_RadialMenuTriggerBehavior_AttachTriggers(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Primitives.RadialMenuTriggerBehavior)instance;
            that.AttachTriggers = (global::Telerik.UI.Xaml.Controls.Primitives.RadialMenuAttachTriggers)Value;
        }
        private object get_244_AttachableObject_Owner(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Primitives.AttachableObject<global::Windows.UI.Xaml.FrameworkElement>)instance;
            return that.Owner;
        }
        private object get_245_BusyIndicatorAnimationAdapter_Animation(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Primitives.BusyIndicator.BusyIndicatorAnimationAdapter)instance;
            return that.Animation;
        }
        private void set_245_BusyIndicatorAnimationAdapter_Animation(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Primitives.BusyIndicator.BusyIndicatorAnimationAdapter)instance;
            that.Animation = (global::Windows.UI.Xaml.Media.Animation.Storyboard)Value;
        }

        private global::Windows.UI.Xaml.Markup.IXamlMember CreateXamlMember(string longMemberName)
        {
            global::AniTube.AniTube_Windows_XamlTypeInfo.XamlMember xamlMember = null;
            global::AniTube.AniTube_Windows_XamlTypeInfo.XamlUserType userType;

            switch (longMemberName)
            {
            case "AniTube.ViewModels.ViewModelLocator.MainViewModel":
                userType = (global::AniTube.AniTube_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("AniTube.ViewModels.ViewModelLocator");
                xamlMember = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlMember(this, "MainViewModel", "AniTube.ViewModels.MainViewModel");
                xamlMember.Getter = get_0_ViewModelLocator_MainViewModel;
                xamlMember.SetIsReadOnly();
                break;
            case "AniTube.ViewModels.ViewModelLocator.PlaylistViewModel":
                userType = (global::AniTube.AniTube_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("AniTube.ViewModels.ViewModelLocator");
                xamlMember = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlMember(this, "PlaylistViewModel", "AniTube.ViewModels.PlaylistViewModel");
                xamlMember.Getter = get_1_ViewModelLocator_PlaylistViewModel;
                xamlMember.SetIsReadOnly();
                break;
            case "Microsoft.Xaml.Interactivity.Interaction.Behaviors":
                userType = (global::AniTube.AniTube_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.Xaml.Interactivity.Interaction");
                xamlMember = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlMember(this, "Behaviors", "Microsoft.Xaml.Interactivity.BehaviorCollection");
                xamlMember.SetTargetTypeName("Windows.UI.Xaml.DependencyObject");
                xamlMember.SetIsAttachable();
                xamlMember.Getter = get_2_Interaction_Behaviors;
                xamlMember.Setter = set_2_Interaction_Behaviors;
                break;
            case "Microsoft.Xaml.Interactions.Core.EventTriggerBehavior.Actions":
                userType = (global::AniTube.AniTube_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.Xaml.Interactions.Core.EventTriggerBehavior");
                xamlMember = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlMember(this, "Actions", "Microsoft.Xaml.Interactivity.ActionCollection");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_3_EventTriggerBehavior_Actions;
                xamlMember.SetIsReadOnly();
                break;
            case "Microsoft.Xaml.Interactions.Core.EventTriggerBehavior.EventName":
                userType = (global::AniTube.AniTube_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.Xaml.Interactions.Core.EventTriggerBehavior");
                xamlMember = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlMember(this, "EventName", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_4_EventTriggerBehavior_EventName;
                xamlMember.Setter = set_4_EventTriggerBehavior_EventName;
                break;
            case "Microsoft.Xaml.Interactions.Core.EventTriggerBehavior.SourceObject":
                userType = (global::AniTube.AniTube_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.Xaml.Interactions.Core.EventTriggerBehavior");
                xamlMember = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlMember(this, "SourceObject", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_5_EventTriggerBehavior_SourceObject;
                xamlMember.Setter = set_5_EventTriggerBehavior_SourceObject;
                break;
            case "Microsoft.Xaml.Interactions.Core.EventTriggerBehavior.AssociatedObject":
                userType = (global::AniTube.AniTube_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.Xaml.Interactions.Core.EventTriggerBehavior");
                xamlMember = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlMember(this, "AssociatedObject", "Windows.UI.Xaml.DependencyObject");
                xamlMember.Getter = get_6_EventTriggerBehavior_AssociatedObject;
                xamlMember.SetIsReadOnly();
                break;
            case "Microsoft.Xaml.Interactions.Core.InvokeCommandAction.Command":
                userType = (global::AniTube.AniTube_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.Xaml.Interactions.Core.InvokeCommandAction");
                xamlMember = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlMember(this, "Command", "System.Windows.Input.ICommand");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_7_InvokeCommandAction_Command;
                xamlMember.Setter = set_7_InvokeCommandAction_Command;
                break;
            case "Microsoft.Xaml.Interactions.Core.InvokeCommandAction.InputConverter":
                userType = (global::AniTube.AniTube_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.Xaml.Interactions.Core.InvokeCommandAction");
                xamlMember = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlMember(this, "InputConverter", "Windows.UI.Xaml.Data.IValueConverter");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_8_InvokeCommandAction_InputConverter;
                xamlMember.Setter = set_8_InvokeCommandAction_InputConverter;
                break;
            case "Microsoft.Xaml.Interactions.Core.InvokeCommandAction.CommandParameter":
                userType = (global::AniTube.AniTube_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.Xaml.Interactions.Core.InvokeCommandAction");
                xamlMember = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlMember(this, "CommandParameter", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_9_InvokeCommandAction_CommandParameter;
                xamlMember.Setter = set_9_InvokeCommandAction_CommandParameter;
                break;
            case "Microsoft.Xaml.Interactions.Core.InvokeCommandAction.InputConverterParameter":
                userType = (global::AniTube.AniTube_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.Xaml.Interactions.Core.InvokeCommandAction");
                xamlMember = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlMember(this, "InputConverterParameter", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_10_InvokeCommandAction_InputConverterParameter;
                xamlMember.Setter = set_10_InvokeCommandAction_InputConverterParameter;
                break;
            case "Microsoft.Xaml.Interactions.Core.InvokeCommandAction.InputConverterLanguage":
                userType = (global::AniTube.AniTube_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.Xaml.Interactions.Core.InvokeCommandAction");
                xamlMember = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlMember(this, "InputConverterLanguage", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_11_InvokeCommandAction_InputConverterLanguage;
                xamlMember.Setter = set_11_InvokeCommandAction_InputConverterLanguage;
                break;
            case "Microsoft.PlayerFramework.MediaPlayer.Source":
                userType = (global::AniTube.AniTube_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.MediaPlayer");
                xamlMember = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlMember(this, "Source", "System.Uri");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_12_MediaPlayer_Source;
                xamlMember.Setter = set_12_MediaPlayer_Source;
                break;
            case "Microsoft.PlayerFramework.MediaPlayer.IsFullScreenVisible":
                userType = (global::AniTube.AniTube_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.MediaPlayer");
                xamlMember = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlMember(this, "IsFullScreenVisible", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_13_MediaPlayer_IsFullScreenVisible;
                xamlMember.Setter = set_13_MediaPlayer_IsFullScreenVisible;
                break;
            case "Microsoft.PlayerFramework.MediaPlayer.IsFullScreen":
                userType = (global::AniTube.AniTube_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.MediaPlayer");
                xamlMember = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlMember(this, "IsFullScreen", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_14_MediaPlayer_IsFullScreen;
                xamlMember.Setter = set_14_MediaPlayer_IsFullScreen;
                break;
            case "Microsoft.PlayerFramework.MediaPlayer.AutoPlay":
                userType = (global::AniTube.AniTube_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.MediaPlayer");
                xamlMember = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlMember(this, "AutoPlay", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_15_MediaPlayer_AutoPlay;
                xamlMember.Setter = set_15_MediaPlayer_AutoPlay;
                break;
            case "Microsoft.PlayerFramework.MediaPlayer.AllowMediaStartingDeferrals":
                userType = (global::AniTube.AniTube_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.MediaPlayer");
                xamlMember = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlMember(this, "AllowMediaStartingDeferrals", "Boolean");
                xamlMember.Getter = get_16_MediaPlayer_AllowMediaStartingDeferrals;
                xamlMember.Setter = set_16_MediaPlayer_AllowMediaStartingDeferrals;
                break;
            case "Microsoft.PlayerFramework.MediaPlayer.StartupPosition":
                userType = (global::AniTube.AniTube_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.MediaPlayer");
                xamlMember = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlMember(this, "StartupPosition", "System.Nullable`1<TimeSpan>");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_17_MediaPlayer_StartupPosition;
                xamlMember.Setter = set_17_MediaPlayer_StartupPosition;
                break;
            case "Microsoft.PlayerFramework.MediaPlayer.EndTime":
                userType = (global::AniTube.AniTube_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.MediaPlayer");
                xamlMember = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlMember(this, "EndTime", "TimeSpan");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_18_MediaPlayer_EndTime;
                xamlMember.Setter = set_18_MediaPlayer_EndTime;
                break;
            case "Microsoft.PlayerFramework.MediaPlayer.Position":
                userType = (global::AniTube.AniTube_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.MediaPlayer");
                xamlMember = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlMember(this, "Position", "TimeSpan");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_19_MediaPlayer_Position;
                xamlMember.Setter = set_19_MediaPlayer_Position;
                break;
            case "Microsoft.PlayerFramework.MediaPlayer.MediaQuality":
                userType = (global::AniTube.AniTube_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.MediaPlayer");
                xamlMember = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlMember(this, "MediaQuality", "Microsoft.PlayerFramework.MediaQuality");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_20_MediaPlayer_MediaQuality;
                xamlMember.Setter = set_20_MediaPlayer_MediaQuality;
                break;
            case "Microsoft.PlayerFramework.MediaPlayer.UpdateInterval":
                userType = (global::AniTube.AniTube_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.MediaPlayer");
                xamlMember = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlMember(this, "UpdateInterval", "TimeSpan");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_21_MediaPlayer_UpdateInterval;
                xamlMember.Setter = set_21_MediaPlayer_UpdateInterval;
                break;
            case "Microsoft.PlayerFramework.MediaPlayer.IsResolutionIndicatorVisible":
                userType = (global::AniTube.AniTube_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.MediaPlayer");
                xamlMember = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlMember(this, "IsResolutionIndicatorVisible", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_22_MediaPlayer_IsResolutionIndicatorVisible;
                xamlMember.Setter = set_22_MediaPlayer_IsResolutionIndicatorVisible;
                break;
            case "Microsoft.PlayerFramework.MediaPlayer.IsSkipBackVisible":
                userType = (global::AniTube.AniTube_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.MediaPlayer");
                xamlMember = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlMember(this, "IsSkipBackVisible", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_23_MediaPlayer_IsSkipBackVisible;
                xamlMember.Setter = set_23_MediaPlayer_IsSkipBackVisible;
                break;
            case "Microsoft.PlayerFramework.MediaPlayer.IsSkipAheadVisible":
                userType = (global::AniTube.AniTube_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.MediaPlayer");
                xamlMember = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlMember(this, "IsSkipAheadVisible", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_24_MediaPlayer_IsSkipAheadVisible;
                xamlMember.Setter = set_24_MediaPlayer_IsSkipAheadVisible;
                break;
            case "Microsoft.PlayerFramework.MediaPlayer.AutoLoadPluginTypes":
                userType = (global::AniTube.AniTube_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.MediaPlayer");
                xamlMember = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlMember(this, "AutoLoadPluginTypes", "System.Collections.Generic.IList`1<System.Type>");
                xamlMember.Getter = get_25_MediaPlayer_AutoLoadPluginTypes;
                xamlMember.SetIsReadOnly();
                break;
            case "System.Type.AssemblyQualifiedName":
                userType = (global::AniTube.AniTube_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("System.Type");
                xamlMember = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlMember(this, "AssemblyQualifiedName", "String");
                xamlMember.Getter = get_26_Type_AssemblyQualifiedName;
                xamlMember.SetIsReadOnly();
                break;
            case "System.Type.FullName":
                userType = (global::AniTube.AniTube_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("System.Type");
                xamlMember = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlMember(this, "FullName", "String");
                xamlMember.Getter = get_27_Type_FullName;
                xamlMember.SetIsReadOnly();
                break;
            case "System.Type.GenericParameterPosition":
                userType = (global::AniTube.AniTube_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("System.Type");
                xamlMember = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlMember(this, "GenericParameterPosition", "Int32");
                xamlMember.Getter = get_28_Type_GenericParameterPosition;
                xamlMember.SetIsReadOnly();
                break;
            case "System.Type.GenericTypeArguments":
                userType = (global::AniTube.AniTube_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("System.Type");
                xamlMember = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlMember(this, "GenericTypeArguments", "System.Type[]");
                xamlMember.Getter = get_29_Type_GenericTypeArguments;
                xamlMember.SetIsReadOnly();
                break;
            case "System.Type.HasElementType":
                userType = (global::AniTube.AniTube_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("System.Type");
                xamlMember = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlMember(this, "HasElementType", "Boolean");
                xamlMember.Getter = get_30_Type_HasElementType;
                xamlMember.SetIsReadOnly();
                break;
            case "System.Type.IsArray":
                userType = (global::AniTube.AniTube_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("System.Type");
                xamlMember = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlMember(this, "IsArray", "Boolean");
                xamlMember.Getter = get_31_Type_IsArray;
                xamlMember.SetIsReadOnly();
                break;
            case "System.Type.IsByRef":
                userType = (global::AniTube.AniTube_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("System.Type");
                xamlMember = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlMember(this, "IsByRef", "Boolean");
                xamlMember.Getter = get_32_Type_IsByRef;
                xamlMember.SetIsReadOnly();
                break;
            case "System.Type.IsConstructedGenericType":
                userType = (global::AniTube.AniTube_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("System.Type");
                xamlMember = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlMember(this, "IsConstructedGenericType", "Boolean");
                xamlMember.Getter = get_33_Type_IsConstructedGenericType;
                xamlMember.SetIsReadOnly();
                break;
            case "System.Type.IsGenericParameter":
                userType = (global::AniTube.AniTube_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("System.Type");
                xamlMember = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlMember(this, "IsGenericParameter", "Boolean");
                xamlMember.Getter = get_34_Type_IsGenericParameter;
                xamlMember.SetIsReadOnly();
                break;
            case "System.Type.IsNested":
                userType = (global::AniTube.AniTube_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("System.Type");
                xamlMember = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlMember(this, "IsNested", "Boolean");
                xamlMember.Getter = get_35_Type_IsNested;
                xamlMember.SetIsReadOnly();
                break;
            case "System.Type.IsPointer":
                userType = (global::AniTube.AniTube_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("System.Type");
                xamlMember = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlMember(this, "IsPointer", "Boolean");
                xamlMember.Getter = get_36_Type_IsPointer;
                xamlMember.SetIsReadOnly();
                break;
            case "System.Type.Namespace":
                userType = (global::AniTube.AniTube_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("System.Type");
                xamlMember = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlMember(this, "Namespace", "String");
                xamlMember.Getter = get_37_Type_Namespace;
                xamlMember.SetIsReadOnly();
                break;
            case "System.Type.TypeHandle":
                userType = (global::AniTube.AniTube_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("System.Type");
                xamlMember = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlMember(this, "TypeHandle", "System.RuntimeTypeHandle");
                xamlMember.Getter = get_38_Type_TypeHandle;
                xamlMember.SetIsReadOnly();
                break;
            case "System.Type.DeclaringType":
                userType = (global::AniTube.AniTube_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("System.Type");
                xamlMember = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlMember(this, "DeclaringType", "System.Type");
                xamlMember.Getter = get_39_Type_DeclaringType;
                xamlMember.SetIsReadOnly();
                break;
            case "System.Type.Name":
                userType = (global::AniTube.AniTube_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("System.Type");
                xamlMember = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlMember(this, "Name", "String");
                xamlMember.Getter = get_40_Type_Name;
                xamlMember.SetIsReadOnly();
                break;
            case "Microsoft.PlayerFramework.MediaPlayer.AutoLoadPlugins":
                userType = (global::AniTube.AniTube_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.MediaPlayer");
                xamlMember = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlMember(this, "AutoLoadPlugins", "Boolean");
                xamlMember.Getter = get_41_MediaPlayer_AutoLoadPlugins;
                xamlMember.Setter = set_41_MediaPlayer_AutoLoadPlugins;
                break;
            case "Microsoft.PlayerFramework.MediaPlayer.Plugins":
                userType = (global::AniTube.AniTube_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.MediaPlayer");
                xamlMember = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlMember(this, "Plugins", "System.Collections.ObjectModel.ObservableCollection`1<Microsoft.PlayerFramework.IPlugin>");
                xamlMember.Getter = get_42_MediaPlayer_Plugins;
                xamlMember.SetIsReadOnly();
                break;
            case "Microsoft.PlayerFramework.IPlugin.MediaPlayer":
                userType = (global::AniTube.AniTube_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.IPlugin");
                xamlMember = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlMember(this, "MediaPlayer", "Microsoft.PlayerFramework.MediaPlayer");
                xamlMember.Getter = get_43_IPlugin_MediaPlayer;
                xamlMember.Setter = set_43_IPlugin_MediaPlayer;
                break;
            case "Microsoft.PlayerFramework.MediaPlayer.IsCaptionSelectionEnabled":
                userType = (global::AniTube.AniTube_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.MediaPlayer");
                xamlMember = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlMember(this, "IsCaptionSelectionEnabled", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_44_MediaPlayer_IsCaptionSelectionEnabled;
                xamlMember.Setter = set_44_MediaPlayer_IsCaptionSelectionEnabled;
                break;
            case "Microsoft.PlayerFramework.MediaPlayer.IsCaptionSelectionAllowed":
                userType = (global::AniTube.AniTube_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.MediaPlayer");
                xamlMember = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlMember(this, "IsCaptionSelectionAllowed", "Boolean");
                xamlMember.Getter = get_45_MediaPlayer_IsCaptionSelectionAllowed;
                xamlMember.SetIsReadOnly();
                break;
            case "Microsoft.PlayerFramework.MediaPlayer.IsFullScreenEnabled":
                userType = (global::AniTube.AniTube_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.MediaPlayer");
                xamlMember = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlMember(this, "IsFullScreenEnabled", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_46_MediaPlayer_IsFullScreenEnabled;
                xamlMember.Setter = set_46_MediaPlayer_IsFullScreenEnabled;
                break;
            case "Microsoft.PlayerFramework.MediaPlayer.IsZoomEnabled":
                userType = (global::AniTube.AniTube_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.MediaPlayer");
                xamlMember = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlMember(this, "IsZoomEnabled", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_47_MediaPlayer_IsZoomEnabled;
                xamlMember.Setter = set_47_MediaPlayer_IsZoomEnabled;
                break;
            case "Microsoft.PlayerFramework.MediaPlayer.IsGoLiveEnabled":
                userType = (global::AniTube.AniTube_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.MediaPlayer");
                xamlMember = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlMember(this, "IsGoLiveEnabled", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_48_MediaPlayer_IsGoLiveEnabled;
                xamlMember.Setter = set_48_MediaPlayer_IsGoLiveEnabled;
                break;
            case "Microsoft.PlayerFramework.MediaPlayer.IsGoLiveAllowed":
                userType = (global::AniTube.AniTube_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.MediaPlayer");
                xamlMember = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlMember(this, "IsGoLiveAllowed", "Boolean");
                xamlMember.Getter = get_49_MediaPlayer_IsGoLiveAllowed;
                xamlMember.SetIsReadOnly();
                break;
            case "Microsoft.PlayerFramework.MediaPlayer.IsInfoEnabled":
                userType = (global::AniTube.AniTube_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.MediaPlayer");
                xamlMember = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlMember(this, "IsInfoEnabled", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_50_MediaPlayer_IsInfoEnabled;
                xamlMember.Setter = set_50_MediaPlayer_IsInfoEnabled;
                break;
            case "Microsoft.PlayerFramework.MediaPlayer.IsInfoAllowed":
                userType = (global::AniTube.AniTube_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.MediaPlayer");
                xamlMember = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlMember(this, "IsInfoAllowed", "Boolean");
                xamlMember.Getter = get_51_MediaPlayer_IsInfoAllowed;
                xamlMember.SetIsReadOnly();
                break;
            case "Microsoft.PlayerFramework.MediaPlayer.IsMoreEnabled":
                userType = (global::AniTube.AniTube_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.MediaPlayer");
                xamlMember = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlMember(this, "IsMoreEnabled", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_52_MediaPlayer_IsMoreEnabled;
                xamlMember.Setter = set_52_MediaPlayer_IsMoreEnabled;
                break;
            case "Microsoft.PlayerFramework.MediaPlayer.IsPlayResumeEnabled":
                userType = (global::AniTube.AniTube_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.MediaPlayer");
                xamlMember = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlMember(this, "IsPlayResumeEnabled", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_53_MediaPlayer_IsPlayResumeEnabled;
                xamlMember.Setter = set_53_MediaPlayer_IsPlayResumeEnabled;
                break;
            case "Microsoft.PlayerFramework.MediaPlayer.IsPlayResumeAllowed":
                userType = (global::AniTube.AniTube_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.MediaPlayer");
                xamlMember = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlMember(this, "IsPlayResumeAllowed", "Boolean");
                xamlMember.Getter = get_54_MediaPlayer_IsPlayResumeAllowed;
                xamlMember.SetIsReadOnly();
                break;
            case "Microsoft.PlayerFramework.MediaPlayer.IsPauseEnabled":
                userType = (global::AniTube.AniTube_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.MediaPlayer");
                xamlMember = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlMember(this, "IsPauseEnabled", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_55_MediaPlayer_IsPauseEnabled;
                xamlMember.Setter = set_55_MediaPlayer_IsPauseEnabled;
                break;
            case "Microsoft.PlayerFramework.MediaPlayer.IsPauseAllowed":
                userType = (global::AniTube.AniTube_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.MediaPlayer");
                xamlMember = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlMember(this, "IsPauseAllowed", "Boolean");
                xamlMember.Getter = get_56_MediaPlayer_IsPauseAllowed;
                xamlMember.SetIsReadOnly();
                break;
            case "Microsoft.PlayerFramework.MediaPlayer.IsStopEnabled":
                userType = (global::AniTube.AniTube_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.MediaPlayer");
                xamlMember = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlMember(this, "IsStopEnabled", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_57_MediaPlayer_IsStopEnabled;
                xamlMember.Setter = set_57_MediaPlayer_IsStopEnabled;
                break;
            case "Microsoft.PlayerFramework.MediaPlayer.IsStopAllowed":
                userType = (global::AniTube.AniTube_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.MediaPlayer");
                xamlMember = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlMember(this, "IsStopAllowed", "Boolean");
                xamlMember.Getter = get_58_MediaPlayer_IsStopAllowed;
                xamlMember.SetIsReadOnly();
                break;
            case "Microsoft.PlayerFramework.MediaPlayer.IsReplayEnabled":
                userType = (global::AniTube.AniTube_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.MediaPlayer");
                xamlMember = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlMember(this, "IsReplayEnabled", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_59_MediaPlayer_IsReplayEnabled;
                xamlMember.Setter = set_59_MediaPlayer_IsReplayEnabled;
                break;
            case "Microsoft.PlayerFramework.MediaPlayer.IsReplayAllowed":
                userType = (global::AniTube.AniTube_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.MediaPlayer");
                xamlMember = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlMember(this, "IsReplayAllowed", "Boolean");
                xamlMember.Getter = get_60_MediaPlayer_IsReplayAllowed;
                xamlMember.SetIsReadOnly();
                break;
            case "Microsoft.PlayerFramework.MediaPlayer.IsAudioSelectionEnabled":
                userType = (global::AniTube.AniTube_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.MediaPlayer");
                xamlMember = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlMember(this, "IsAudioSelectionEnabled", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_61_MediaPlayer_IsAudioSelectionEnabled;
                xamlMember.Setter = set_61_MediaPlayer_IsAudioSelectionEnabled;
                break;
            case "Microsoft.PlayerFramework.MediaPlayer.IsAudioSelectionAllowed":
                userType = (global::AniTube.AniTube_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.MediaPlayer");
                xamlMember = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlMember(this, "IsAudioSelectionAllowed", "Boolean");
                xamlMember.Getter = get_62_MediaPlayer_IsAudioSelectionAllowed;
                xamlMember.SetIsReadOnly();
                break;
            case "Microsoft.PlayerFramework.MediaPlayer.IsRewindEnabled":
                userType = (global::AniTube.AniTube_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.MediaPlayer");
                xamlMember = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlMember(this, "IsRewindEnabled", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_63_MediaPlayer_IsRewindEnabled;
                xamlMember.Setter = set_63_MediaPlayer_IsRewindEnabled;
                break;
            case "Microsoft.PlayerFramework.MediaPlayer.IsRewindAllowed":
                userType = (global::AniTube.AniTube_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.MediaPlayer");
                xamlMember = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlMember(this, "IsRewindAllowed", "Boolean");
                xamlMember.Getter = get_64_MediaPlayer_IsRewindAllowed;
                xamlMember.SetIsReadOnly();
                break;
            case "Microsoft.PlayerFramework.MediaPlayer.IsFastForwardEnabled":
                userType = (global::AniTube.AniTube_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.MediaPlayer");
                xamlMember = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlMember(this, "IsFastForwardEnabled", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_65_MediaPlayer_IsFastForwardEnabled;
                xamlMember.Setter = set_65_MediaPlayer_IsFastForwardEnabled;
                break;
            case "Microsoft.PlayerFramework.MediaPlayer.IsFastForwardAllowed":
                userType = (global::AniTube.AniTube_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.MediaPlayer");
                xamlMember = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlMember(this, "IsFastForwardAllowed", "Boolean");
                xamlMember.Getter = get_66_MediaPlayer_IsFastForwardAllowed;
                xamlMember.SetIsReadOnly();
                break;
            case "Microsoft.PlayerFramework.MediaPlayer.IsSlowMotionEnabled":
                userType = (global::AniTube.AniTube_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.MediaPlayer");
                xamlMember = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlMember(this, "IsSlowMotionEnabled", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_67_MediaPlayer_IsSlowMotionEnabled;
                xamlMember.Setter = set_67_MediaPlayer_IsSlowMotionEnabled;
                break;
            case "Microsoft.PlayerFramework.MediaPlayer.IsSlowMotionAllowed":
                userType = (global::AniTube.AniTube_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.MediaPlayer");
                xamlMember = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlMember(this, "IsSlowMotionAllowed", "Boolean");
                xamlMember.Getter = get_68_MediaPlayer_IsSlowMotionAllowed;
                xamlMember.SetIsReadOnly();
                break;
            case "Microsoft.PlayerFramework.MediaPlayer.IsSeekEnabled":
                userType = (global::AniTube.AniTube_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.MediaPlayer");
                xamlMember = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlMember(this, "IsSeekEnabled", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_69_MediaPlayer_IsSeekEnabled;
                xamlMember.Setter = set_69_MediaPlayer_IsSeekEnabled;
                break;
            case "Microsoft.PlayerFramework.MediaPlayer.IsSeekAllowed":
                userType = (global::AniTube.AniTube_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.MediaPlayer");
                xamlMember = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlMember(this, "IsSeekAllowed", "Boolean");
                xamlMember.Getter = get_70_MediaPlayer_IsSeekAllowed;
                xamlMember.SetIsReadOnly();
                break;
            case "Microsoft.PlayerFramework.MediaPlayer.IsSkipPreviousEnabled":
                userType = (global::AniTube.AniTube_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.MediaPlayer");
                xamlMember = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlMember(this, "IsSkipPreviousEnabled", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_71_MediaPlayer_IsSkipPreviousEnabled;
                xamlMember.Setter = set_71_MediaPlayer_IsSkipPreviousEnabled;
                break;
            case "Microsoft.PlayerFramework.MediaPlayer.IsSkipPreviousAllowed":
                userType = (global::AniTube.AniTube_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.MediaPlayer");
                xamlMember = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlMember(this, "IsSkipPreviousAllowed", "Boolean");
                xamlMember.Getter = get_72_MediaPlayer_IsSkipPreviousAllowed;
                xamlMember.SetIsReadOnly();
                break;
            case "Microsoft.PlayerFramework.MediaPlayer.IsSkipNextEnabled":
                userType = (global::AniTube.AniTube_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.MediaPlayer");
                xamlMember = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlMember(this, "IsSkipNextEnabled", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_73_MediaPlayer_IsSkipNextEnabled;
                xamlMember.Setter = set_73_MediaPlayer_IsSkipNextEnabled;
                break;
            case "Microsoft.PlayerFramework.MediaPlayer.IsSkipNextAllowed":
                userType = (global::AniTube.AniTube_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.MediaPlayer");
                xamlMember = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlMember(this, "IsSkipNextAllowed", "Boolean");
                xamlMember.Getter = get_74_MediaPlayer_IsSkipNextAllowed;
                xamlMember.SetIsReadOnly();
                break;
            case "Microsoft.PlayerFramework.MediaPlayer.IsSkipBackEnabled":
                userType = (global::AniTube.AniTube_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.MediaPlayer");
                xamlMember = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlMember(this, "IsSkipBackEnabled", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_75_MediaPlayer_IsSkipBackEnabled;
                xamlMember.Setter = set_75_MediaPlayer_IsSkipBackEnabled;
                break;
            case "Microsoft.PlayerFramework.MediaPlayer.IsSkipBackAllowed":
                userType = (global::AniTube.AniTube_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.MediaPlayer");
                xamlMember = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlMember(this, "IsSkipBackAllowed", "Boolean");
                xamlMember.Getter = get_76_MediaPlayer_IsSkipBackAllowed;
                xamlMember.SetIsReadOnly();
                break;
            case "Microsoft.PlayerFramework.MediaPlayer.IsSkipAheadEnabled":
                userType = (global::AniTube.AniTube_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.MediaPlayer");
                xamlMember = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlMember(this, "IsSkipAheadEnabled", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_77_MediaPlayer_IsSkipAheadEnabled;
                xamlMember.Setter = set_77_MediaPlayer_IsSkipAheadEnabled;
                break;
            case "Microsoft.PlayerFramework.MediaPlayer.IsSkipAheadAllowed":
                userType = (global::AniTube.AniTube_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.MediaPlayer");
                xamlMember = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlMember(this, "IsSkipAheadAllowed", "Boolean");
                xamlMember.Getter = get_78_MediaPlayer_IsSkipAheadAllowed;
                xamlMember.SetIsReadOnly();
                break;
            case "Microsoft.PlayerFramework.MediaPlayer.IsScrubbingEnabled":
                userType = (global::AniTube.AniTube_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.MediaPlayer");
                xamlMember = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlMember(this, "IsScrubbingEnabled", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_79_MediaPlayer_IsScrubbingEnabled;
                xamlMember.Setter = set_79_MediaPlayer_IsScrubbingEnabled;
                break;
            case "Microsoft.PlayerFramework.MediaPlayer.IsScrubbingAllowed":
                userType = (global::AniTube.AniTube_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.MediaPlayer");
                xamlMember = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlMember(this, "IsScrubbingAllowed", "Boolean");
                xamlMember.Getter = get_80_MediaPlayer_IsScrubbingAllowed;
                xamlMember.SetIsReadOnly();
                break;
            case "Microsoft.PlayerFramework.MediaPlayer.IsAudioSelectionVisible":
                userType = (global::AniTube.AniTube_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.MediaPlayer");
                xamlMember = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlMember(this, "IsAudioSelectionVisible", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_81_MediaPlayer_IsAudioSelectionVisible;
                xamlMember.Setter = set_81_MediaPlayer_IsAudioSelectionVisible;
                break;
            case "Microsoft.PlayerFramework.MediaPlayer.IsCaptionSelectionVisible":
                userType = (global::AniTube.AniTube_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.MediaPlayer");
                xamlMember = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlMember(this, "IsCaptionSelectionVisible", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_82_MediaPlayer_IsCaptionSelectionVisible;
                xamlMember.Setter = set_82_MediaPlayer_IsCaptionSelectionVisible;
                break;
            case "Microsoft.PlayerFramework.MediaPlayer.IsDurationVisible":
                userType = (global::AniTube.AniTube_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.MediaPlayer");
                xamlMember = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlMember(this, "IsDurationVisible", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_83_MediaPlayer_IsDurationVisible;
                xamlMember.Setter = set_83_MediaPlayer_IsDurationVisible;
                break;
            case "Microsoft.PlayerFramework.MediaPlayer.IsTimeRemainingVisible":
                userType = (global::AniTube.AniTube_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.MediaPlayer");
                xamlMember = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlMember(this, "IsTimeRemainingVisible", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_84_MediaPlayer_IsTimeRemainingVisible;
                xamlMember.Setter = set_84_MediaPlayer_IsTimeRemainingVisible;
                break;
            case "Microsoft.PlayerFramework.MediaPlayer.IsFastForwardVisible":
                userType = (global::AniTube.AniTube_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.MediaPlayer");
                xamlMember = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlMember(this, "IsFastForwardVisible", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_85_MediaPlayer_IsFastForwardVisible;
                xamlMember.Setter = set_85_MediaPlayer_IsFastForwardVisible;
                break;
            case "Microsoft.PlayerFramework.MediaPlayer.IsZoomVisible":
                userType = (global::AniTube.AniTube_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.MediaPlayer");
                xamlMember = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlMember(this, "IsZoomVisible", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_86_MediaPlayer_IsZoomVisible;
                xamlMember.Setter = set_86_MediaPlayer_IsZoomVisible;
                break;
            case "Microsoft.PlayerFramework.MediaPlayer.IsGoLiveVisible":
                userType = (global::AniTube.AniTube_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.MediaPlayer");
                xamlMember = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlMember(this, "IsGoLiveVisible", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_87_MediaPlayer_IsGoLiveVisible;
                xamlMember.Setter = set_87_MediaPlayer_IsGoLiveVisible;
                break;
            case "Microsoft.PlayerFramework.MediaPlayer.IsInfoVisible":
                userType = (global::AniTube.AniTube_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.MediaPlayer");
                xamlMember = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlMember(this, "IsInfoVisible", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_88_MediaPlayer_IsInfoVisible;
                xamlMember.Setter = set_88_MediaPlayer_IsInfoVisible;
                break;
            case "Microsoft.PlayerFramework.MediaPlayer.IsMoreVisible":
                userType = (global::AniTube.AniTube_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.MediaPlayer");
                xamlMember = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlMember(this, "IsMoreVisible", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_89_MediaPlayer_IsMoreVisible;
                xamlMember.Setter = set_89_MediaPlayer_IsMoreVisible;
                break;
            case "Microsoft.PlayerFramework.MediaPlayer.IsPlayPauseVisible":
                userType = (global::AniTube.AniTube_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.MediaPlayer");
                xamlMember = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlMember(this, "IsPlayPauseVisible", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_90_MediaPlayer_IsPlayPauseVisible;
                xamlMember.Setter = set_90_MediaPlayer_IsPlayPauseVisible;
                break;
            case "Microsoft.PlayerFramework.MediaPlayer.IsTimeElapsedVisible":
                userType = (global::AniTube.AniTube_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.MediaPlayer");
                xamlMember = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlMember(this, "IsTimeElapsedVisible", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_91_MediaPlayer_IsTimeElapsedVisible;
                xamlMember.Setter = set_91_MediaPlayer_IsTimeElapsedVisible;
                break;
            case "Microsoft.PlayerFramework.MediaPlayer.IsReplayVisible":
                userType = (global::AniTube.AniTube_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.MediaPlayer");
                xamlMember = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlMember(this, "IsReplayVisible", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_92_MediaPlayer_IsReplayVisible;
                xamlMember.Setter = set_92_MediaPlayer_IsReplayVisible;
                break;
            case "Microsoft.PlayerFramework.MediaPlayer.IsRewindVisible":
                userType = (global::AniTube.AniTube_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.MediaPlayer");
                xamlMember = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlMember(this, "IsRewindVisible", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_93_MediaPlayer_IsRewindVisible;
                xamlMember.Setter = set_93_MediaPlayer_IsRewindVisible;
                break;
            case "Microsoft.PlayerFramework.MediaPlayer.IsSkipPreviousVisible":
                userType = (global::AniTube.AniTube_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.MediaPlayer");
                xamlMember = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlMember(this, "IsSkipPreviousVisible", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_94_MediaPlayer_IsSkipPreviousVisible;
                xamlMember.Setter = set_94_MediaPlayer_IsSkipPreviousVisible;
                break;
            case "Microsoft.PlayerFramework.MediaPlayer.IsSkipNextVisible":
                userType = (global::AniTube.AniTube_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.MediaPlayer");
                xamlMember = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlMember(this, "IsSkipNextVisible", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_95_MediaPlayer_IsSkipNextVisible;
                xamlMember.Setter = set_95_MediaPlayer_IsSkipNextVisible;
                break;
            case "Microsoft.PlayerFramework.MediaPlayer.IsSlowMotionVisible":
                userType = (global::AniTube.AniTube_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.MediaPlayer");
                xamlMember = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlMember(this, "IsSlowMotionVisible", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_96_MediaPlayer_IsSlowMotionVisible;
                xamlMember.Setter = set_96_MediaPlayer_IsSlowMotionVisible;
                break;
            case "Microsoft.PlayerFramework.MediaPlayer.IsStopVisible":
                userType = (global::AniTube.AniTube_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.MediaPlayer");
                xamlMember = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlMember(this, "IsStopVisible", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_97_MediaPlayer_IsStopVisible;
                xamlMember.Setter = set_97_MediaPlayer_IsStopVisible;
                break;
            case "Microsoft.PlayerFramework.MediaPlayer.IsTimelineVisible":
                userType = (global::AniTube.AniTube_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.MediaPlayer");
                xamlMember = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlMember(this, "IsTimelineVisible", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_98_MediaPlayer_IsTimelineVisible;
                xamlMember.Setter = set_98_MediaPlayer_IsTimelineVisible;
                break;
            case "Microsoft.PlayerFramework.MediaPlayer.IsVolumeVisible":
                userType = (global::AniTube.AniTube_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.MediaPlayer");
                xamlMember = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlMember(this, "IsVolumeVisible", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_99_MediaPlayer_IsVolumeVisible;
                xamlMember.Setter = set_99_MediaPlayer_IsVolumeVisible;
                break;
            case "Microsoft.PlayerFramework.MediaPlayer.IsSignalStrengthVisible":
                userType = (global::AniTube.AniTube_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.MediaPlayer");
                xamlMember = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlMember(this, "IsSignalStrengthVisible", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_100_MediaPlayer_IsSignalStrengthVisible;
                xamlMember.Setter = set_100_MediaPlayer_IsSignalStrengthVisible;
                break;
            case "Microsoft.PlayerFramework.MediaPlayer.TimeFormatConverter":
                userType = (global::AniTube.AniTube_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.MediaPlayer");
                xamlMember = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlMember(this, "TimeFormatConverter", "Windows.UI.Xaml.Data.IValueConverter");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_101_MediaPlayer_TimeFormatConverter;
                xamlMember.Setter = set_101_MediaPlayer_TimeFormatConverter;
                break;
            case "Microsoft.PlayerFramework.MediaPlayer.SkipBackInterval":
                userType = (global::AniTube.AniTube_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.MediaPlayer");
                xamlMember = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlMember(this, "SkipBackInterval", "System.Nullable`1<TimeSpan>");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_102_MediaPlayer_SkipBackInterval;
                xamlMember.Setter = set_102_MediaPlayer_SkipBackInterval;
                break;
            case "Microsoft.PlayerFramework.MediaPlayer.SkipAheadInterval":
                userType = (global::AniTube.AniTube_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.MediaPlayer");
                xamlMember = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlMember(this, "SkipAheadInterval", "System.Nullable`1<TimeSpan>");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_103_MediaPlayer_SkipAheadInterval;
                xamlMember.Setter = set_103_MediaPlayer_SkipAheadInterval;
                break;
            case "Microsoft.PlayerFramework.MediaPlayer.VisualMarkers":
                userType = (global::AniTube.AniTube_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.MediaPlayer");
                xamlMember = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlMember(this, "VisualMarkers", "System.Collections.ObjectModel.ObservableCollection`1<Microsoft.PlayerFramework.VisualMarker>");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_104_MediaPlayer_VisualMarkers;
                xamlMember.SetIsReadOnly();
                break;
            case "Microsoft.PlayerFramework.VisualMarker.Text":
                userType = (global::AniTube.AniTube_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.VisualMarker");
                xamlMember = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlMember(this, "Text", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_105_VisualMarker_Text;
                xamlMember.Setter = set_105_VisualMarker_Text;
                break;
            case "Microsoft.PlayerFramework.VisualMarker.Time":
                userType = (global::AniTube.AniTube_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.VisualMarker");
                xamlMember = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlMember(this, "Time", "TimeSpan");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_106_VisualMarker_Time;
                xamlMember.Setter = set_106_VisualMarker_Time;
                break;
            case "Microsoft.PlayerFramework.VisualMarker.IsSeekable":
                userType = (global::AniTube.AniTube_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.VisualMarker");
                xamlMember = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlMember(this, "IsSeekable", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_107_VisualMarker_IsSeekable;
                xamlMember.Setter = set_107_VisualMarker_IsSeekable;
                break;
            case "Microsoft.PlayerFramework.VisualMarker.Style":
                userType = (global::AniTube.AniTube_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.VisualMarker");
                xamlMember = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlMember(this, "Style", "Windows.UI.Xaml.Style");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_108_VisualMarker_Style;
                xamlMember.Setter = set_108_VisualMarker_Style;
                break;
            case "Microsoft.PlayerFramework.MediaPlayer.Markers":
                userType = (global::AniTube.AniTube_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.MediaPlayer");
                xamlMember = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlMember(this, "Markers", "Windows.UI.Xaml.Media.TimelineMarkerCollection");
                xamlMember.Getter = get_109_MediaPlayer_Markers;
                xamlMember.SetIsReadOnly();
                break;
            case "Microsoft.PlayerFramework.MediaPlayer.AutoLoad":
                userType = (global::AniTube.AniTube_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.MediaPlayer");
                xamlMember = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlMember(this, "AutoLoad", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_110_MediaPlayer_AutoLoad;
                xamlMember.Setter = set_110_MediaPlayer_AutoLoad;
                break;
            case "Microsoft.PlayerFramework.MediaPlayer.SignalStrength":
                userType = (global::AniTube.AniTube_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.MediaPlayer");
                xamlMember = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlMember(this, "SignalStrength", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_111_MediaPlayer_SignalStrength;
                xamlMember.Setter = set_111_MediaPlayer_SignalStrength;
                break;
            case "Microsoft.PlayerFramework.MediaPlayer.LivePositionBuffer":
                userType = (global::AniTube.AniTube_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.MediaPlayer");
                xamlMember = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlMember(this, "LivePositionBuffer", "TimeSpan");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_112_MediaPlayer_LivePositionBuffer;
                xamlMember.Setter = set_112_MediaPlayer_LivePositionBuffer;
                break;
            case "Microsoft.PlayerFramework.MediaPlayer.IsPositionLive":
                userType = (global::AniTube.AniTube_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.MediaPlayer");
                xamlMember = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlMember(this, "IsPositionLive", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_113_MediaPlayer_IsPositionLive;
                xamlMember.SetIsReadOnly();
                break;
            case "Microsoft.PlayerFramework.MediaPlayer.LivePosition":
                userType = (global::AniTube.AniTube_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.MediaPlayer");
                xamlMember = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlMember(this, "LivePosition", "System.Nullable`1<TimeSpan>");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_114_MediaPlayer_LivePosition;
                xamlMember.Setter = set_114_MediaPlayer_LivePosition;
                break;
            case "Microsoft.PlayerFramework.MediaPlayer.Duration":
                userType = (global::AniTube.AniTube_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.MediaPlayer");
                xamlMember = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlMember(this, "Duration", "TimeSpan");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_115_MediaPlayer_Duration;
                xamlMember.SetIsReadOnly();
                break;
            case "Microsoft.PlayerFramework.MediaPlayer.IsStartTimeOffset":
                userType = (global::AniTube.AniTube_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.MediaPlayer");
                xamlMember = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlMember(this, "IsStartTimeOffset", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_116_MediaPlayer_IsStartTimeOffset;
                xamlMember.Setter = set_116_MediaPlayer_IsStartTimeOffset;
                break;
            case "Microsoft.PlayerFramework.MediaPlayer.StartTime":
                userType = (global::AniTube.AniTube_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.MediaPlayer");
                xamlMember = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlMember(this, "StartTime", "TimeSpan");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_117_MediaPlayer_StartTime;
                xamlMember.Setter = set_117_MediaPlayer_StartTime;
                break;
            case "Microsoft.PlayerFramework.MediaPlayer.TimeRemaining":
                userType = (global::AniTube.AniTube_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.MediaPlayer");
                xamlMember = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlMember(this, "TimeRemaining", "TimeSpan");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_118_MediaPlayer_TimeRemaining;
                xamlMember.SetIsReadOnly();
                break;
            case "Microsoft.PlayerFramework.MediaPlayer.SeekWhileScrubbing":
                userType = (global::AniTube.AniTube_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.MediaPlayer");
                xamlMember = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlMember(this, "SeekWhileScrubbing", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_119_MediaPlayer_SeekWhileScrubbing;
                xamlMember.Setter = set_119_MediaPlayer_SeekWhileScrubbing;
                break;
            case "Microsoft.PlayerFramework.MediaPlayer.ReplayOffset":
                userType = (global::AniTube.AniTube_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.MediaPlayer");
                xamlMember = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlMember(this, "ReplayOffset", "System.Nullable`1<TimeSpan>");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_120_MediaPlayer_ReplayOffset;
                xamlMember.Setter = set_120_MediaPlayer_ReplayOffset;
                break;
            case "Microsoft.PlayerFramework.MediaPlayer.SlowMotionPlaybackRate":
                userType = (global::AniTube.AniTube_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.MediaPlayer");
                xamlMember = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlMember(this, "SlowMotionPlaybackRate", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_121_MediaPlayer_SlowMotionPlaybackRate;
                xamlMember.Setter = set_121_MediaPlayer_SlowMotionPlaybackRate;
                break;
            case "Microsoft.PlayerFramework.MediaPlayer.IsSlowMotion":
                userType = (global::AniTube.AniTube_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.MediaPlayer");
                xamlMember = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlMember(this, "IsSlowMotion", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_122_MediaPlayer_IsSlowMotion;
                xamlMember.Setter = set_122_MediaPlayer_IsSlowMotion;
                break;
            case "Microsoft.PlayerFramework.MediaPlayer.IsCaptionsActive":
                userType = (global::AniTube.AniTube_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.MediaPlayer");
                xamlMember = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlMember(this, "IsCaptionsActive", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_123_MediaPlayer_IsCaptionsActive;
                xamlMember.Setter = set_123_MediaPlayer_IsCaptionsActive;
                break;
            case "Microsoft.PlayerFramework.MediaPlayer.AdvertisingState":
                userType = (global::AniTube.AniTube_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.MediaPlayer");
                xamlMember = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlMember(this, "AdvertisingState", "Microsoft.PlayerFramework.AdvertisingState");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_124_MediaPlayer_AdvertisingState;
                xamlMember.Setter = set_124_MediaPlayer_AdvertisingState;
                break;
            case "Microsoft.PlayerFramework.MediaPlayer.IsScrubbing":
                userType = (global::AniTube.AniTube_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.MediaPlayer");
                xamlMember = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlMember(this, "IsScrubbing", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_125_MediaPlayer_IsScrubbing;
                xamlMember.SetIsReadOnly();
                break;
            case "Microsoft.PlayerFramework.MediaPlayer.MediaEndedBehavior":
                userType = (global::AniTube.AniTube_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.MediaPlayer");
                xamlMember = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlMember(this, "MediaEndedBehavior", "Microsoft.PlayerFramework.MediaEndedBehavior");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_126_MediaPlayer_MediaEndedBehavior;
                xamlMember.Setter = set_126_MediaPlayer_MediaEndedBehavior;
                break;
            case "Microsoft.PlayerFramework.MediaPlayer.AvailableCaptions":
                userType = (global::AniTube.AniTube_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.MediaPlayer");
                xamlMember = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlMember(this, "AvailableCaptions", "System.Collections.Generic.List`1<Microsoft.PlayerFramework.Caption>");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_127_MediaPlayer_AvailableCaptions;
                xamlMember.SetIsReadOnly();
                break;
            case "Microsoft.PlayerFramework.Caption.Id":
                userType = (global::AniTube.AniTube_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.Caption");
                xamlMember = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlMember(this, "Id", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_128_Caption_Id;
                xamlMember.Setter = set_128_Caption_Id;
                break;
            case "Microsoft.PlayerFramework.Caption.Description":
                userType = (global::AniTube.AniTube_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.Caption");
                xamlMember = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlMember(this, "Description", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_129_Caption_Description;
                xamlMember.Setter = set_129_Caption_Description;
                break;
            case "Microsoft.PlayerFramework.Caption.Payload":
                userType = (global::AniTube.AniTube_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.Caption");
                xamlMember = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlMember(this, "Payload", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_130_Caption_Payload;
                xamlMember.Setter = set_130_Caption_Payload;
                break;
            case "Microsoft.PlayerFramework.Caption.Source":
                userType = (global::AniTube.AniTube_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.Caption");
                xamlMember = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlMember(this, "Source", "System.Uri");
                xamlMember.Getter = get_131_Caption_Source;
                xamlMember.Setter = set_131_Caption_Source;
                break;
            case "Microsoft.PlayerFramework.MediaPlayer.SelectedCaption":
                userType = (global::AniTube.AniTube_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.MediaPlayer");
                xamlMember = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlMember(this, "SelectedCaption", "Microsoft.PlayerFramework.Caption");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_132_MediaPlayer_SelectedCaption;
                xamlMember.Setter = set_132_MediaPlayer_SelectedCaption;
                break;
            case "Microsoft.PlayerFramework.MediaPlayer.AvailableAudioStreams":
                userType = (global::AniTube.AniTube_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.MediaPlayer");
                xamlMember = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlMember(this, "AvailableAudioStreams", "System.Collections.Generic.List`1<Microsoft.PlayerFramework.AudioStream>");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_133_MediaPlayer_AvailableAudioStreams;
                xamlMember.SetIsReadOnly();
                break;
            case "Microsoft.PlayerFramework.AudioStream.Name":
                userType = (global::AniTube.AniTube_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.AudioStream");
                xamlMember = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlMember(this, "Name", "String");
                xamlMember.Getter = get_134_AudioStream_Name;
                xamlMember.Setter = set_134_AudioStream_Name;
                break;
            case "Microsoft.PlayerFramework.AudioStream.Language":
                userType = (global::AniTube.AniTube_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.AudioStream");
                xamlMember = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlMember(this, "Language", "String");
                xamlMember.Getter = get_135_AudioStream_Language;
                xamlMember.Setter = set_135_AudioStream_Language;
                break;
            case "Microsoft.PlayerFramework.MediaPlayer.SelectedAudioStream":
                userType = (global::AniTube.AniTube_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.MediaPlayer");
                xamlMember = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlMember(this, "SelectedAudioStream", "Microsoft.PlayerFramework.AudioStream");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_136_MediaPlayer_SelectedAudioStream;
                xamlMember.Setter = set_136_MediaPlayer_SelectedAudioStream;
                break;
            case "Microsoft.PlayerFramework.MediaPlayer.IsLive":
                userType = (global::AniTube.AniTube_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.MediaPlayer");
                xamlMember = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlMember(this, "IsLive", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_137_MediaPlayer_IsLive;
                xamlMember.Setter = set_137_MediaPlayer_IsLive;
                break;
            case "Microsoft.PlayerFramework.MediaPlayer.IsThumbnailVisible":
                userType = (global::AniTube.AniTube_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.MediaPlayer");
                xamlMember = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlMember(this, "IsThumbnailVisible", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_138_MediaPlayer_IsThumbnailVisible;
                xamlMember.Setter = set_138_MediaPlayer_IsThumbnailVisible;
                break;
            case "Microsoft.PlayerFramework.MediaPlayer.VirtualPosition":
                userType = (global::AniTube.AniTube_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.MediaPlayer");
                xamlMember = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlMember(this, "VirtualPosition", "TimeSpan");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_139_MediaPlayer_VirtualPosition;
                xamlMember.SetIsReadOnly();
                break;
            case "Microsoft.PlayerFramework.MediaPlayer.ThumbnailImageSource":
                userType = (global::AniTube.AniTube_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.MediaPlayer");
                xamlMember = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlMember(this, "ThumbnailImageSource", "Windows.UI.Xaml.Media.ImageSource");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_140_MediaPlayer_ThumbnailImageSource;
                xamlMember.Setter = set_140_MediaPlayer_ThumbnailImageSource;
                break;
            case "Microsoft.PlayerFramework.MediaPlayer.TestForMediaPack":
                userType = (global::AniTube.AniTube_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.MediaPlayer");
                xamlMember = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlMember(this, "TestForMediaPack", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_141_MediaPlayer_TestForMediaPack;
                xamlMember.Setter = set_141_MediaPlayer_TestForMediaPack;
                break;
            case "Microsoft.PlayerFramework.MediaPlayer.MediaExtensionManager":
                userType = (global::AniTube.AniTube_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.MediaPlayer");
                xamlMember = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlMember(this, "MediaExtensionManager", "Windows.Media.MediaExtensionManager");
                xamlMember.Getter = get_142_MediaPlayer_MediaExtensionManager;
                xamlMember.Setter = set_142_MediaPlayer_MediaExtensionManager;
                break;
            case "Microsoft.PlayerFramework.MediaPlayer.AspectRatioWidth":
                userType = (global::AniTube.AniTube_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.MediaPlayer");
                xamlMember = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlMember(this, "AspectRatioWidth", "Int32");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_143_MediaPlayer_AspectRatioWidth;
                xamlMember.SetIsReadOnly();
                break;
            case "Microsoft.PlayerFramework.MediaPlayer.AspectRatioHeight":
                userType = (global::AniTube.AniTube_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.MediaPlayer");
                xamlMember = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlMember(this, "AspectRatioHeight", "Int32");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_144_MediaPlayer_AspectRatioHeight;
                xamlMember.SetIsReadOnly();
                break;
            case "Microsoft.PlayerFramework.MediaPlayer.AudioCategory":
                userType = (global::AniTube.AniTube_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.MediaPlayer");
                xamlMember = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlMember(this, "AudioCategory", "Windows.UI.Xaml.Media.AudioCategory");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_145_MediaPlayer_AudioCategory;
                xamlMember.Setter = set_145_MediaPlayer_AudioCategory;
                break;
            case "Microsoft.PlayerFramework.MediaPlayer.AudioDeviceType":
                userType = (global::AniTube.AniTube_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.MediaPlayer");
                xamlMember = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlMember(this, "AudioDeviceType", "Windows.UI.Xaml.Media.AudioDeviceType");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_146_MediaPlayer_AudioDeviceType;
                xamlMember.Setter = set_146_MediaPlayer_AudioDeviceType;
                break;
            case "Microsoft.PlayerFramework.MediaPlayer.PlayToSource":
                userType = (global::AniTube.AniTube_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.MediaPlayer");
                xamlMember = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlMember(this, "PlayToSource", "Windows.Media.PlayTo.PlayToSource");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_147_MediaPlayer_PlayToSource;
                xamlMember.SetIsReadOnly();
                break;
            case "Microsoft.PlayerFramework.MediaPlayer.DefaultPlaybackRate":
                userType = (global::AniTube.AniTube_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.MediaPlayer");
                xamlMember = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlMember(this, "DefaultPlaybackRate", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_148_MediaPlayer_DefaultPlaybackRate;
                xamlMember.Setter = set_148_MediaPlayer_DefaultPlaybackRate;
                break;
            case "Microsoft.PlayerFramework.MediaPlayer.IsAudioOnly":
                userType = (global::AniTube.AniTube_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.MediaPlayer");
                xamlMember = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlMember(this, "IsAudioOnly", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_149_MediaPlayer_IsAudioOnly;
                xamlMember.SetIsReadOnly();
                break;
            case "Microsoft.PlayerFramework.MediaPlayer.IsLooping":
                userType = (global::AniTube.AniTube_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.MediaPlayer");
                xamlMember = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlMember(this, "IsLooping", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_150_MediaPlayer_IsLooping;
                xamlMember.Setter = set_150_MediaPlayer_IsLooping;
                break;
            case "Microsoft.PlayerFramework.MediaPlayer.PosterSource":
                userType = (global::AniTube.AniTube_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.MediaPlayer");
                xamlMember = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlMember(this, "PosterSource", "Windows.UI.Xaml.Media.ImageSource");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_151_MediaPlayer_PosterSource;
                xamlMember.Setter = set_151_MediaPlayer_PosterSource;
                break;
            case "Microsoft.PlayerFramework.MediaPlayer.ActualStereo3DVideoPackingMode":
                userType = (global::AniTube.AniTube_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.MediaPlayer");
                xamlMember = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlMember(this, "ActualStereo3DVideoPackingMode", "Windows.UI.Xaml.Media.Stereo3DVideoPackingMode");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_152_MediaPlayer_ActualStereo3DVideoPackingMode;
                xamlMember.SetIsReadOnly();
                break;
            case "Microsoft.PlayerFramework.MediaPlayer.Stereo3DVideoPackingMode":
                userType = (global::AniTube.AniTube_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.MediaPlayer");
                xamlMember = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlMember(this, "Stereo3DVideoPackingMode", "Windows.UI.Xaml.Media.Stereo3DVideoPackingMode");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_153_MediaPlayer_Stereo3DVideoPackingMode;
                xamlMember.Setter = set_153_MediaPlayer_Stereo3DVideoPackingMode;
                break;
            case "Microsoft.PlayerFramework.MediaPlayer.Stereo3DVideoRenderMode":
                userType = (global::AniTube.AniTube_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.MediaPlayer");
                xamlMember = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlMember(this, "Stereo3DVideoRenderMode", "Windows.UI.Xaml.Media.Stereo3DVideoRenderMode");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_154_MediaPlayer_Stereo3DVideoRenderMode;
                xamlMember.Setter = set_154_MediaPlayer_Stereo3DVideoRenderMode;
                break;
            case "Microsoft.PlayerFramework.MediaPlayer.IsStereo3DVideo":
                userType = (global::AniTube.AniTube_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.MediaPlayer");
                xamlMember = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlMember(this, "IsStereo3DVideo", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_155_MediaPlayer_IsStereo3DVideo;
                xamlMember.SetIsReadOnly();
                break;
            case "Microsoft.PlayerFramework.MediaPlayer.RealTimePlayback":
                userType = (global::AniTube.AniTube_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.MediaPlayer");
                xamlMember = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlMember(this, "RealTimePlayback", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_156_MediaPlayer_RealTimePlayback;
                xamlMember.Setter = set_156_MediaPlayer_RealTimePlayback;
                break;
            case "Microsoft.PlayerFramework.MediaPlayer.ProtectionManager":
                userType = (global::AniTube.AniTube_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.MediaPlayer");
                xamlMember = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlMember(this, "ProtectionManager", "Windows.Media.Protection.MediaProtectionManager");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_157_MediaPlayer_ProtectionManager;
                xamlMember.Setter = set_157_MediaPlayer_ProtectionManager;
                break;
            case "Microsoft.PlayerFramework.MediaPlayer.AreTransportControlsEnabled":
                userType = (global::AniTube.AniTube_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.MediaPlayer");
                xamlMember = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlMember(this, "AreTransportControlsEnabled", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_158_MediaPlayer_AreTransportControlsEnabled;
                xamlMember.Setter = set_158_MediaPlayer_AreTransportControlsEnabled;
                break;
            case "Microsoft.PlayerFramework.MediaPlayer.IsFullWindow":
                userType = (global::AniTube.AniTube_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.MediaPlayer");
                xamlMember = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlMember(this, "IsFullWindow", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_159_MediaPlayer_IsFullWindow;
                xamlMember.Setter = set_159_MediaPlayer_IsFullWindow;
                break;
            case "Microsoft.PlayerFramework.MediaPlayer.PlayToPreferredSourceUri":
                userType = (global::AniTube.AniTube_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.MediaPlayer");
                xamlMember = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlMember(this, "PlayToPreferredSourceUri", "System.Uri");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_160_MediaPlayer_PlayToPreferredSourceUri;
                xamlMember.Setter = set_160_MediaPlayer_PlayToPreferredSourceUri;
                break;
            case "Microsoft.PlayerFramework.MediaPlayer.Stretch":
                userType = (global::AniTube.AniTube_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.MediaPlayer");
                xamlMember = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlMember(this, "Stretch", "Windows.UI.Xaml.Media.Stretch");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_161_MediaPlayer_Stretch;
                xamlMember.Setter = set_161_MediaPlayer_Stretch;
                break;
            case "Microsoft.PlayerFramework.MediaPlayer.AudioStreamCount":
                userType = (global::AniTube.AniTube_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.MediaPlayer");
                xamlMember = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlMember(this, "AudioStreamCount", "Int32");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_162_MediaPlayer_AudioStreamCount;
                xamlMember.SetIsReadOnly();
                break;
            case "Microsoft.PlayerFramework.MediaPlayer.AudioStreamIndex":
                userType = (global::AniTube.AniTube_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.MediaPlayer");
                xamlMember = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlMember(this, "AudioStreamIndex", "System.Nullable`1<Int32>");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_163_MediaPlayer_AudioStreamIndex;
                xamlMember.Setter = set_163_MediaPlayer_AudioStreamIndex;
                break;
            case "Microsoft.PlayerFramework.MediaPlayer.BufferingProgress":
                userType = (global::AniTube.AniTube_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.MediaPlayer");
                xamlMember = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlMember(this, "BufferingProgress", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_164_MediaPlayer_BufferingProgress;
                xamlMember.SetIsReadOnly();
                break;
            case "Microsoft.PlayerFramework.MediaPlayer.CanPause":
                userType = (global::AniTube.AniTube_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.MediaPlayer");
                xamlMember = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlMember(this, "CanPause", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_165_MediaPlayer_CanPause;
                xamlMember.SetIsReadOnly();
                break;
            case "Microsoft.PlayerFramework.MediaPlayer.CanSeek":
                userType = (global::AniTube.AniTube_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.MediaPlayer");
                xamlMember = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlMember(this, "CanSeek", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_166_MediaPlayer_CanSeek;
                xamlMember.SetIsReadOnly();
                break;
            case "Microsoft.PlayerFramework.MediaPlayer.Balance":
                userType = (global::AniTube.AniTube_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.MediaPlayer");
                xamlMember = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlMember(this, "Balance", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_167_MediaPlayer_Balance;
                xamlMember.Setter = set_167_MediaPlayer_Balance;
                break;
            case "Microsoft.PlayerFramework.MediaPlayer.DownloadProgress":
                userType = (global::AniTube.AniTube_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.MediaPlayer");
                xamlMember = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlMember(this, "DownloadProgress", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_168_MediaPlayer_DownloadProgress;
                xamlMember.SetIsReadOnly();
                break;
            case "Microsoft.PlayerFramework.MediaPlayer.DownloadProgressOffset":
                userType = (global::AniTube.AniTube_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.MediaPlayer");
                xamlMember = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlMember(this, "DownloadProgressOffset", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_169_MediaPlayer_DownloadProgressOffset;
                xamlMember.SetIsReadOnly();
                break;
            case "Microsoft.PlayerFramework.MediaPlayer.IsMuted":
                userType = (global::AniTube.AniTube_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.MediaPlayer");
                xamlMember = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlMember(this, "IsMuted", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_170_MediaPlayer_IsMuted;
                xamlMember.Setter = set_170_MediaPlayer_IsMuted;
                break;
            case "Microsoft.PlayerFramework.MediaPlayer.NaturalDuration":
                userType = (global::AniTube.AniTube_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.MediaPlayer");
                xamlMember = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlMember(this, "NaturalDuration", "Windows.UI.Xaml.Duration");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_171_MediaPlayer_NaturalDuration;
                xamlMember.SetIsReadOnly();
                break;
            case "Microsoft.PlayerFramework.MediaPlayer.NaturalVideoHeight":
                userType = (global::AniTube.AniTube_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.MediaPlayer");
                xamlMember = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlMember(this, "NaturalVideoHeight", "Int32");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_172_MediaPlayer_NaturalVideoHeight;
                xamlMember.SetIsReadOnly();
                break;
            case "Microsoft.PlayerFramework.MediaPlayer.NaturalVideoWidth":
                userType = (global::AniTube.AniTube_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.MediaPlayer");
                xamlMember = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlMember(this, "NaturalVideoWidth", "Int32");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_173_MediaPlayer_NaturalVideoWidth;
                xamlMember.SetIsReadOnly();
                break;
            case "Microsoft.PlayerFramework.MediaPlayer.PlaybackRate":
                userType = (global::AniTube.AniTube_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.MediaPlayer");
                xamlMember = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlMember(this, "PlaybackRate", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_174_MediaPlayer_PlaybackRate;
                xamlMember.Setter = set_174_MediaPlayer_PlaybackRate;
                break;
            case "Microsoft.PlayerFramework.MediaPlayer.IsTrickPlayEnabled":
                userType = (global::AniTube.AniTube_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.MediaPlayer");
                xamlMember = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlMember(this, "IsTrickPlayEnabled", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_175_MediaPlayer_IsTrickPlayEnabled;
                xamlMember.Setter = set_175_MediaPlayer_IsTrickPlayEnabled;
                break;
            case "Microsoft.PlayerFramework.MediaPlayer.CurrentState":
                userType = (global::AniTube.AniTube_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.MediaPlayer");
                xamlMember = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlMember(this, "CurrentState", "Windows.UI.Xaml.Media.MediaElementState");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_176_MediaPlayer_CurrentState;
                xamlMember.SetIsReadOnly();
                break;
            case "Microsoft.PlayerFramework.MediaPlayer.Volume":
                userType = (global::AniTube.AniTube_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.MediaPlayer");
                xamlMember = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlMember(this, "Volume", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_177_MediaPlayer_Volume;
                xamlMember.Setter = set_177_MediaPlayer_Volume;
                break;
            case "Microsoft.PlayerFramework.MediaPlayer.SupportedPlaybackRates":
                userType = (global::AniTube.AniTube_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.MediaPlayer");
                xamlMember = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlMember(this, "SupportedPlaybackRates", "System.Collections.Generic.IList`1<Double>");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_178_MediaPlayer_SupportedPlaybackRates;
                xamlMember.Setter = set_178_MediaPlayer_SupportedPlaybackRates;
                break;
            case "Microsoft.PlayerFramework.MediaPlayer.ControlPanelTemplate":
                userType = (global::AniTube.AniTube_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.MediaPlayer");
                xamlMember = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlMember(this, "ControlPanelTemplate", "Windows.UI.Xaml.Controls.ControlTemplate");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_179_MediaPlayer_ControlPanelTemplate;
                xamlMember.Setter = set_179_MediaPlayer_ControlPanelTemplate;
                break;
            case "Microsoft.PlayerFramework.MediaPlayer.ControlPanel":
                userType = (global::AniTube.AniTube_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.MediaPlayer");
                xamlMember = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlMember(this, "ControlPanel", "Windows.UI.Xaml.Controls.Control");
                xamlMember.Getter = get_180_MediaPlayer_ControlPanel;
                xamlMember.SetIsReadOnly();
                break;
            case "Microsoft.PlayerFramework.MediaPlayer.AutoHideInterval":
                userType = (global::AniTube.AniTube_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.MediaPlayer");
                xamlMember = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlMember(this, "AutoHideInterval", "TimeSpan");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_181_MediaPlayer_AutoHideInterval;
                xamlMember.Setter = set_181_MediaPlayer_AutoHideInterval;
                break;
            case "Microsoft.PlayerFramework.MediaPlayer.Containers":
                userType = (global::AniTube.AniTube_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.MediaPlayer");
                xamlMember = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlMember(this, "Containers", "System.Collections.Generic.IList`1<Windows.UI.Xaml.UIElement>");
                xamlMember.Getter = get_182_MediaPlayer_Containers;
                xamlMember.Setter = set_182_MediaPlayer_Containers;
                break;
            case "Microsoft.PlayerFramework.MediaPlayer.InteractiveViewModel":
                userType = (global::AniTube.AniTube_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.MediaPlayer");
                xamlMember = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlMember(this, "InteractiveViewModel", "Microsoft.PlayerFramework.IInteractiveViewModel");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_183_MediaPlayer_InteractiveViewModel;
                xamlMember.Setter = set_183_MediaPlayer_InteractiveViewModel;
                break;
            case "Microsoft.PlayerFramework.MediaPlayer.DefaultInteractiveViewModel":
                userType = (global::AniTube.AniTube_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.MediaPlayer");
                xamlMember = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlMember(this, "DefaultInteractiveViewModel", "Microsoft.PlayerFramework.IInteractiveViewModel");
                xamlMember.Getter = get_184_MediaPlayer_DefaultInteractiveViewModel;
                xamlMember.Setter = set_184_MediaPlayer_DefaultInteractiveViewModel;
                break;
            case "Microsoft.PlayerFramework.MediaPlayer.InteractiveActivationMode":
                userType = (global::AniTube.AniTube_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.MediaPlayer");
                xamlMember = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlMember(this, "InteractiveActivationMode", "Microsoft.PlayerFramework.InteractionType");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_185_MediaPlayer_InteractiveActivationMode;
                xamlMember.Setter = set_185_MediaPlayer_InteractiveActivationMode;
                break;
            case "Microsoft.PlayerFramework.MediaPlayer.InteractiveDeactivationMode":
                userType = (global::AniTube.AniTube_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.MediaPlayer");
                xamlMember = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlMember(this, "InteractiveDeactivationMode", "Microsoft.PlayerFramework.InteractionType");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_186_MediaPlayer_InteractiveDeactivationMode;
                xamlMember.Setter = set_186_MediaPlayer_InteractiveDeactivationMode;
                break;
            case "Microsoft.PlayerFramework.MediaPlayer.AutoHide":
                userType = (global::AniTube.AniTube_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.MediaPlayer");
                xamlMember = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlMember(this, "AutoHide", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_187_MediaPlayer_AutoHide;
                xamlMember.Setter = set_187_MediaPlayer_AutoHide;
                break;
            case "Microsoft.PlayerFramework.MediaPlayer.AutoHideBehavior":
                userType = (global::AniTube.AniTube_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.MediaPlayer");
                xamlMember = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlMember(this, "AutoHideBehavior", "Microsoft.PlayerFramework.AutoHideBehavior");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_188_MediaPlayer_AutoHideBehavior;
                xamlMember.Setter = set_188_MediaPlayer_AutoHideBehavior;
                break;
            case "Microsoft.PlayerFramework.MediaPlayer.IsInteractive":
                userType = (global::AniTube.AniTube_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.MediaPlayer");
                xamlMember = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlMember(this, "IsInteractive", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_189_MediaPlayer_IsInteractive;
                xamlMember.Setter = set_189_MediaPlayer_IsInteractive;
                break;
            case "Microsoft.PlayerFramework.MediaPlayer.PlayerState":
                userType = (global::AniTube.AniTube_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.MediaPlayer");
                xamlMember = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlMember(this, "PlayerState", "Microsoft.PlayerFramework.PlayerState");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_190_MediaPlayer_PlayerState;
                xamlMember.SetIsReadOnly();
                break;
            case "Telerik.UI.Xaml.Controls.Chart.ChartAnnotationLabelDefinition.Format":
                userType = (global::AniTube.AniTube_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.ChartAnnotationLabelDefinition");
                xamlMember = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlMember(this, "Format", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_191_ChartAnnotationLabelDefinition_Format;
                xamlMember.Setter = set_191_ChartAnnotationLabelDefinition_Format;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.ChartAnnotationLabelDefinition.Template":
                userType = (global::AniTube.AniTube_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.ChartAnnotationLabelDefinition");
                xamlMember = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlMember(this, "Template", "Windows.UI.Xaml.DataTemplate");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_192_ChartAnnotationLabelDefinition_Template;
                xamlMember.Setter = set_192_ChartAnnotationLabelDefinition_Template;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.ChartAnnotationLabelDefinition.DefaultVisualStyle":
                userType = (global::AniTube.AniTube_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.ChartAnnotationLabelDefinition");
                xamlMember = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlMember(this, "DefaultVisualStyle", "Windows.UI.Xaml.Style");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_193_ChartAnnotationLabelDefinition_DefaultVisualStyle;
                xamlMember.Setter = set_193_ChartAnnotationLabelDefinition_DefaultVisualStyle;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.ChartAnnotationLabelDefinition.Location":
                userType = (global::AniTube.AniTube_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.ChartAnnotationLabelDefinition");
                xamlMember = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlMember(this, "Location", "Telerik.UI.Xaml.Controls.Chart.ChartAnnotationLabelLocation");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_194_ChartAnnotationLabelDefinition_Location;
                xamlMember.Setter = set_194_ChartAnnotationLabelDefinition_Location;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.ChartAnnotationLabelDefinition.HorizontalAlignment":
                userType = (global::AniTube.AniTube_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.ChartAnnotationLabelDefinition");
                xamlMember = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlMember(this, "HorizontalAlignment", "Windows.UI.Xaml.HorizontalAlignment");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_195_ChartAnnotationLabelDefinition_HorizontalAlignment;
                xamlMember.Setter = set_195_ChartAnnotationLabelDefinition_HorizontalAlignment;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.ChartAnnotationLabelDefinition.VerticalAlignment":
                userType = (global::AniTube.AniTube_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.ChartAnnotationLabelDefinition");
                xamlMember = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlMember(this, "VerticalAlignment", "Windows.UI.Xaml.VerticalAlignment");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_196_ChartAnnotationLabelDefinition_VerticalAlignment;
                xamlMember.Setter = set_196_ChartAnnotationLabelDefinition_VerticalAlignment;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.ChartAnnotationLabelDefinition.HorizontalOffset":
                userType = (global::AniTube.AniTube_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.ChartAnnotationLabelDefinition");
                xamlMember = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlMember(this, "HorizontalOffset", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_197_ChartAnnotationLabelDefinition_HorizontalOffset;
                xamlMember.Setter = set_197_ChartAnnotationLabelDefinition_HorizontalOffset;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.ChartAnnotationLabelDefinition.VerticalOffset":
                userType = (global::AniTube.AniTube_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.ChartAnnotationLabelDefinition");
                xamlMember = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlMember(this, "VerticalOffset", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_198_ChartAnnotationLabelDefinition_VerticalOffset;
                xamlMember.Setter = set_198_ChartAnnotationLabelDefinition_VerticalOffset;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.ChartPalette.Name":
                userType = (global::AniTube.AniTube_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.ChartPalette");
                xamlMember = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlMember(this, "Name", "String");
                xamlMember.Getter = get_199_ChartPalette_Name;
                xamlMember.Setter = set_199_ChartPalette_Name;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.ChartPalette.FillEntries":
                userType = (global::AniTube.AniTube_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.ChartPalette");
                xamlMember = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlMember(this, "FillEntries", "Telerik.UI.Xaml.Controls.Chart.PaletteEntryCollection");
                xamlMember.Getter = get_200_ChartPalette_FillEntries;
                xamlMember.Setter = set_200_ChartPalette_FillEntries;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.PaletteEntryCollection.Brushes":
                userType = (global::AniTube.AniTube_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.PaletteEntryCollection");
                xamlMember = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlMember(this, "Brushes", "System.Collections.Generic.List`1<Windows.UI.Xaml.Media.Brush>");
                xamlMember.Getter = get_201_PaletteEntryCollection_Brushes;
                xamlMember.SetIsReadOnly();
                break;
            case "Telerik.UI.Xaml.Controls.Chart.ChartPalette.SpecialFillEntries":
                userType = (global::AniTube.AniTube_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.ChartPalette");
                xamlMember = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlMember(this, "SpecialFillEntries", "Telerik.UI.Xaml.Controls.Chart.PaletteEntryCollection");
                xamlMember.Getter = get_202_ChartPalette_SpecialFillEntries;
                xamlMember.Setter = set_202_ChartPalette_SpecialFillEntries;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.ChartPalette.StrokeEntries":
                userType = (global::AniTube.AniTube_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.ChartPalette");
                xamlMember = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlMember(this, "StrokeEntries", "Telerik.UI.Xaml.Controls.Chart.PaletteEntryCollection");
                xamlMember.Getter = get_203_ChartPalette_StrokeEntries;
                xamlMember.Setter = set_203_ChartPalette_StrokeEntries;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.ChartPalette.SpecialStrokeEntries":
                userType = (global::AniTube.AniTube_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.ChartPalette");
                xamlMember = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlMember(this, "SpecialStrokeEntries", "Telerik.UI.Xaml.Controls.Chart.PaletteEntryCollection");
                xamlMember.Getter = get_204_ChartPalette_SpecialStrokeEntries;
                xamlMember.Setter = set_204_ChartPalette_SpecialStrokeEntries;
                break;
            case "Telerik.UI.Xaml.Controls.Data.HexView.HexLayoutDefinitionBase.Orientation":
                userType = (global::AniTube.AniTube_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Data.HexView.HexLayoutDefinitionBase");
                xamlMember = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlMember(this, "Orientation", "Windows.UI.Xaml.Controls.Orientation");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_205_HexLayoutDefinitionBase_Orientation;
                xamlMember.Setter = set_205_HexLayoutDefinitionBase_Orientation;
                break;
            case "Telerik.UI.Xaml.Controls.Data.HexView.HexLayoutDefinitionBase.ItemLength":
                userType = (global::AniTube.AniTube_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Data.HexView.HexLayoutDefinitionBase");
                xamlMember = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlMember(this, "ItemLength", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_206_HexLayoutDefinitionBase_ItemLength;
                xamlMember.Setter = set_206_HexLayoutDefinitionBase_ItemLength;
                break;
            case "Telerik.UI.Xaml.Controls.Data.HexView.HexLayoutDefinitionBase.ItemsSpacing":
                userType = (global::AniTube.AniTube_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Data.HexView.HexLayoutDefinitionBase");
                xamlMember = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlMember(this, "ItemsSpacing", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_207_HexLayoutDefinitionBase_ItemsSpacing;
                xamlMember.Setter = set_207_HexLayoutDefinitionBase_ItemsSpacing;
                break;
            case "Telerik.UI.Xaml.Controls.Data.HexView.HexLayoutDefinitionBase.ViewPortExtension":
                userType = (global::AniTube.AniTube_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Data.HexView.HexLayoutDefinitionBase");
                xamlMember = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlMember(this, "ViewPortExtension", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_208_HexLayoutDefinitionBase_ViewPortExtension;
                xamlMember.Setter = set_208_HexLayoutDefinitionBase_ViewPortExtension;
                break;
            case "Telerik.UI.Xaml.Controls.Input.HighlightStyle.FontFamily":
                userType = (global::AniTube.AniTube_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Input.HighlightStyle");
                xamlMember = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlMember(this, "FontFamily", "Windows.UI.Xaml.Media.FontFamily");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_209_HighlightStyle_FontFamily;
                xamlMember.Setter = set_209_HighlightStyle_FontFamily;
                break;
            case "Telerik.UI.Xaml.Controls.Input.HighlightStyle.FontWeight":
                userType = (global::AniTube.AniTube_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Input.HighlightStyle");
                xamlMember = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlMember(this, "FontWeight", "Telerik.UI.Xaml.Controls.Input.FontWeightName");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_210_HighlightStyle_FontWeight;
                xamlMember.Setter = set_210_HighlightStyle_FontWeight;
                break;
            case "Telerik.UI.Xaml.Controls.Input.HighlightStyle.FontStyle":
                userType = (global::AniTube.AniTube_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Input.HighlightStyle");
                xamlMember = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlMember(this, "FontStyle", "Windows.UI.Text.FontStyle");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_211_HighlightStyle_FontStyle;
                xamlMember.Setter = set_211_HighlightStyle_FontStyle;
                break;
            case "Telerik.UI.Xaml.Controls.Input.HighlightStyle.Foreground":
                userType = (global::AniTube.AniTube_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Input.HighlightStyle");
                xamlMember = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlMember(this, "Foreground", "Windows.UI.Xaml.Media.Brush");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_212_HighlightStyle_Foreground;
                xamlMember.Setter = set_212_HighlightStyle_Foreground;
                break;
            case "Telerik.UI.Xaml.Controls.Input.HighlightStyle.FontSize":
                userType = (global::AniTube.AniTube_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Input.HighlightStyle");
                xamlMember = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlMember(this, "FontSize", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_213_HighlightStyle_FontSize;
                xamlMember.Setter = set_213_HighlightStyle_FontSize;
                break;
            case "Telerik.UI.Xaml.Controls.Input.CalendarCellStyle.ContentStyle":
                userType = (global::AniTube.AniTube_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Input.CalendarCellStyle");
                xamlMember = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlMember(this, "ContentStyle", "Windows.UI.Xaml.Style");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_214_CalendarCellStyle_ContentStyle;
                xamlMember.Setter = set_214_CalendarCellStyle_ContentStyle;
                break;
            case "Telerik.UI.Xaml.Controls.Input.CalendarCellStyle.DecorationStyle":
                userType = (global::AniTube.AniTube_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Input.CalendarCellStyle");
                xamlMember = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlMember(this, "DecorationStyle", "Windows.UI.Xaml.Style");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_215_CalendarCellStyle_DecorationStyle;
                xamlMember.Setter = set_215_CalendarCellStyle_DecorationStyle;
                break;
            case "Telerik.UI.Xaml.Controls.Primitives.RadRadialMenu.Items":
                userType = (global::AniTube.AniTube_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Primitives.RadRadialMenu");
                xamlMember = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlMember(this, "Items", "System.Collections.ObjectModel.ObservableCollection`1<Telerik.UI.Xaml.Controls.Primitives.RadialMenuItem>");
                xamlMember.Getter = get_216_RadRadialMenu_Items;
                xamlMember.SetIsReadOnly();
                break;
            case "Telerik.UI.Xaml.Controls.Primitives.RadialMenuItem.ChildItems":
                userType = (global::AniTube.AniTube_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Primitives.RadialMenuItem");
                xamlMember = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlMember(this, "ChildItems", "System.Collections.ObjectModel.ObservableCollection`1<Telerik.UI.Xaml.Controls.Primitives.RadialMenuItem>");
                xamlMember.Getter = get_217_RadialMenuItem_ChildItems;
                xamlMember.SetIsReadOnly();
                break;
            case "Telerik.UI.Xaml.Controls.Primitives.RadialMenuItem.ToolTipContent":
                userType = (global::AniTube.AniTube_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Primitives.RadialMenuItem");
                xamlMember = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlMember(this, "ToolTipContent", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_218_RadialMenuItem_ToolTipContent;
                xamlMember.Setter = set_218_RadialMenuItem_ToolTipContent;
                break;
            case "Telerik.UI.Xaml.Controls.Primitives.RadialMenuItem.CommandParameter":
                userType = (global::AniTube.AniTube_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Primitives.RadialMenuItem");
                xamlMember = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlMember(this, "CommandParameter", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_219_RadialMenuItem_CommandParameter;
                xamlMember.Setter = set_219_RadialMenuItem_CommandParameter;
                break;
            case "Telerik.UI.Xaml.Controls.Primitives.RadialMenuItem.IsEnabled":
                userType = (global::AniTube.AniTube_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Primitives.RadialMenuItem");
                xamlMember = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlMember(this, "IsEnabled", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_220_RadialMenuItem_IsEnabled;
                xamlMember.Setter = set_220_RadialMenuItem_IsEnabled;
                break;
            case "Telerik.UI.Xaml.Controls.Primitives.RadialMenuItem.Command":
                userType = (global::AniTube.AniTube_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Primitives.RadialMenuItem");
                xamlMember = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlMember(this, "Command", "System.Windows.Input.ICommand");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_221_RadialMenuItem_Command;
                xamlMember.Setter = set_221_RadialMenuItem_Command;
                break;
            case "Telerik.UI.Xaml.Controls.Primitives.RadialMenuItem.ParentItem":
                userType = (global::AniTube.AniTube_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Primitives.RadialMenuItem");
                xamlMember = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlMember(this, "ParentItem", "Telerik.UI.Xaml.Controls.Primitives.RadialMenuItem");
                xamlMember.Getter = get_222_RadialMenuItem_ParentItem;
                xamlMember.SetIsReadOnly();
                break;
            case "Telerik.UI.Xaml.Controls.Primitives.RadialMenuItem.IsSelected":
                userType = (global::AniTube.AniTube_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Primitives.RadialMenuItem");
                xamlMember = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlMember(this, "IsSelected", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_223_RadialMenuItem_IsSelected;
                xamlMember.Setter = set_223_RadialMenuItem_IsSelected;
                break;
            case "Telerik.UI.Xaml.Controls.Primitives.RadialMenuItem.GroupName":
                userType = (global::AniTube.AniTube_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Primitives.RadialMenuItem");
                xamlMember = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlMember(this, "GroupName", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_224_RadialMenuItem_GroupName;
                xamlMember.Setter = set_224_RadialMenuItem_GroupName;
                break;
            case "Telerik.UI.Xaml.Controls.Primitives.RadialMenuItem.Selectable":
                userType = (global::AniTube.AniTube_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Primitives.RadialMenuItem");
                xamlMember = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlMember(this, "Selectable", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_225_RadialMenuItem_Selectable;
                xamlMember.Setter = set_225_RadialMenuItem_Selectable;
                break;
            case "Telerik.UI.Xaml.Controls.Primitives.RadialMenuItem.Deselectable":
                userType = (global::AniTube.AniTube_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Primitives.RadialMenuItem");
                xamlMember = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlMember(this, "Deselectable", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_226_RadialMenuItem_Deselectable;
                xamlMember.Setter = set_226_RadialMenuItem_Deselectable;
                break;
            case "Telerik.UI.Xaml.Controls.Primitives.RadialMenuItem.Header":
                userType = (global::AniTube.AniTube_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Primitives.RadialMenuItem");
                xamlMember = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlMember(this, "Header", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_227_RadialMenuItem_Header;
                xamlMember.Setter = set_227_RadialMenuItem_Header;
                break;
            case "Telerik.UI.Xaml.Controls.Primitives.RadialMenuItem.IconContent":
                userType = (global::AniTube.AniTube_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Primitives.RadialMenuItem");
                xamlMember = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlMember(this, "IconContent", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_228_RadialMenuItem_IconContent;
                xamlMember.Setter = set_228_RadialMenuItem_IconContent;
                break;
            case "Telerik.UI.Xaml.Controls.Primitives.RadialMenuItem.ContentSectorBackground":
                userType = (global::AniTube.AniTube_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Primitives.RadialMenuItem");
                xamlMember = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlMember(this, "ContentSectorBackground", "Windows.UI.Xaml.Media.Brush");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_229_RadialMenuItem_ContentSectorBackground;
                xamlMember.Setter = set_229_RadialMenuItem_ContentSectorBackground;
                break;
            case "Telerik.UI.Xaml.Controls.Primitives.RadRadialMenu.ShowToolTip":
                userType = (global::AniTube.AniTube_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Primitives.RadRadialMenu");
                xamlMember = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlMember(this, "ShowToolTip", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_230_RadRadialMenu_ShowToolTip;
                xamlMember.Setter = set_230_RadRadialMenu_ShowToolTip;
                break;
            case "Telerik.UI.Xaml.Controls.Primitives.RadRadialMenu.IsOpen":
                userType = (global::AniTube.AniTube_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Primitives.RadRadialMenu");
                xamlMember = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlMember(this, "IsOpen", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_231_RadRadialMenu_IsOpen;
                xamlMember.Setter = set_231_RadRadialMenu_IsOpen;
                break;
            case "Telerik.UI.Xaml.Controls.Primitives.RadRadialMenu.StartAngle":
                userType = (global::AniTube.AniTube_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Primitives.RadRadialMenu");
                xamlMember = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlMember(this, "StartAngle", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_232_RadRadialMenu_StartAngle;
                xamlMember.Setter = set_232_RadRadialMenu_StartAngle;
                break;
            case "Telerik.UI.Xaml.Controls.Primitives.RadRadialMenu.InnerNavigationRadiusFactor":
                userType = (global::AniTube.AniTube_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Primitives.RadRadialMenu");
                xamlMember = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlMember(this, "InnerNavigationRadiusFactor", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_233_RadRadialMenu_InnerNavigationRadiusFactor;
                xamlMember.Setter = set_233_RadRadialMenu_InnerNavigationRadiusFactor;
                break;
            case "Telerik.UI.Xaml.Controls.Primitives.RadRadialMenu.InnerRadiusFactor":
                userType = (global::AniTube.AniTube_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Primitives.RadRadialMenu");
                xamlMember = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlMember(this, "InnerRadiusFactor", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_234_RadRadialMenu_InnerRadiusFactor;
                xamlMember.Setter = set_234_RadRadialMenu_InnerRadiusFactor;
                break;
            case "Telerik.UI.Xaml.Controls.Primitives.RadRadialMenu.OuterRadiusFactor":
                userType = (global::AniTube.AniTube_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Primitives.RadRadialMenu");
                xamlMember = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlMember(this, "OuterRadiusFactor", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_235_RadRadialMenu_OuterRadiusFactor;
                xamlMember.Setter = set_235_RadRadialMenu_OuterRadiusFactor;
                break;
            case "Telerik.UI.Xaml.Controls.Primitives.RadRadialMenu.ContentMenuBackgroundStyle":
                userType = (global::AniTube.AniTube_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Primitives.RadRadialMenu");
                xamlMember = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlMember(this, "ContentMenuBackgroundStyle", "Windows.UI.Xaml.Style");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_236_RadRadialMenu_ContentMenuBackgroundStyle;
                xamlMember.Setter = set_236_RadRadialMenu_ContentMenuBackgroundStyle;
                break;
            case "Telerik.UI.Xaml.Controls.Primitives.RadRadialMenu.NavigationMenuBackgroundStyle":
                userType = (global::AniTube.AniTube_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Primitives.RadRadialMenu");
                xamlMember = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlMember(this, "NavigationMenuBackgroundStyle", "Windows.UI.Xaml.Style");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_237_RadRadialMenu_NavigationMenuBackgroundStyle;
                xamlMember.Setter = set_237_RadRadialMenu_NavigationMenuBackgroundStyle;
                break;
            case "Telerik.UI.Xaml.Controls.Primitives.RadRadialMenu.CommandService":
                userType = (global::AniTube.AniTube_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Primitives.RadRadialMenu");
                xamlMember = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlMember(this, "CommandService", "Telerik.UI.Xaml.Controls.Primitives.Menu.CommandService");
                xamlMember.Getter = get_238_RadRadialMenu_CommandService;
                xamlMember.SetIsReadOnly();
                break;
            case "Telerik.UI.Xaml.Controls.Primitives.RadRadialMenu.Commands":
                userType = (global::AniTube.AniTube_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Primitives.RadRadialMenu");
                xamlMember = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlMember(this, "Commands", "Telerik.UI.Xaml.Controls.Primitives.CommandCollection`1<Telerik.UI.Xaml.Controls.Primitives.RadRadialMenu>");
                xamlMember.Getter = get_239_RadRadialMenu_Commands;
                xamlMember.SetIsReadOnly();
                break;
            case "Telerik.UI.Xaml.Controls.Primitives.AttachableObject`1<Telerik.UI.Xaml.Controls.Primitives.RadRadialMenu>.Owner":
                userType = (global::AniTube.AniTube_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Primitives.AttachableObject`1<Telerik.UI.Xaml.Controls.Primitives.RadRadialMenu>");
                xamlMember = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlMember(this, "Owner", "Telerik.UI.Xaml.Controls.Primitives.RadRadialMenu");
                xamlMember.Getter = get_240_AttachableObject_Owner;
                xamlMember.SetIsReadOnly();
                break;
            case "Telerik.UI.Xaml.Controls.Primitives.RadRadialMenu.TargetElement":
                userType = (global::AniTube.AniTube_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Primitives.RadRadialMenu");
                xamlMember = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlMember(this, "TargetElement", "Windows.UI.Xaml.FrameworkElement");
                xamlMember.Getter = get_241_RadRadialMenu_TargetElement;
                xamlMember.SetIsReadOnly();
                break;
            case "Telerik.UI.Xaml.Controls.RadControl.CurrentVisualState":
                userType = (global::AniTube.AniTube_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.RadControl");
                xamlMember = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlMember(this, "CurrentVisualState", "String");
                xamlMember.Getter = get_242_RadControl_CurrentVisualState;
                xamlMember.SetIsReadOnly();
                break;
            case "Telerik.UI.Xaml.Controls.Primitives.RadialMenuTriggerBehavior.AttachTriggers":
                userType = (global::AniTube.AniTube_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Primitives.RadialMenuTriggerBehavior");
                xamlMember = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlMember(this, "AttachTriggers", "Telerik.UI.Xaml.Controls.Primitives.RadialMenuAttachTriggers");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_243_RadialMenuTriggerBehavior_AttachTriggers;
                xamlMember.Setter = set_243_RadialMenuTriggerBehavior_AttachTriggers;
                break;
            case "Telerik.UI.Xaml.Controls.Primitives.AttachableObject`1<Windows.UI.Xaml.FrameworkElement>.Owner":
                userType = (global::AniTube.AniTube_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Primitives.AttachableObject`1<Windows.UI.Xaml.FrameworkElement>");
                xamlMember = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlMember(this, "Owner", "Windows.UI.Xaml.FrameworkElement");
                xamlMember.Getter = get_244_AttachableObject_Owner;
                xamlMember.SetIsReadOnly();
                break;
            case "Telerik.UI.Xaml.Controls.Primitives.BusyIndicator.BusyIndicatorAnimationAdapter.Animation":
                userType = (global::AniTube.AniTube_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Primitives.BusyIndicator.BusyIndicatorAnimationAdapter");
                xamlMember = new global::AniTube.AniTube_Windows_XamlTypeInfo.XamlMember(this, "Animation", "Windows.UI.Xaml.Media.Animation.Storyboard");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_245_BusyIndicatorAnimationAdapter_Animation;
                xamlMember.Setter = set_245_BusyIndicatorAnimationAdapter_Animation;
                break;
            }
            return xamlMember;
        }
    }

    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", "4.0.0.0")]    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlSystemBaseType : global::Windows.UI.Xaml.Markup.IXamlType
    {
        string _fullName;
        global::System.Type _underlyingType;

        public XamlSystemBaseType(string fullName, global::System.Type underlyingType)
        {
            _fullName = fullName;
            _underlyingType = underlyingType;
        }

        public string FullName { get { return _fullName; } }

        public global::System.Type UnderlyingType
        {
            get
            {
                return _underlyingType;
            }
        }

        virtual public global::Windows.UI.Xaml.Markup.IXamlType BaseType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlMember ContentProperty { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlMember GetMember(string name) { throw new global::System.NotImplementedException(); }
        virtual public bool IsArray { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsCollection { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsConstructible { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsDictionary { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsMarkupExtension { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsBindable { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsReturnTypeStub { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsLocalType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlType ItemType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlType KeyType { get { throw new global::System.NotImplementedException(); } }
        virtual public object ActivateInstance() { throw new global::System.NotImplementedException(); }
        virtual public void AddToMap(object instance, object key, object item)  { throw new global::System.NotImplementedException(); }
        virtual public void AddToVector(object instance, object item)  { throw new global::System.NotImplementedException(); }
        virtual public void RunInitializer()   { throw new global::System.NotImplementedException(); }
        virtual public object CreateFromString(string input)   { throw new global::System.NotImplementedException(); }
    }
    
    internal delegate object Activator();
    internal delegate void AddToCollection(object instance, object item);
    internal delegate void AddToDictionary(object instance, object key, object item);

    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", "4.0.0.0")]    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlUserType : global::AniTube.AniTube_Windows_XamlTypeInfo.XamlSystemBaseType
    {
        global::AniTube.AniTube_Windows_XamlTypeInfo.XamlTypeInfoProvider _provider;
        global::Windows.UI.Xaml.Markup.IXamlType _baseType;
        bool _isArray;
        bool _isMarkupExtension;
        bool _isBindable;
        bool _isReturnTypeStub;
        bool _isLocalType;

        string _contentPropertyName;
        string _itemTypeName;
        string _keyTypeName;
        global::System.Collections.Generic.Dictionary<string, string> _memberNames;
        global::System.Collections.Generic.Dictionary<string, object> _enumValues;

        public XamlUserType(global::AniTube.AniTube_Windows_XamlTypeInfo.XamlTypeInfoProvider provider, string fullName, global::System.Type fullType, global::Windows.UI.Xaml.Markup.IXamlType baseType)
            :base(fullName, fullType)
        {
            _provider = provider;
            _baseType = baseType;
        }

        // --- Interface methods ----

        override public global::Windows.UI.Xaml.Markup.IXamlType BaseType { get { return _baseType; } }
        override public bool IsArray { get { return _isArray; } }
        override public bool IsCollection { get { return (CollectionAdd != null); } }
        override public bool IsConstructible { get { return (Activator != null); } }
        override public bool IsDictionary { get { return (DictionaryAdd != null); } }
        override public bool IsMarkupExtension { get { return _isMarkupExtension; } }
        override public bool IsBindable { get { return _isBindable; } }
        override public bool IsReturnTypeStub { get { return _isReturnTypeStub; } }
        override public bool IsLocalType { get { return _isLocalType; } }

        override public global::Windows.UI.Xaml.Markup.IXamlMember ContentProperty
        {
            get { return _provider.GetMemberByLongName(_contentPropertyName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlType ItemType
        {
            get { return _provider.GetXamlTypeByName(_itemTypeName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlType KeyType
        {
            get { return _provider.GetXamlTypeByName(_keyTypeName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlMember GetMember(string name)
        {
            if (_memberNames == null)
            {
                return null;
            }
            string longName;
            if (_memberNames.TryGetValue(name, out longName))
            {
                return _provider.GetMemberByLongName(longName);
            }
            return null;
        }

        override public object ActivateInstance()
        {
            return Activator(); 
        }

        override public void AddToMap(object instance, object key, object item) 
        {
            DictionaryAdd(instance, key, item);
        }

        override public void AddToVector(object instance, object item)
        {
            CollectionAdd(instance, item);
        }

        override public void RunInitializer() 
        {
            System.Runtime.CompilerServices.RuntimeHelpers.RunClassConstructor(UnderlyingType.TypeHandle);
        }

        override public object CreateFromString(string input)
        {
            if (_enumValues != null)
            {
                int value = 0;

                string[] valueParts = input.Split(',');

                foreach (string valuePart in valueParts) 
                {
                    object partValue;
                    int enumFieldValue = 0;
                    try
                    {
                        if (_enumValues.TryGetValue(valuePart.Trim(), out partValue))
                        {
                            enumFieldValue = global::System.Convert.ToInt32(partValue);
                        }
                        else
                        {
                            try
                            {
                                enumFieldValue = global::System.Convert.ToInt32(valuePart.Trim());
                            }
                            catch( global::System.FormatException )
                            {
                                foreach( string key in _enumValues.Keys )
                                {
                                    if( string.Compare(valuePart.Trim(), key, global::System.StringComparison.OrdinalIgnoreCase) == 0 )
                                    {
                                        if( _enumValues.TryGetValue(key.Trim(), out partValue) )
                                        {
                                            enumFieldValue = global::System.Convert.ToInt32(partValue);
                                            break;
                                        }
                                    }
                                }
                            }
                        }
                        value |= enumFieldValue; 
                    }
                    catch( global::System.FormatException )
                    {
                        throw new global::System.ArgumentException(input, FullName);
                    }
                }

                return value; 
            }
            throw new global::System.ArgumentException(input, FullName);
        }

        // --- End of Interface methods

        public Activator Activator { get; set; }
        public AddToCollection CollectionAdd { get; set; }
        public AddToDictionary DictionaryAdd { get; set; }

        public void SetContentPropertyName(string contentPropertyName)
        {
            _contentPropertyName = contentPropertyName;
        }

        public void SetIsArray()
        {
            _isArray = true; 
        }

        public void SetIsMarkupExtension()
        {
            _isMarkupExtension = true;
        }

        public void SetIsBindable()
        {
            _isBindable = true;
        }

        public void SetIsReturnTypeStub()
        {
            _isReturnTypeStub = true;
        }

        public void SetIsLocalType()
        {
            _isLocalType = true;
        }

        public void SetItemTypeName(string itemTypeName)
        {
            _itemTypeName = itemTypeName;
        }

        public void SetKeyTypeName(string keyTypeName)
        {
            _keyTypeName = keyTypeName;
        }

        public void AddMemberName(string shortName)
        {
            if(_memberNames == null)
            {
                _memberNames =  new global::System.Collections.Generic.Dictionary<string,string>();
            }
            _memberNames.Add(shortName, FullName + "." + shortName);
        }

        public void AddEnumValue(string name, object value)
        {
            if (_enumValues == null)
            {
                _enumValues = new global::System.Collections.Generic.Dictionary<string, object>();
            }
            _enumValues.Add(name, value);
        }
    }

    internal delegate object Getter(object instance);
    internal delegate void Setter(object instance, object value);

    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", "4.0.0.0")]    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlMember : global::Windows.UI.Xaml.Markup.IXamlMember
    {
        global::AniTube.AniTube_Windows_XamlTypeInfo.XamlTypeInfoProvider _provider;
        string _name;
        bool _isAttachable;
        bool _isDependencyProperty;
        bool _isReadOnly;

        string _typeName;
        string _targetTypeName;

        public XamlMember(global::AniTube.AniTube_Windows_XamlTypeInfo.XamlTypeInfoProvider provider, string name, string typeName)
        {
            _name = name;
            _typeName = typeName;
            _provider = provider;
        }

        public string Name { get { return _name; } }

        public global::Windows.UI.Xaml.Markup.IXamlType Type
        {
            get { return _provider.GetXamlTypeByName(_typeName); }
        }

        public void SetTargetTypeName(string targetTypeName)
        {
            _targetTypeName = targetTypeName;
        }
        public global::Windows.UI.Xaml.Markup.IXamlType TargetType
        {
            get { return _provider.GetXamlTypeByName(_targetTypeName); }
        }

        public void SetIsAttachable() { _isAttachable = true; }
        public bool IsAttachable { get { return _isAttachable; } }

        public void SetIsDependencyProperty() { _isDependencyProperty = true; }
        public bool IsDependencyProperty { get { return _isDependencyProperty; } }

        public void SetIsReadOnly() { _isReadOnly = true; }
        public bool IsReadOnly { get { return _isReadOnly; } }

        public Getter Getter { get; set; }
        public object GetValue(object instance)
        {
            if (Getter != null)
                return Getter(instance);
            else
                throw new global::System.InvalidOperationException("GetValue");
        }

        public Setter Setter { get; set; }
        public void SetValue(object instance, object value)
        {
            if (Setter != null)
                Setter(instance, value);
            else
                throw new global::System.InvalidOperationException("SetValue");
        }
    }
}


